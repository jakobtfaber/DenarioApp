This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
denario_app/
  app.py
  arxiv_rag.py
  cli.py
  components.py
  constants.py
  graphrag.py
  preflight.py
  rag_adapter.py
  utils.py
denario_app.egg-info/
  dependency_links.txt
  PKG-INFO
  requires.txt
  SOURCES.txt
  top_level.txt
my_research/
  idea_generation_output/
    LLM_calls.txt
  input_files/
    data_description.md
    idea.md
    methods.md
  methods_generation_output/
    LLM_calls.txt
01_denario_basics.ipynb
02_interactive_research.ipynb
03_advanced.ipynb
03_manuscript_review.ipynb
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="denario_app/app.py">
  1: import os
  2: import sys
  3: try:
  4:     from .utils import extract_api_keys, get_project_dir, set_api_keys, create_zip_in_memory, delete_old_folders
  5:     from .components import description_comp, idea_comp, method_comp, results_comp, paper_comp, keywords_comp, check_idea_comp, wolfram_hitl_review_comp
  6:     from .constants import PROJECT_DIR, LLMs
  7: except Exception:
  8:     _HERE = os.path.dirname(__file__)
  9:     if _HERE not in sys.path:
 10:         sys.path.insert(0, _HERE)
 11:     from utils import extract_api_keys, get_project_dir, set_api_keys, create_zip_in_memory, delete_old_folders
 12:     from components import description_comp, idea_comp, method_comp, results_comp, paper_comp, keywords_comp, check_idea_comp, wolfram_hitl_review_comp
 13:     from constants import PROJECT_DIR, LLMs
 14: try:
 15:     from .preflight import run_checks
 16: except Exception:
 17:     import importlib.util as _ilu
 18:     _pf_path = os.path.join(os.path.dirname(__file__), 'preflight.py')
 19:     _spec = _ilu.spec_from_file_location('denario_app_preflight', _pf_path)
 20:     assert _spec and _spec.loader
 21:     _mod = _ilu.module_from_spec(_spec)
 22:     _spec.loader.exec_module(_mod)
 23:     run_checks = getattr(_mod, 'run_checks')
 24: import argparse
 25: import streamlit as st
 26: DENARIO_SRC = '/data/cmbagents/Denario'
 27: try:
 28:     from denario import Denario
 29: except ModuleNotFoundError:
 30:     sys.path.insert(0, DENARIO_SRC)
 31:     try:
 32:         from denario import Denario
 33:     except ModuleNotFoundError:
 34:         import importlib.util
 35:         import types
 36:         init_path = os.path.join(DENARIO_SRC, 'denario', '__init__.py')
 37:         spec = importlib.util.spec_from_file_location('denario', init_path)
 38:         mod = importlib.util.module_from_spec(spec)
 39:         assert spec is not None and spec.loader is not None
 40:         spec.loader.exec_module(mod)
 41:         sys.modules['denario'] = mod
 42:         from denario import Denario
 43: _pf = run_checks()
 44: if not _pf['summary']['ok']:
 45:     st.error('Preflight failed. See terminal logs for details.')
 46:     st.json(_pf)
 47:     st.stop()
 48: denarioimg = 'https://avatars.githubusercontent.com/u/206478071?s=400&u=b2da27eb19fb77adbc7b12b43da91fbc7309fb6f&v=4'
 49: st.set_page_config(
 50:     page_title="Denario",
 51:     layout="wide",
 52:     initial_sidebar_state="auto",
 53:     menu_items=None
 54: )
 55: st.session_state["LLM_API_KEYS"] = {}
 56: st.title('Denario')
 57: _project_dir = get_project_dir()
 58: den = Denario(project_dir=_project_dir)
 59: st.markdown("""
 60:     <style>
 61:     .log-box {
 62:         background-color: #111827;
 63:         color: #d1d5db;
 64:         font-family: monospace;
 65:         padding: 1em;
 66:         border-radius: 8px;
 67:         max-height: 300px;
 68:         overflow-y: auto;
 69:         border: 1px solid #4b5563;
 70:         white-space: pre-wrap;
 71:         resize: vertical;
 72:         min-height: 100px;
 73:         max-height: 700px;
 74:     }
 75:     </style>
 76: """, unsafe_allow_html=True)
 77: with st.sidebar:
 78:     st.header("API keys")
 79:     st.markdown(
 80:         "*Input OpenAI, Anthropic, Gemini and Perplexity API keys below. See [here](https://denario.readthedocs.io/en/latest/apikeys/) for more information.*")
 81:     with st.expander("Set API keys"):
 82:         for llm in LLMs:
 83:             api_key = st.text_input(
 84:                 f"{llm} API key:",
 85:                 type="password",
 86:                 key=f"{llm}_api_key_input"
 87:             )
 88:             # If the user enters a key, save it and rerun to refresh the
 89:             # interface
 90:             if api_key:
 91:                 st.session_state["LLM_API_KEYS"][llm] = api_key
 92:                 set_api_keys(den.keys, api_key, llm)
 93:             # Check session state
 94:             has_key = st.session_state["LLM_API_KEYS"].get(llm)
 95:             # # Display status after the key is saved
 96:             # if has_key:
 97:             #     st.markdown(f"<small style='color:green;'> ✅: {llm} API key set</small>",unsafe_allow_html=True)
 98:             # else:
 99:             #     st.markdown(f"<small style='color:red;'>❌: No {llm} API key</small>", unsafe_allow_html=True)
100:         st.markdown(
101: )
102:         uploaded_dotenv = st.file_uploader(
103:             "Upload the .env file", accept_multiple_files=False)
104:         if uploaded_dotenv:
105:             keys = extract_api_keys(uploaded_dotenv)
106:             for key, value in keys.items():
107:                 st.session_state["LLM_API_KEYS"][key] = value
108:                 den.keys[key] = value
109:     st.header("Upload data")
110:     uploaded_data = st.file_uploader(
111:         "Upload the data files",
112:         accept_multiple_files=True)
113:     if uploaded_data:
114:         os.makedirs(f"{den.project_dir}/data/", exist_ok=True)
115:         for uploaded_file in uploaded_data:
116:             with open(f"{den.project_dir}/data/{uploaded_file.name}", "wb") as f:
117:                 f.write(uploaded_file.getbuffer())
118:         st.success("Files uploaded successfully!")
119:     st.header("Download project")
120:     project_zip = create_zip_in_memory(den.project_dir)
121:     st.download_button(
122:         label="Download all project files",
123:         data=project_zip,
124:         file_name="project.zip",
125:         mime="application/zip",
126:         icon=":material/download:",
127:     )
128: st.write("AI agents to assist the development of a scientific research process. From getting research ideas, developing methods, computing results and writing papers.")
129: st.caption(
130:     "[Get the source code here](https://github.com/AstroPilot-AI/Denario.git).")
131: tab_descr, tab_idea, tab_method, tab_restults, tab_paper, tab_check_idea, tab_keywords, tab_wolfram = st.tabs([
132:     "**Description**",
133:     "**Idea**",
134:     "**Methods**",
135:     "**Results**",
136:     "**Paper**",
137:     "Check idea",
138:     "Keywords",
139:     "Wolfram Alpha"
140: ])
141: with tab_descr:
142:     description_comp(den)
143: with tab_idea:
144:     idea_comp(den)
145: with tab_method:
146:     method_comp(den)
147: with tab_restults:
148:     results_comp(den)
149: with tab_paper:
150:     paper_comp(den)
151: with tab_check_idea:
152:     check_idea_comp(den)
153: with tab_keywords:
154:     keywords_comp(den)
155: with tab_wolfram:
156:     wolfram_hitl_review_comp()
</file>

<file path="denario_app/arxiv_rag.py">
  1: import os
  2: import json
  3: import logging
  4: import requests
  5: import xml.etree.ElementTree as ET
  6: from typing import List, Dict, Any, Optional
  7: from datetime import datetime, timedelta
  8: import re
  9: logger = logging.getLogger(__name__)
 10: class ArxivRetriever:
 11:     def __init__(self, max_results: int = 10):
 12:         self.base_url = "http://export.arxiv.org/api/query"
 13:         self.max_results = max_results
 14:     def _parse_arxiv_entry(self, entry) -> Dict[str, Any]:
 15:         title = entry.find('{http://www.w3.org/2005/Atom}title').text.strip()
 16:         summary = entry.find(
 17:             '{http://www.w3.org/2005/Atom}summary').text.strip()
 18:         published = entry.find('{http://www.w3.org/2005/Atom}published').text
 19:         updated = entry.find('{http://www.w3.org/2005/Atom}updated').text
 20:         authors = []
 21:         for author in entry.findall('{http://www.w3.org/2005/Atom}author'):
 22:             name = author.find('{http://www.w3.org/2005/Atom}name').text
 23:             authors.append(name)
 24:         arxiv_id = None
 25:         pdf_url = None
 26:         abstract_url = None
 27:         for link in entry.findall('{http://www.w3.org/2005/Atom}link'):
 28:             if link.get('type') == 'application/pdf':
 29:                 pdf_url = link.get('href')
 30:             elif link.get('type') == 'text/html':
 31:                 abstract_url = link.get('href')
 32:         if abstract_url:
 33:             match = re.search(r'abs/(\d+\.\d+(?:v\d+)?)', abstract_url)
 34:             if match:
 35:                 arxiv_id = match.group(1)
 36:         categories = []
 37:         for category in entry.findall('{http://www.w3.org/2005/Atom}category'):
 38:             term = category.get('term')
 39:             if term:
 40:                 categories.append(term)
 41:         doi = None
 42:         if arxiv_id:
 43:             doi = f"10.48550/arXiv.{arxiv_id}"
 44:         return {
 45:             "title": title,
 46:             "authors": authors,
 47:             "summary": summary,
 48:             "published": published,
 49:             "updated": updated,
 50:             "arxiv_id": arxiv_id,
 51:             "pdf_url": pdf_url,
 52:             "abstract_url": abstract_url,
 53:             "doi": doi,
 54:             "categories": categories,
 55:             "type": "arxiv_paper"
 56:         }
 57:     def search(self, query: str,
 58:                max_results: Optional[int] = None) -> List[Dict[str, Any]]:
 59:         if max_results is None:
 60:             max_results = self.max_results
 61:         # Construct search parameters
 62:         params = {
 63:             'search_query': query,
 64:             'start': 0,
 65:             'max_results': max_results,
 66:             'sortBy': 'relevance',
 67:             'sortOrder': 'descending'
 68:         }
 69:         try:
 70:             logger.info(f"Searching arXiv for: {query}")
 71:             response = requests.get(self.base_url, params=params, timeout=30)
 72:             response.raise_for_status()
 73:             # Parse XML response
 74:             root = ET.fromstring(response.content)
 75:             # Extract entries
 76:             entries = root.findall('{http://www.w3.org/2005/Atom}entry')
 77:             results = []
 78:             for entry in entries:
 79:                 paper = self._parse_arxiv_entry(entry)
 80:                 results.append(paper)
 81:             logger.info(f"Found {len(results)} papers from arXiv")
 82:             return results
 83:         except Exception as e:
 84:             logger.error(f"arXiv search failed: {e}")
 85:             return []
 86:     def search_by_category(
 87:             self, category: str, max_results: Optional[int] = None) -> List[Dict[str, Any]]:
 88:         if max_results is None:
 89:             max_results = self.max_results
 90:         # Common arXiv categories for cosmology/physics
 91:         category_map = {
 92:             "cosmology": "astro-ph.CO",
 93:             "astrophysics": "astro-ph",
 94:             "physics": "physics",
 95:             "general relativity": "gr-qc",
 96:             "particle physics": "hep-ph",
 97:             "quantum field theory": "hep-th"
 98:         }
 99:         arxiv_category = category_map.get(category.lower(), category)
100:         query = f"cat:{arxiv_category}"
101:         return self.search(query, max_results)
102:     def get_recent_papers(self,
103:                           category: str = "astro-ph.CO",
104:                           days: int = 30,
105:                           max_results: Optional[int] = None) -> List[Dict[str,
106:                                                                           Any]]:
107:         if max_results is None:
108:             max_results = self.max_results
109:         # Calculate date range
110:         end_date = datetime.now()
111:         start_date = end_date - timedelta(days=days)
112:         # Format dates for arXiv API
113:         start_str = start_date.strftime("%Y%m%d")
114:         end_str = end_date.strftime("%Y%m%d")
115:         query = f"cat:{category} AND submittedDate:[{start_str}0000 TO {end_str}2359]"
116:         return self.search(query, max_results)
117:     def format_for_denario(self, papers: List[Dict[str, Any]]) -> str:
118:         if not papers:
119:             return "No papers found."
120:         result = f"Found {len(papers)} relevant papers from arXiv:\n\n"
121:         for i, paper in enumerate(papers, 1):
122:             result += f"{i}. {paper['title']}\n"
123:             result += f"   Authors: {', '.join(paper['authors'][:3])}"
124:             if len(paper['authors']) > 3:
125:                 result += f" et al. ({len(paper['authors'])} total)"
126:             result += "\n"
127:             if paper['arxiv_id']:
128:                 result += f"   arXiv ID: {paper['arxiv_id']}\n"
129:             if paper['doi']:
130:                 result += f"   DOI: https://doi.org/{paper['doi']}\n"
131:             if paper['categories']:
132:                 result += f"   Categories: {', '.join(paper['categories'][:2])}\n"
133:             if paper['abstract_url']:
134:                 result += f"   URL: {paper['abstract_url']}\n"
135:             # Add summary preview
136:             summary = paper['summary'][:200] + \
137:                 "..." if len(paper['summary']) > 200 else paper['summary']
138:             result += f"   Abstract: {summary}\n"
139:             result += "\n"
140:         return result
141: class ArxivRAGRetriever:
142:     def __init__(self, max_results: int = 5):
143:         self.retriever = ArxivRetriever(max_results)
144:     def retrieve(self, query: str,
145:                  max_results: Optional[int] = None) -> List[Dict[str, Any]]:
146:         papers = self.retriever.search(query, max_results)
147:         # Format for DenarioApp
148:         formatted_results = []
149:         for paper in papers:
150:             formatted_results.append({
151:                 "title": paper["title"],
152:                 "url": paper["abstract_url"] or f"https://arxiv.org/abs/{paper['arxiv_id']}",
153:                 "doi": paper["doi"],
154:                 "content": paper["summary"],
155:                 "authors": paper["authors"],
156:                 "arxiv_id": paper["arxiv_id"],
157:                 "categories": paper["categories"],
158:                 "published": paper["published"],
159:                 "type": "arxiv_paper"
160:             })
161:         return formatted_results
162:     def search_by_topic(
163:             self,
164:             topic: str,
165:             max_results: Optional[int] = None) -> str:
166:         papers = self.retriever.search(topic, max_results)
167:         return self.retriever.format_for_denario(papers)
168:     def get_recent_cosmology_papers(
169:             self,
170:             days: int = 30,
171:             max_results: Optional[int] = None) -> str:
172:         papers = self.retriever.get_recent_papers(
173:             "astro-ph.CO", days, max_results)
174:         return self.retriever.format_for_denario(papers)
175: _arxiv_retriever = None
176: def get_arxiv_retriever() -> ArxivRAGRetriever:
177:     global _arxiv_retriever
178:     if _arxiv_retriever is None:
179:         _arxiv_retriever = ArxivRAGRetriever()
180:     return _arxiv_retriever
</file>

<file path="denario_app/cli.py">
 1: import os
 2: import sys
 3: from pathlib import Path
 4: def run():
 5:     app_path = Path(__file__).resolve().parent / "app.py"
 6:     if not app_path.exists():
 7:         app_path = Path(__file__).resolve().parent.parent / "src" / "denario_app" / "app.py"
 8:     if not app_path.exists():
 9:         print(f"❌ Could not find Streamlit app at {app_path}")
10:         sys.exit(1)
11:     cmd = [sys.executable, "-m", "streamlit", "run", str(app_path)]
12:     os.execv(sys.executable, cmd)
</file>

<file path="denario_app/components.py">
   1: from pathlib import Path
   2: from PIL import Image
   3: import streamlit as st
   4: import json
   5: import os
   6: from streamlit_pdf_viewer import pdf_viewer
   7: from denario import Denario, Journal
   8: from denario import models
   9: from denario.utils import WolframAlphaClient
  10: try:
  11:     from .utils import show_markdown_file, create_zip_in_memory, stream_to_streamlit
  12:     from .constants import RAG_PROVIDERS
  13: except Exception:
  14:     from utils import show_markdown_file, create_zip_in_memory, stream_to_streamlit
  15:     from constants import RAG_PROVIDERS
  16: def _get_domain_context(provider: str) -> str:
  17:     if "Planck" in provider:
  18:         return """Planck Mission Context:
  19: - Planck 2018 results: cosmological parameters from CMB temperature and polarization
  20: - Key datasets: Planck 2018 TT,TE,EE+lowE+lensing+BAO
  21: - Relevant parameters: H0, Ωm, ΩΛ, ns, As, τ
  22: - Recent constraints: H0 = 67.4 ± 0.5 km/s/Mpc (Planck 2018)
  23: - Lensing potential: Planck lensing reconstruction
  24: - Systematics: foreground contamination, beam uncertainties"""
  25:     elif "CAMB" in provider:
  26:         return """CAMB (Code for Anisotropies in the Microwave Background) Context:
  27: - Boltzmann solver for CMB anisotropies and matter power spectra
  28: - Key features: scalar, vector, tensor modes; dark energy models
  29: - Recent updates: CAMB 1.3+ with improved precision
  30: - Applications: parameter estimation, likelihood analysis
  31: - Integration: CosmoMC, MontePython, Cobaya
  32: - Outputs: Cl, P(k), transfer functions"""
  33:     elif "CLASSY" in provider:
  34:         return """CLASSY (Cosmic Linear Anisotropy Solving System) Context:
  35: - Alternative to CAMB for CMB and LSS calculations
  36: - Features: high precision, modular design, dark energy models
  37: - Recent work: CLASSY-SZ for Sunyaev-Zel'dovich effects
  38: - Applications: parameter estimation, model comparison
  39: - Integration: MontePython, Cobaya
  40: - Advantages: speed, flexibility, extended models"""
  41:     else:
  42:         return "Domain-specific context not available for this provider."
  43: def _retrieve_with_unified_adapter(
  44:         provider: str,
  45:         query: str,
  46:         max_results: int = 5) -> tuple:
  47:     try:
  48:         from .rag_adapter import get_unified_rag_adapter, format_results_for_ui
  49:         adapter = get_unified_rag_adapter()
  50:         provider_info = adapter.get_provider_info(provider)
  51:         results = adapter.retrieve_with_fallback(query, provider, max_results)
  52:         return results, provider_info, None
  53:     except Exception as e:
  54:         return [], {"name": "Unknown", "available": False}, str(e)
  55: def description_comp(den: Denario) -> None:
  56:     st.header("Data description")
  57:     data_descr = st.text_area(
  58:         "Describe the data and tools to be used in the project. You may also "
  59:         "include information about the computing resources required.",
  60:         placeholder="E.g. Analyze the experimental data stored in /path/to/data.csv "
  61:         "using sklearn and pandas. This data includes time-series measurements "
  62:         "from a particle detector.",
  63:         key="data_descr",
  64:         height=100,
  65:     )
  66:     uploaded_file = st.file_uploader(
  67:         "Alternatively, upload a file with the data description in markdown "
  68:         "format.",
  69:         accept_multiple_files=False,
  70:     )
  71:     if uploaded_file:
  72:         content = uploaded_file.read().decode("utf-8")
  73:         den.set_data_description(content)
  74:     if data_descr:
  75:         den.set_data_description(data_descr)
  76:     st.markdown("### Current data description")
  77:     try:
  78:         show_markdown_file(
  79:             den.project_dir + "/input_files/data_description.md",
  80:             label="data description",
  81:         )
  82:     except FileNotFoundError:
  83:         st.write("Data description not set.")
  84: def idea_comp(den: Denario) -> None:
  85:     st.header("Research idea")
  86:     st.write("Generate a research idea provided the data description.")
  87:     st.write(
  88:         "Choose between a fast generation process or a more involved one using "
  89:         "planning and control through [cmbagent](https://github.com/CMBAgents/cmbagent).")
  90:     fast = st.toggle("Fast generation", value=True, key="fast_toggle_idea")
  91:     model_keys = list(models.keys())
  92:     if fast:
  93:         default_fast_idea_index = model_keys.index("gemini-2.0-flash")
  94:         st.caption("Choose a LLM model for the fast generation")
  95:         llm_model = st.selectbox(
  96:             "LLM Model",
  97:             model_keys,
  98:             index=default_fast_idea_index,
  99:             key="llm_model_idea",
 100:         )
 101:     else:
 102:         default_idea_maker_index = model_keys.index("gpt-4o")
 103:         default_idea_hater_index = model_keys.index("claude-3.7-sonnet")
 104:         col1, col2 = st.columns(2)
 105:         with col1:
 106:             st.caption(
 107:                 "Idea Maker: Generates and selects the best research ideas based on "
 108:                 "the data description")
 109:             idea_maker_model = st.selectbox(
 110:                 "Idea Maker Model",
 111:                 model_keys,
 112:                 index=default_idea_maker_index,
 113:                 key="idea_maker_model",
 114:             )
 115:         with col2:
 116:             st.caption(
 117:                 "Idea Hater: Critiques ideas and proposes recommendations for "
 118:                 "improvement"
 119:             )
 120:             idea_hater_model = st.selectbox(
 121:                 "Idea Hater Model",
 122:                 model_keys,
 123:                 index=default_idea_hater_index,
 124:                 key="idea_hater_model",
 125:             )
 126:     if not fast:
 127:         col3, col4 = st.columns(2)
 128:         with col3:
 129:             st.caption(
 130:                 "Planner: Creates a detailed plan for generating research ideas"
 131:             )
 132:             planner_model = st.selectbox(
 133:                 "Planner Model",
 134:                 model_keys,
 135:                 index=model_keys.index("gpt-4o"),
 136:                 key="planner_model_idea",
 137:             )
 138:         with col4:
 139:             st.caption(
 140:                 "Plan Reviewer: Reviews and improves the generated plan"
 141:             )
 142:             plan_reviewer_model = st.selectbox(
 143:                 "Plan Reviewer Model",
 144:                 model_keys,
 145:                 index=model_keys.index("claude-3.7-sonnet"),
 146:                 key="plan_reviewer_model_idea",
 147:             )
 148:     if "idea_running" not in st.session_state:
 149:         st.session_state.idea_running = False
 150:     col1, col2 = st.columns([1, 1])
 151:     with col1:
 152:         press_button = st.button(
 153:             "Generate",
 154:             type="primary",
 155:             key="get_idea",
 156:             disabled=st.session_state.idea_running,
 157:         )
 158:     with col2:
 159:         stop_button = st.button(
 160:             "Stop",
 161:             type="secondary",
 162:             key="stop_idea",
 163:             disabled=not st.session_state.idea_running,
 164:         )
 165:     st.markdown(
 166: ,
 167:         unsafe_allow_html=True,
 168:     )
 169:     if press_button and not st.session_state.idea_running:
 170:         st.session_state.idea_running = True
 171:         st.rerun()
 172:     if stop_button and st.session_state.idea_running:
 173:         st.session_state.idea_running = False
 174:         st.warning("Operation stopped by user.")
 175:         st.rerun()
 176:     if st.session_state.idea_running:
 177:         with st.spinner("Generating research idea...", show_time=True):
 178:             log_box = st.empty()
 179:             with stream_to_streamlit(log_box):
 180:                 try:
 181:                     if fast:
 182:                         den.get_idea_fast(llm=llm_model, verbose=True)
 183:                     else:
 184:                         den.get_idea(
 185:                             idea_maker_model=models[idea_maker_model],
 186:                             idea_hater_model=models[idea_hater_model],
 187:                             planner_model=models[planner_model],
 188:                             plan_reviewer_model=models[plan_reviewer_model],
 189:                         )
 190:                     if (
 191:                         st.session_state.idea_running
 192:                     ):
 193:                         st.success("Done!")
 194:                         st.markdown("---")
 195:                         st.write("**Review and edit the generated idea:**")
 196:                         try:
 197:                             idea_path = den.project_dir + "/input_files/idea.md"
 198:                             with open(idea_path, 'r') as f:
 199:                                 current_idea = f.read()
 200:                             if "current_idea_content" not in st.session_state:
 201:                                 st.session_state.current_idea_content = current_idea
 202:                             edited_idea = st.text_area(
 203:                                 "Edit the research idea",
 204:                                 value=st.session_state.current_idea_content,
 205:                                 height=200,
 206:                                 key="idea_review_area",
 207:                                 help="Review and modify the generated research idea before proceeding")
 208:                             st.session_state.current_idea_content = edited_idea
 209:                             col_a, col_b = st.columns([1, 3])
 210:                             with col_a:
 211:                                 if st.button(
 212:                                         "Accept idea", key="accept_idea_btn"):
 213:                                     with open(idea_path, 'w') as f:
 214:                                         f.write(edited_idea)
 215:                                     den.set_idea(edited_idea)
 216:                                     st.success("Idea updated successfully!")
 217:                                     st.rerun()
 218:                             with col_b:
 219:                                 if st.button(
 220:                                         "Reset to original", key="reset_idea_btn"):
 221:                                     st.rerun()
 222:                         except Exception as e:
 223:                             st.warning(f"Idea review UI error: {str(e)}")
 224:                 except Exception as e:
 225:                     st.error(f"Error: {str(e)}")
 226:                 finally:
 227:                     st.session_state.idea_running = False
 228:     uploaded_file = st.file_uploader(
 229:         "Choose a file with the research idea", accept_multiple_files=False
 230:     )
 231:     if uploaded_file:
 232:         content = uploaded_file.read().decode("utf-8")
 233:         den.set_idea(content)
 234:     try:
 235:         idea_path = den.project_dir + "/input_files/idea.md"
 236:         if os.path.exists(idea_path):
 237:             with open(idea_path, 'r') as f:
 238:                 idea_content = f.read()
 239:             if "current_idea_content" not in st.session_state:
 240:                 st.session_state.current_idea_content = idea_content
 241:             st.markdown("### Current research idea")
 242:             st.markdown(st.session_state.current_idea_content)
 243:             st.markdown("**Edit the research idea:**")
 244:             edited_idea = st.text_area(
 245:                 "Edit the research idea",
 246:                 value=st.session_state.current_idea_content,
 247:                 height=200,
 248:                 key="idea_edit_area",
 249:                 help="Review and modify the research idea"
 250:             )
 251:             st.session_state.current_idea_content = edited_idea
 252:             col_a, col_b = st.columns([1, 3])
 253:             with col_a:
 254:                 if st.button("Save changes", key="save_idea_btn"):
 255:                     with open(idea_path, 'w') as f:
 256:                         f.write(edited_idea)
 257:                     den.set_idea(edited_idea)
 258:                     st.success("Idea updated successfully!")
 259:                     st.rerun()
 260:             with col_b:
 261:                 if st.button("Reset to original", key="reset_idea_btn"):
 262:                     st.session_state.current_idea_content = idea_content
 263:                     st.rerun()
 264:         else:
 265:             st.write("Idea not generated or uploaded.")
 266:     except Exception as e:
 267:         st.write(f"Error loading idea: {e}")
 268:         st.write("Idea not generated or uploaded.")
 269: def method_comp(den: Denario) -> None:
 270:     st.header("Methods")
 271:     st.write(
 272:         "Generate the methods to be employed in the computation of the results, provided the idea and data description."
 273:     )
 274:     st.write(
 275:         "Choose between a fast generation process or a more involved one using planning and control through [cmbagent](https://github.com/CMBAgents/cmbagent)."
 276:     )
 277:     fast = st.toggle("Fast generation", value=True, key="fast_toggle_method")
 278:     model_keys = list(models.keys())
 279:     default_fast_method_index = model_keys.index("gemini-2.0-flash")
 280:     if fast:
 281:         st.caption("Choose a LLM model for the fast generation")
 282:         llm_model = st.selectbox(
 283:             "LLM Model",
 284:             model_keys,
 285:             index=default_fast_method_index,
 286:             key="llm_model_method",
 287:         )
 288:     else:
 289:         default_planner_index = model_keys.index("gpt-4o")
 290:         default_plan_reviewer_index = model_keys.index("claude-3.7-sonnet")
 291:         default_method_generator_index = model_keys.index("gpt-4o")
 292:         col1, col2 = st.columns(2)
 293:         with col1:
 294:             st.caption(
 295:                 "Planner: Creates a detailed plan for generating research methodology"
 296:             )
 297:             planner_model = st.selectbox(
 298:                 "Planner Model",
 299:                 model_keys,
 300:                 index=default_planner_index,
 301:                 key="planner_model_method",
 302:             )
 303:         with col2:
 304:             st.caption(
 305:                 "Plan Reviewer: Reviews and improves the generated methodology plan"
 306:             )
 307:             plan_reviewer_model = st.selectbox(
 308:                 "Plan Reviewer Model",
 309:                 model_keys,
 310:                 index=default_plan_reviewer_index,
 311:                 key="plan_reviewer_model_method",
 312:             )
 313:         col3, col4 = st.columns(2)
 314:         with col3:
 315:             st.caption("Method Generator: Generates the methodology")
 316:             method_generator_model = st.selectbox(
 317:                 "Method Generator Model",
 318:                 model_keys,
 319:                 index=default_method_generator_index,
 320:                 key="method_generator_model",
 321:             )
 322:     if "method_running" not in st.session_state:
 323:         st.session_state.method_running = False
 324:     col1, col2 = st.columns([1, 1])
 325:     with col1:
 326:         press_button = st.button(
 327:             "Generate",
 328:             type="primary",
 329:             key="get_method",
 330:             disabled=st.session_state.method_running,
 331:         )
 332:     with col2:
 333:         stop_button = st.button(
 334:             "Stop",
 335:             type="secondary",
 336:             key="stop_method",
 337:             disabled=not st.session_state.method_running,
 338:         )
 339:     st.markdown(
 340: ,
 341:         unsafe_allow_html=True,
 342:     )
 343:     if press_button and not st.session_state.method_running:
 344:         st.session_state.method_running = True
 345:         st.rerun()
 346:     if stop_button and st.session_state.method_running:
 347:         st.session_state.method_running = False
 348:         st.warning("Operation stopped by user.")
 349:         st.rerun()
 350:     if st.session_state.method_running:
 351:         with st.spinner("Generating methods...", show_time=True):
 352:             log_box = st.empty()
 353:             with stream_to_streamlit(log_box):
 354:                 try:
 355:                     if fast:
 356:                         den.get_method_fast(llm=llm_model, verbose=True)
 357:                     else:
 358:                         den.get_method(
 359:                             planner_model=models[planner_model],
 360:                             plan_reviewer_model=models[plan_reviewer_model],
 361:                             method_generator_model=models[
 362:                                 method_generator_model
 363:                             ],
 364:                         )
 365:                     if (
 366:                         st.session_state.method_running
 367:                     ):
 368:                         st.success("Done!")
 369:                         st.markdown("---")
 370:                         st.write(
 371:                             "**Review and edit the generated methodology:**")
 372:                         try:
 373:                             method_path = den.project_dir + "/input_files/methods.md"
 374:                             with open(method_path, 'r') as f:
 375:                                 current_method = f.read()
 376:                             edited_method = st.text_area(
 377:                                 "Edit the methodology",
 378:                                 value=current_method,
 379:                                 height=300,
 380:                                 key="method_review_area",
 381:                                 help="Review and modify the generated methodology before proceeding"
 382:                             )
 383:                             col_a, col_b = st.columns([1, 3])
 384:                             with col_a:
 385:                                 if st.button(
 386:                                         "Accept method", key="accept_method_btn"):
 387:                                     with open(method_path, 'w') as f:
 388:                                         f.write(edited_method)
 389:                                     den.set_method(edited_method)
 390:                                     st.success(
 391:                                         "Methodology updated successfully!")
 392:                                     st.rerun()
 393:                             with col_b:
 394:                                 if st.button(
 395:                                         "Reset to original", key="reset_method_btn"):
 396:                                     st.rerun()
 397:                         except Exception as e:
 398:                             st.warning(f"Method review UI error: {str(e)}")
 399:                 except Exception as e:
 400:                     st.error(f"Error: {str(e)}")
 401:                 finally:
 402:                     st.session_state.method_running = False
 403:     uploaded_file = st.file_uploader(
 404:         "Choose a file with the research methods", accept_multiple_files=False
 405:     )
 406:     if uploaded_file:
 407:         content = uploaded_file.read().decode("utf-8")
 408:         den.set_method(content)
 409:     try:
 410:         show_markdown_file(
 411:             den.project_dir + "/input_files/methods.md", label="methods"
 412:         )
 413:     except FileNotFoundError:
 414:         st.write("Methods not generated or uploaded.")
 415: def results_comp(den: Denario) -> None:
 416:     st.header("Results")
 417:     st.write(
 418:         "Compute the results, given the methods, idea and data description."
 419:     )
 420:     model_keys = list(models.keys())
 421:     default_researcher_index = model_keys.index("gemini-2.5-pro")
 422:     default_engineer_index = model_keys.index("gemini-2.5-pro")
 423:     col1, col2 = st.columns(2)
 424:     with col1:
 425:         st.caption("Engineer: Generates the code to compute the results")
 426:         engineer_model = st.selectbox(
 427:             "Engineer Model",
 428:             model_keys,
 429:             index=default_engineer_index,
 430:             key="engineer_model",
 431:         )
 432:     with col2:
 433:         st.caption(
 434:             "Researcher: processes the results and writes the results report"
 435:         )
 436:         researcher_model = st.selectbox(
 437:             "Researcher Model",
 438:             model_keys,
 439:             index=default_researcher_index,
 440:             key="researcher_model",
 441:         )
 442:     with st.expander("Options for the results generation"):
 443:         restart_at_step = st.number_input(
 444:             "Restart at step", min_value=0, max_value=100, value=0
 445:         )
 446:         hardware_constraints = st.text_input(
 447:             "Hardware constraints", placeholder="cpu:2, ram:16g, gpu:1"
 448:         )
 449:         default_planner_index = model_keys.index("gpt-4o")
 450:         default_plan_reviewer_index = model_keys.index("claude-3.7-sonnet")
 451:         col1, col2 = st.columns(2)
 452:         with col1:
 453:             st.caption(
 454:                 "Planner: Creates a detailed plan for generating research results"
 455:             )
 456:             planner_model = st.selectbox(
 457:                 "Planner Model",
 458:                 model_keys,
 459:                 index=default_planner_index,
 460:                 key="planner_model_results",
 461:             )
 462:         with col2:
 463:             st.caption("Plan Reviewer: Reviews and improves the proposed plan")
 464:             plan_reviewer_model = st.selectbox(
 465:                 "Plan Reviewer Model",
 466:                 model_keys,
 467:                 index=default_plan_reviewer_index,
 468:                 key="plan_reviewer_model_results",
 469:             )
 470:         max_n_attempts = st.number_input(
 471:             "Max number of code execution attempts",
 472:             min_value=1,
 473:             max_value=10,
 474:             value=6,
 475:         )
 476:         max_n_steps = st.number_input(
 477:             "Max number of steps", min_value=1, max_value=10, value=6
 478:         )
 479:     if "results_running" not in st.session_state:
 480:         st.session_state.results_running = False
 481:     col1, col2 = st.columns([1, 1])
 482:     with col1:
 483:         press_button = st.button(
 484:             "Generate",
 485:             type="primary",
 486:             key="get_results",
 487:             disabled=st.session_state.results_running,
 488:         )
 489:     with col2:
 490:         stop_button = st.button(
 491:             "Stop",
 492:             type="secondary",
 493:             key="stop_results",
 494:             disabled=not st.session_state.results_running,
 495:         )
 496:     st.markdown(
 497: ,
 498:         unsafe_allow_html=True,
 499:     )
 500:     if press_button and not st.session_state.results_running:
 501:         st.session_state.results_running = True
 502:         st.rerun()
 503:     if stop_button and st.session_state.results_running:
 504:         st.session_state.results_running = False
 505:         st.warning("Operation stopped by user.")
 506:         st.rerun()
 507:     if st.session_state.results_running:
 508:         with st.spinner("Computing results...", show_time=True):
 509:             log_box = st.empty()
 510:             with stream_to_streamlit(log_box):
 511:                 try:
 512:                     den.get_results(
 513:                         engineer_model=models[engineer_model],
 514:                         researcher_model=models[researcher_model],
 515:                         restart_at_step=restart_at_step,
 516:                         hardware_constraints=hardware_constraints,
 517:                         planner_model=models[planner_model],
 518:                         plan_reviewer_model=models[plan_reviewer_model],
 519:                         max_n_attempts=max_n_attempts,
 520:                         max_n_steps=max_n_steps,
 521:                     )
 522:                     if (
 523:                         st.session_state.results_running
 524:                     ):
 525:                         st.success("Done!")
 526:                 except Exception as e:
 527:                     st.error(f"Error: {str(e)}")
 528:                 finally:
 529:                     st.session_state.results_running = False
 530:     uploaded_files = st.file_uploader(
 531:         "Upload markdown file and/or plots from the results of the research",
 532:         accept_multiple_files=True,
 533:     )
 534:     if uploaded_files:
 535:         plots = []
 536:         for file in uploaded_files:
 537:             if file.name.endswith(".md"):
 538:                 content = file.read().decode("utf-8")
 539:                 den.set_results(content)
 540:             else:
 541:                 plots.append(Image.open(file))
 542:         den.set_plots(plots)
 543:     plots = list(Path(den.project_dir + "/input_files/plots").glob("*"))
 544:     num_plots = len(list(plots))
 545:     if num_plots > 0:
 546:         plots_cols = st.columns(num_plots)
 547:         for i, plot in enumerate(plots):
 548:             with plots_cols[i]:
 549:                 st.image(plot, caption=plot.name)
 550:         plots_zip = create_zip_in_memory(
 551:             den.project_dir + "/input_files/plots"
 552:         )
 553:         st.download_button(
 554:             label="Download plots",
 555:             data=plots_zip,
 556:             file_name="plots.zip",
 557:             mime="application/zip",
 558:             icon=":material/download:",
 559:         )
 560:     else:
 561:         st.write("Plots not generated or uploaded.")
 562:     try:
 563:         codes_zip = create_zip_in_memory(
 564:             den.project_dir + "/experiment_generation_output"
 565:         )
 566:         st.download_button(
 567:             label="Download codes",
 568:             data=codes_zip,
 569:             file_name="codes.zip",
 570:             mime="application/zip",
 571:             icon=":material/download:",
 572:         )
 573:         show_markdown_file(
 574:             den.project_dir + "/input_files/results.md",
 575:             label="results summary",
 576:         )
 577:     except FileNotFoundError:
 578:         st.write("Results not generated or uploaded.")
 579: def paper_comp(den: Denario) -> None:
 580:     st.header("Article")
 581:     st.write("Write the article using the computed results of the research.")
 582:     with st.expander("Options for the paper writing agents"):
 583:         st.caption("Choose a LLM model for the paper generation")
 584:         llm_model = st.selectbox(
 585:             "LLM Model", models.keys(), index=0, key="llm_model_paper"
 586:         )
 587:         selected_journal = st.selectbox(
 588:             "Choose the journal for the latex style:",
 589:             [j.value for j in Journal],
 590:             index=0,
 591:             key="journal_select",
 592:         )
 593:         citations = st.toggle(
 594:             "Add citations", value=True, key="toggle_citations"
 595:         )
 596:         writer = st.text_input(
 597:             "Describe the type of researcher e.g. cosmologist, biologist... Default is 'scientist'.",
 598:             placeholder="scientist",
 599:             key="writer_type",
 600:             value="scientist",
 601:         )
 602:     if "paper_running" not in st.session_state:
 603:         st.session_state.paper_running = False
 604:     col1, col2 = st.columns([1, 1])
 605:     with col1:
 606:         press_button = st.button(
 607:             "Generate",
 608:             type="primary",
 609:             key="get_paper",
 610:             disabled=st.session_state.paper_running,
 611:         )
 612:     with col2:
 613:         stop_button = st.button(
 614:             "Stop",
 615:             type="secondary",
 616:             key="stop_paper",
 617:             disabled=not st.session_state.paper_running,
 618:         )
 619:     st.markdown(
 620: ,
 621:         unsafe_allow_html=True,
 622:     )
 623:     if press_button and not st.session_state.paper_running:
 624:         st.session_state.paper_running = True
 625:         st.rerun()
 626:     if stop_button and st.session_state.paper_running:
 627:         st.session_state.paper_running = False
 628:         st.warning("Operation stopped by user.")
 629:         st.rerun()
 630:     if st.session_state.paper_running:
 631:         with st.spinner("Writing the paper...", show_time=True):
 632:             try:
 633:                 den.get_paper(
 634:                     journal=selected_journal,
 635:                     llm=llm_model,
 636:                     writer=writer,
 637:                     add_citations=citations,
 638:                 )
 639:                 if (
 640:                     st.session_state.paper_running
 641:                 ):
 642:                     st.success("Done!")
 643:                     st.balloons()
 644:             except Exception as e:
 645:                 st.error(f"Error: {str(e)}")
 646:             finally:
 647:                 st.session_state.paper_running = False
 648:     try:
 649:         texfile = den.project_dir + "/paper/paper_v4_final.tex"
 650:         with open(texfile, "r") as f:
 651:             f.read()
 652:         paper_zip = create_zip_in_memory(den.project_dir + "/paper")
 653:         st.download_button(
 654:             label="Download latex files",
 655:             data=paper_zip,
 656:             file_name="paper.zip",
 657:             mime="application/zip",
 658:             icon=":material/download:",
 659:         )
 660:     except FileNotFoundError:
 661:         st.write("Latex not generated yet.")
 662:     try:
 663:         pdffile = den.project_dir + "/paper/paper_v4_final.pdf"
 664:         with open(pdffile, "rb") as pdf_file:
 665:             PDFbyte = pdf_file.read()
 666:         st.download_button(
 667:             label="Download pdf",
 668:             data=PDFbyte,
 669:             file_name="paper.pdf",
 670:             mime="application/octet-stream",
 671:             icon=":material/download:",
 672:         )
 673:         pdf_viewer(pdffile)
 674:     except FileNotFoundError:
 675:         st.write("Pdf not generated yet.")
 676: def check_idea_comp(den: Denario) -> None:
 677:     st.header("Check idea")
 678:     st.write(
 679:         "Check if the research idea has been investigated in previous literature."
 680:     )
 681:     fast = st.toggle(
 682:         "Fast generation", value=True, key="fast_toggle_check_idea"
 683:     )
 684:     colp, _ = st.columns([2, 1])
 685:     with colp:
 686:         provider = st.selectbox(
 687:             "Retrieval provider",
 688:             RAG_PROVIDERS,
 689:             index=0,
 690:             key="rag_provider_check_idea",
 691:             help="Perplexity = web academic search; Domain = Planck/CAMB/CLASSY sources",
 692:         )
 693:     try:
 694:         den.set_idea()
 695:         idea = den.research.idea
 696:         st.markdown("### Current idea")
 697:         st.write(idea)
 698:         if "literature_running" not in st.session_state:
 699:             st.session_state.literature_running = False
 700:         col1, col2 = st.columns([1, 1])
 701:         with col1:
 702:             press_button = st.button(
 703:                 "Literature search",
 704:                 type="primary",
 705:                 key="get_literature",
 706:                 disabled=st.session_state.literature_running,
 707:             )
 708:         with col2:
 709:             stop_button = st.button(
 710:                 "Stop",
 711:                 type="secondary",
 712:                 key="stop_literature",
 713:                 disabled=not st.session_state.literature_running,
 714:             )
 715:         st.markdown(
 716: ,
 717:             unsafe_allow_html=True,
 718:         )
 719:         if press_button and not st.session_state.literature_running:
 720:             st.session_state.literature_running = True
 721:             st.rerun()
 722:         if stop_button and st.session_state.literature_running:
 723:             st.session_state.literature_running = False
 724:             st.warning("Operation stopped by user.")
 725:             st.rerun()
 726:         if st.session_state.literature_running:
 727:             with st.spinner(
 728:                 "Searching for previous literature...", show_time=True
 729:             ):
 730:                 log_box = st.empty()
 731:                 with stream_to_streamlit(log_box):
 732:                     try:
 733:                         query = den.research.idea if hasattr(
 734:                             den.research, 'idea') else "cosmology research"
 735:                         results, provider_info, error = _retrieve_with_unified_adapter(
 736:                             provider, query, 5)
 737:                         if error:
 738:                             st.error(f"RAG retrieval error: {error}")
 739:                             if fast:
 740:                                 result = den.check_idea_fast(verbose=True)
 741:                             else:
 742:                                 result = den.check_idea()
 743:                         else:
 744:                             if provider_info.get("available"):
 745:                                 if provider_info.get("corpus_stats"):
 746:                                     stats = provider_info["corpus_stats"]
 747:                                     st.info(
 748:                                         f"{
 749:                                             provider_info['name']}: {
 750:                                             stats['documents']} documents, {
 751:                                             stats['entities']} entities indexed")
 752:                                 else:
 753:                                     st.info(f"Using {provider_info['name']}")
 754:                             else:
 755:                                 st.warning(
 756:                                     f"{provider_info['name']} not available, using fallback")
 757:                             if results:
 758:                                 st.write(
 759:                                     f"**Relevant documents from {provider_info['name']}:**")
 760:                                 for i, result in enumerate(results, 1):
 761:                                     with st.expander(f"{i}. {result.title} (score: {result.score:.2f})"):
 762:                                         st.write(f"**URL:** {result.url}")
 763:                                         if result.doi:
 764:                                             st.write(
 765:                                                 f"**DOI:** https://doi.org/{result.doi}")
 766:                                         if result.metadata.get("authors"):
 767:                                             authors = result.metadata["authors"][:3]
 768:                                             st.write(
 769:                                                 f"**Authors:** {', '.join(authors)}")
 770:                                             if len(
 771:                                                     result.metadata["authors"]) > 3:
 772:                                                 st.write(
 773:                                                     f"({len(result.metadata['authors'])} total authors)")
 774:                                         if result.metadata.get("categories"):
 775:                                             st.write(
 776:                                                 f"**Categories:** {', '.join(result.metadata['categories'][:2])}")
 777:                                         if result.metadata.get("entities"):
 778:                                             st.write(
 779:                                                 f"**Key terms:** {', '.join(result.metadata['entities'][:5])}")
 780:                                         st.write(
 781:                                             f"**Content preview:** {result.content[:500]}...")
 782:                                 from .rag_adapter import format_results_for_ui
 783:                                 result = format_results_for_ui(results)
 784:                             else:
 785:                                 result = f"No relevant documents found using {
 786:                                     provider_info['name']}."
 787:                         st.write(result)
 788:                         if provider.startswith("Perplexity") and not results:
 789:                             if fast:
 790:                                 result = den.check_idea_fast(verbose=True)
 791:                             else:
 792:                                 result = den.check_idea()
 793:                         elif "GraphRAG" in provider and not results:
 794:                             try:
 795:                                 from .graphrag import get_graphrag_retriever
 796:                                 retriever = get_graphrag_retriever()
 797:                                 stats = retriever.get_corpus_stats()
 798:                                 st.info(
 799:                                     f"GraphRAG: {
 800:                                         stats['documents']} documents, {
 801:                                         stats['entities']} entities indexed")
 802:                                 query = den.research.idea if hasattr(
 803:                                     den.research, 'idea') else "cosmology research"
 804:                                 results = retriever.retrieve(
 805:                                     query, max_results=5)
 806:                                 if results:
 807:                                     st.write(
 808:                                         "**Relevant documents from local corpus:**")
 809:                                     for i, result in enumerate(results, 1):
 810:                                         with st.expander(f"{i}. {result['title']} (score: {result['score']:.2f})"):
 811:                                             st.write(
 812:                                                 f"**Path:** {result['url']}")
 813:                                             if result['entities']:
 814:                                                 st.write(
 815:                                                     f"**Entities:** {', '.join(result['entities'])}")
 816:                                             st.write(
 817:                                                 f"**Content preview:** {result['content'][:500]}...")
 818:                                     result = f"Found {
 819:                                         len(results)} relevant documents in local corpus:\n\n"
 820:                                     for i, doc in enumerate(results, 1):
 821:                                         result += f"{i}. {doc['title']}\n"
 822:                                         result += f"   Path: {doc['url']}\n"
 823:                                         if doc['entities']:
 824:                                             result += f"   Key terms: {', '.join(doc['entities'][:3])}\n"
 825:                                         result += "\n"
 826:                                 else:
 827:                                     result = "No relevant documents found in local corpus."
 828:                                 st.write(result)
 829:                             except Exception as e:
 830:                                 st.error(f"GraphRAG error: {str(e)}")
 831:                                 if fast:
 832:                                     result = den.check_idea_fast(verbose=True)
 833:                                 else:
 834:                                     result = den.check_idea()
 835:                                 st.write(result)
 836:                         elif "arXiv" in provider:
 837:                             try:
 838:                                 from .arxiv_rag import get_arxiv_retriever
 839:                                 retriever = get_arxiv_retriever()
 840:                                 query = den.research.idea if hasattr(
 841:                                     den.research, 'idea') else "cosmology research"
 842:                                 results = retriever.retrieve(
 843:                                     query, max_results=5)
 844:                                 if results:
 845:                                     st.write("**Relevant papers from arXiv:**")
 846:                                     for i, result in enumerate(results, 1):
 847:                                         with st.expander(f"{i}. {result['title']}"):
 848:                                             st.write(
 849:                                                 f"**Authors:** {', '.join(result['authors'][:3])}")
 850:                                             if result['arxiv_id']:
 851:                                                 st.write(
 852:                                                     f"**arXiv ID:** {result['arxiv_id']}")
 853:                                             if result['doi']:
 854:                                                 st.write(
 855:                                                     f"**DOI:** https://doi.org/{result['doi']}")
 856:                                             st.write(
 857:                                                 f"**URL:** {result['url']}")
 858:                                             if result['categories']:
 859:                                                 st.write(
 860:                                                     f"**Categories:** {', '.join(result['categories'])}")
 861:                                             st.write(
 862:                                                 f"**Abstract:** {result['content'][:300]}...")
 863:                                     result = f"Found {
 864:                                         len(results)} relevant papers from arXiv:\n\n"
 865:                                     for i, doc in enumerate(results, 1):
 866:                                         result += f"{i}. {doc['title']}\n"
 867:                                         result += f"   Authors: {', '.join(doc['authors'][:3])}\n"
 868:                                         if doc['arxiv_id']:
 869:                                             result += f"   arXiv ID: {
 870:                                                 doc['arxiv_id']}\n"
 871:                                         if doc['doi']:
 872:                                             result += f"   DOI: https://doi.org/{
 873:                                                 doc['doi']}\n"
 874:                                         result += f"   URL: {doc['url']}\n"
 875:                                         result += f"   Abstract: {doc['content'][:200]}...\n\n"
 876:                                 else:
 877:                                     result = "No relevant papers found on arXiv."
 878:                                 st.write(result)
 879:                             except Exception as e:
 880:                                 st.error(f"arXiv search error: {str(e)}")
 881:                                 if fast:
 882:                                     result = den.check_idea_fast(verbose=True)
 883:                                 else:
 884:                                     result = den.check_idea()
 885:                                 st.write(result)
 886:                         else:
 887:                             if fast:
 888:                                 result = den.check_idea_fast(verbose=True)
 889:                             else:
 890:                                 result = den.check_idea()
 891:                             domain_context = _get_domain_context(provider)
 892:                             if domain_context:
 893:                                 result = f"{result}\n\n--- Domain Context ---\n{domain_context}"
 894:                             st.write(result)
 895:                         try:
 896:                             from pathlib import Path as _Path
 897:                             import re as _re
 898:                             citations_text = ""
 899:                             if isinstance(result, dict):
 900:                                 if "citations" in result and isinstance(
 901:                                     result["citations"], list
 902:                                 ):
 903:                                     citations_text = "\n".join(
 904:                                         str(x) for x in result["citations"]
 905:                                     )
 906:                                 elif (
 907:                                     "results" in result
 908:                                     and isinstance(result["results"], dict)
 909:                                     and isinstance(
 910:                                         result["results"].get("citations"),
 911:                                         list,
 912:                                     )
 913:                                 ):
 914:                                     citations_text = "\n".join(
 915:                                         str(x)
 916:                                         for x in result["results"]["citations"]
 917:                                     )
 918:                                 else:
 919:                                     citations_text = str(result)
 920:                             else:
 921:                                 citations_text = str(result)
 922:                             urls = _re.findall(
 923:                                 r"https?://[^\s)]+", citations_text
 924:                             )
 925:                             if urls:
 926:                                 st.caption(
 927:                                     f"Detected {
 928:                                         len(urls)} URL(s) in results; you can edit below before saving.")
 929:                             st.markdown("---")
 930:                             st.write(
 931:                                 "Review and edit citations (one per line)."
 932:                             )
 933:                             edited_citations = st.text_area(
 934:                                 "Edit citations",
 935:                                 value=citations_text,
 936:                                 height=160,
 937:                                 key="editable_citations_area",
 938:                             )
 939:                             col_cit_a, col_cit_b = st.columns([1, 3])
 940:                             with col_cit_a:
 941:                                 if st.button(
 942:                                     "Accept citations",
 943:                                     key="accept_citations_btn",
 944:                                 ):
 945:                                     import json as _json
 946:                                     out_dir = _Path(
 947:                                         "/data/cmbagents/ragbook/docs/faber2025/refs_selected"
 948:                                     )
 949:                                     out_dir.mkdir(parents=True, exist_ok=True)
 950:                                     raw_lines = [
 951:                                         line_str.strip()
 952:                                         for line_str in edited_citations.split(
 953:                                             "\n"
 954:                                         )
 955:                                         if line_str.strip()
 956:                                     ]
 957:                                     structured = []
 958:                                     for line in raw_lines:
 959:                                         entry = {
 960:                                             "title": None,
 961:                                             "url": None,
 962:                                             "doi": None,
 963:                                         }
 964:                                         try:
 965:                                             obj = _json.loads(line)
 966:                                             if isinstance(obj, dict):
 967:                                                 entry.update(
 968:                                                     {
 969:                                                         "title": obj.get(
 970:                                                             "title"
 971:                                                         ),
 972:                                                         "url": obj.get("url"),
 973:                                                         "doi": obj.get("doi"),
 974:                                                     }
 975:                                                 )
 976:                                                 structured.append(entry)
 977:                                                 continue
 978:                                         except Exception:
 979:                                             pass
 980:                                         _url_match = _re.search(
 981:                                             r"https?://[^\s)]+", line
 982:                                         )
 983:                                         _doi_match = _re.search(
 984:                                             r"10\.\d{4,9}/[-._;()/:A-Za-z0-9]+", line, )
 985:                                         url_val = (
 986:                                             _url_match.group(0)
 987:                                             if _url_match
 988:                                             else None
 989:                                         )
 990:                                         doi_val = (
 991:                                             _doi_match.group(0)
 992:                                             if _doi_match
 993:                                             else None
 994:                                         )
 995:                                         title_text = line
 996:                                         if url_val:
 997:                                             title_text = title_text.replace(
 998:                                                 url_val, ""
 999:                                             ).strip()
1000:                                         if doi_val:
1001:                                             title_text = title_text.replace(
1002:                                                 doi_val, ""
1003:                                             ).strip(" .;,-")
1004:                                         entry["title"] = title_text or None
1005:                                         entry["url"] = url_val
1006:                                         entry["doi"] = doi_val
1007:                                         structured.append(entry)
1008:                                     out_json = (
1009:                                         out_dir / "citations_selected.json"
1010:                                     )
1011:                                     with open(out_json, "w") as jf:
1012:                                         jf.write(
1013:                                             _json.dumps(structured, indent=2)
1014:                                         )
1015:                                     out_md = out_dir / "citations_selected.md"
1016:                                     with open(out_md, "w") as mf:
1017:                                         for e in structured:
1018:                                             title_val = (
1019:                                                 e.get("title") or ""
1020:                                             ).strip()
1021:                                             doi_val = (
1022:                                                 e.get("doi") or ""
1023:                                             ).strip()
1024:                                             url_val = (
1025:                                                 e.get("url") or ""
1026:                                             ).strip()
1027:                                             doi_url = (
1028:                                                 f"https://doi.org/{doi_val}"
1029:                                                 if doi_val
1030:                                                 else None
1031:                                             )
1032:                                             line = title_val
1033:                                             if doi_url:
1034:                                                 line += f" DOI: {doi_url}"
1035:                                             if url_val and (
1036:                                                 not doi_url
1037:                                                 or url_val != doi_url
1038:                                             ):
1039:                                                 line += f" {url_val}"
1040:                                             mf.write(line.strip() + "\n")
1041:                                     def _slugify(text: str) -> str:
1042:                                         import re as __re
1043:                                         return __re.sub(
1044:                                             r"[^A-Za-z0-9]+", "", text
1045:                                         )[:50]
1046:                                     out_bib = (
1047:                                         out_dir / "citations_selected.bib"
1048:                                     )
1049:                                     with open(out_bib, "w") as bf:
1050:                                         for e in structured:
1051:                                             title_val = (
1052:                                                 e.get("title") or ""
1053:                                             ).strip()
1054:                                             doi_val = (
1055:                                                 e.get("doi") or ""
1056:                                             ).strip()
1057:                                             url_val = (
1058:                                                 e.get("url") or ""
1059:                                             ).strip()
1060:                                             if doi_val:
1061:                                                 bib_key = _slugify(doi_val)
1062:                                             elif title_val:
1063:                                                 bib_key = _slugify(title_val)
1064:                                             else:
1065:                                                 bib_key = "ref"
1066:                                             bf.write(
1067:                                                 "@misc{" + bib_key + ",\n"
1068:                                             )
1069:                                             if title_val:
1070:                                                 bf.write(
1071:                                                     "  title = {"
1072:                                                     + title_val
1073:                                                     + "},\n"
1074:                                                 )
1075:                                             if doi_val:
1076:                                                 bf.write(
1077:                                                     "  doi = {"
1078:                                                     + doi_val
1079:                                                     + "},\n"
1080:                                                 )
1081:                                             if doi_val:
1082:                                                 bf.write(
1083:                                                     "  url = {https://doi.org/"
1084:                                                     + doi_val
1085:                                                     + "},\n"
1086:                                                 )
1087:                                             elif url_val:
1088:                                                 bf.write(
1089:                                                     "  url = {"
1090:                                                     + url_val
1091:                                                     + "},\n"
1092:                                                 )
1093:                                             bf.write(
1094:                                                 "  note = {Generated by DenarioApp HITL citation review}\n"
1095:                                             )
1096:                                             bf.write("}\n\n")
1097:                                     st.success(
1098:                                         f"Saved reviewed citations to "
1099:                                         f"{out_json}, {out_md}, and {out_bib}"
1100:                                     )
1101:                         except Exception as _e:
1102:                             st.warning(f"Citation review UI error: {str(_e)}")
1103:                         if (
1104:                             st.session_state.literature_running
1105:                         ):
1106:                             st.success("Literature search completed!")
1107:                     except Exception as e:
1108:                         st.error(f"Error: {str(e)}")
1109:                     finally:
1110:                         st.session_state.literature_running = False
1111:     except FileNotFoundError:
1112:         st.write("Need to generate an idea first.")
1113: def keywords_comp(den: Denario) -> None:
1114:     st.header("Keywords")
1115:     st.write("Generate keywords from your research text.")
1116:     input_text = st.text_area(
1117:         "Enter your research text to extract keywords:",
1118:         placeholder="Multi-agent systems (MAS) utilizing multiple Large Language Model agents with Retrieval Augmented Generation and that can execute code locally may become beneficial in cosmological data analysis. Here, we illustrate a first small step towards AI-assisted analyses and a glimpse of the potential of MAS to automate and optimize scientific workflows in Cosmology. The system architecture of our example package, that builds upon the autogen/ag2 framework, can be applied to MAS in any area of quantitative scientific research. The particular task we apply our methods to is the cosmological parameter analysis of the Atacama Cosmology Telescope lensing power spectrum likelihood using Monte Carlo Markov Chains. Our work-in-progress code is open source and available at this https URL.",
1119:         height=200,
1120:     )
1121:     n_keywords = st.slider(
1122:         "Number of keywords to generate:", min_value=1, max_value=10, value=5
1123:     )
1124:     if "keywords_running" not in st.session_state:
1125:         st.session_state.keywords_running = False
1126:     col1, col2 = st.columns([1, 1])
1127:     with col1:
1128:         press_button = st.button(
1129:             "Generate Keywords",
1130:             type="primary",
1131:             key="get_keywords",
1132:             disabled=st.session_state.keywords_running,
1133:         )
1134:     with col2:
1135:         stop_button = st.button(
1136:             "Stop",
1137:             type="secondary",
1138:             key="stop_keywords",
1139:             disabled=not st.session_state.keywords_running,
1140:         )
1141:     st.markdown(
1142: ,
1143:         unsafe_allow_html=True,
1144:     )
1145:     if press_button and input_text and not st.session_state.keywords_running:
1146:         st.session_state.keywords_running = True
1147:         st.rerun()
1148:     elif press_button and not input_text:
1149:         st.warning("Please enter some text to generate keywords.")
1150:     if stop_button and st.session_state.keywords_running:
1151:         st.session_state.keywords_running = False
1152:         st.warning("Operation stopped by user.")
1153:         st.rerun()
1154:     if st.session_state.keywords_running and input_text:
1155:         with st.spinner("Generating keywords..."):
1156:             try:
1157:                 den.get_keywords(input_text, n_keywords=n_keywords)
1158:                 if (
1159:                     st.session_state.keywords_running
1160:                 ):
1161:                     generated_kw = st.session_state.get('generated_keywords')
1162:                     if ((hasattr(den.research, "keywords")
1163:                          and den.research.keywords) or generated_kw):
1164:                         if hasattr(
1165:                                 den.research,
1166:                                 "keywords") and den.research.keywords:
1167:                             st.session_state['generated_keywords'] = den.research.keywords
1168:                             generated_kw = den.research.keywords
1169:                         st.success("Keywords generated!")
1170:                         st.write("### Generated Keywords")
1171:                         for keyword, url in (generated_kw or {}).items():
1172:                             st.markdown(f"- [{keyword}]({url})")
1173:                         st.markdown("---")
1174:                         st.write("Review and edit keywords (comma-separated).")
1175:                         default_keywords = st.session_state.get(
1176:                             "accepted_keywords",
1177:                             ", ".join(
1178:                                 list(
1179:                                     (st.session_state.get('generated_keywords') or getattr(
1180:                                         den.research,
1181:                                         'keywords',
1182:                                         {}) or {}).keys())),
1183:                         )
1184:                         editable_keywords = st.text_area(
1185:                             "Edit keywords",
1186:                             value=default_keywords,
1187:                             height=120,
1188:                             key="editable_keywords_area",
1189:                         )
1190:                         col_a, col_b = st.columns([1, 3])
1191:                         with col_a:
1192:                             if st.button(
1193:                                 "Accept keywords", key="accept_keywords_btn"
1194:                             ):
1195:                                 edited_list = [
1196:                                     k.strip()
1197:                                     for k in editable_keywords.split(",")
1198:                                     if k.strip()
1199:                                 ]
1200:                                 try:
1201:                                     out_dir = Path(
1202:                                         den.project_dir) / "input_files"
1203:                                     out_dir.mkdir(parents=True, exist_ok=True)
1204:                                     out_path = out_dir / "keywords_selected.md"
1205:                                     with open(out_path, "w", encoding="utf-8") as f:
1206:                                         f.write(
1207:                                             "Keywords: "
1208:                                             + ", ".join(edited_list)
1209:                                             + "\n"
1210:                                         )
1211:                                     paper_temp_dir = Path(
1212:                                         den.project_dir) / "paper" / "temp"
1213:                                     paper_temp_dir.mkdir(
1214:                                         parents=True, exist_ok=True)
1215:                                     keywords_tex = paper_temp_dir / "Keywords.tex"
1216:                                     _kw = ", ".join(edited_list)
1217:                                     _latex_doc = (
1218:                                         "\\documentclass{article}\n"
1219:                                         "\\usepackage{amsmath}\n"
1220:                                         "\\begin{document}\n"
1221:                                         f"{_kw}\n"
1222:                                         "\\end{document}\n"
1223:                                     )
1224:                                     with open(keywords_tex, "w", encoding="utf-8") as f:
1225:                                         f.write(_latex_doc)
1226:                                     md_ok = out_path.exists() and out_path.stat().st_size > 0
1227:                                     tex_ok = keywords_tex.exists() and keywords_tex.stat().st_size > 0
1228:                                     st.session_state["accepted_keywords"] = ", ".join(
1229:                                         edited_list)
1230:                                     if md_ok and tex_ok:
1231:                                         st.success(
1232:                                             f"Saved reviewed keywords to {out_path} and {keywords_tex}")
1233:                                         try:
1234:                                             saved_kw = keywords_tex.read_text(
1235:                                                 encoding="utf-8"
1236:                                             ).strip()
1237:                                             st.caption(
1238:                                                 "Saved Keywords (paper/temp/Keywords.tex):"
1239:                                             )
1240:                                             st.code(saved_kw, language="latex")
1241:                                         except Exception as preview_err:
1242:                                             st.info(
1243:                                                 f"Keywords saved, but preview unavailable: {preview_err}")
1244:                                     else:
1245:                                         st.error(
1246:                                             f"Keywords not fully saved. Exists: md={md_ok}, tex={tex_ok}.")
1247:                                 except Exception as save_err:
1248:                                     st.error(
1249:                                         f"Failed to save keywords: {
1250:                                             type(save_err).__name__}: {save_err}")
1251:                     else:
1252:                         st.error(
1253:                             "No keywords were generated. Please try again with different text."
1254:                         )
1255:             except Exception as e:
1256:                 st.error(f"Error: {str(e)}")
1257:             finally:
1258:                 st.session_state.keywords_running = False
1259:     try:
1260:         project_dir = Path(den.project_dir)
1261:         md_path = project_dir / "input_files" / "keywords_selected.md"
1262:         seed_csv = st.session_state.get("accepted_keywords", "")
1263:         if not seed_csv:
1264:             gen_kw = st.session_state.get('generated_keywords') or {}
1265:             if isinstance(gen_kw, dict) and gen_kw:
1266:                 seed_csv = ", ".join(list(gen_kw.keys()))
1267:         if not seed_csv and md_path.exists():
1268:             try:
1269:                 content = md_path.read_text(encoding='utf-8')
1270:                 seed_csv = content.split(
1271:                     ":", 1)[1].strip() if ":" in content else content.strip()
1272:             except Exception:
1273:                 seed_csv = ""
1274:         if seed_csv:
1275:             st.markdown("---")
1276:             st.write("Review and edit keywords (comma-separated).")
1277:             with st.form("keywords_review_form"):
1278:                 edited_csv = st.text_area(
1279:                     "Edit keywords",
1280:                     value=seed_csv,
1281:                     height=120,
1282:                     key="editable_keywords_review",
1283:                 )
1284:                 submitted = st.form_submit_button("Accept keywords")
1285:                 if submitted:
1286:                     edited_list = [k.strip()
1287:                                    for k in edited_csv.split(",") if k.strip()]
1288:                     try:
1289:                         out_dir = project_dir / "input_files"
1290:                         out_dir.mkdir(parents=True, exist_ok=True)
1291:                         out_path = out_dir / "keywords_selected.md"
1292:                         with open(out_path, "w", encoding="utf-8") as f:
1293:                             f.write(
1294:                                 "Keywords: " + ", ".join(edited_list) + "\n")
1295:                         paper_temp_dir = project_dir / "paper" / "temp"
1296:                         paper_temp_dir.mkdir(parents=True, exist_ok=True)
1297:                         keywords_tex = paper_temp_dir / "Keywords.tex"
1298:                         _kw = ", ".join(edited_list)
1299:                         _latex_doc = (
1300:                             "\\documentclass{article}\n"
1301:                             "\\usepackage{amsmath}\n"
1302:                             "\\begin{document}\n"
1303:                             f"{_kw}\n"
1304:                             "\\end{document}\n"
1305:                         )
1306:                         with open(keywords_tex, "w", encoding="utf-8") as f:
1307:                             f.write(_latex_doc)
1308:                         md_ok = out_path.exists() and out_path.stat().st_size > 0
1309:                         tex_ok = keywords_tex.exists() and keywords_tex.stat().st_size > 0
1310:                         st.session_state["accepted_keywords"] = ", ".join(
1311:                             edited_list)
1312:                         if md_ok and tex_ok:
1313:                             st.success(
1314:                                 f"Saved reviewed keywords to {out_path} and {keywords_tex}")
1315:                             try:
1316:                                 saved_kw = keywords_tex.read_text(
1317:                                     encoding="utf-8").strip()
1318:                                 st.caption(
1319:                                     "Saved Keywords (paper/temp/Keywords.tex):")
1320:                                 st.code(saved_kw, language='latex')
1321:                             except Exception as preview_err:
1322:                                 st.info(
1323:                                     f"Keywords saved, but preview unavailable: {preview_err}")
1324:                         else:
1325:                             st.error(
1326:                                 f"Keywords not fully saved. Exists: md={md_ok}, tex={tex_ok}.")
1327:                     except Exception as save_err:
1328:                         st.error(
1329:                             f"Failed to save keywords: {
1330:                                 type(save_err).__name__}: {save_err}")
1331:     except Exception:
1332:         pass
1333: def wolfram_hitl_review_comp():
1334:     st.subheader("🔍 Wolfram Alpha Review")
1335:     st.write("Review ambiguous mathematical results that need human input.")
1336:     if 'wolfram_hitl_queue' not in st.session_state:
1337:         st.session_state.wolfram_hitl_queue = []
1338:     if 'wolfram_hitl_responses' not in st.session_state:
1339:         st.session_state.wolfram_hitl_responses = {}
1340:     if st.session_state.wolfram_hitl_queue:
1341:         st.write(
1342:             f"**{len(st.session_state.wolfram_hitl_queue)} pending reviews**")
1343:         for i, review_item in enumerate(st.session_state.wolfram_hitl_queue):
1344:             with st.expander(f"Review {i + 1}: {review_item.get('query', 'Unknown query')[:50]}...", expanded=True):
1345:                 st.write(f"**Query:** {review_item['query']}")
1346:                 if 'results' in review_item:
1347:                     structured = review_item['results']
1348:                     if structured.get('plaintext'):
1349:                         st.write("**Plaintext Results:**")
1350:                         for pt in structured['plaintext'][:3]:
1351:                             st.code(pt)
1352:                     if structured.get('latex'):
1353:                         st.write("**LaTeX Results:**")
1354:                         for latex in structured['latex'][:2]:
1355:                             st.code(latex, language='latex')
1356:                     if structured.get('assumptions'):
1357:                         st.write("**Assumptions:**")
1358:                         for assumption in structured['assumptions'][:2]:
1359:                             st.write(f"- {assumption}")
1360:                 col1, col2, col3 = st.columns(3)
1361:                 with col1:
1362:                     if st.button(f"✅ Approve {i + 1}", key=f"approve_{i}"):
1363:                         st.session_state.wolfram_hitl_responses[review_item['id']] = {
1364:                             'action': 'approve',
1365:                             'selected_result': structured['plaintext'][0] if structured.get('plaintext') else None
1366:                         }
1367:                         st.session_state.wolfram_hitl_queue.pop(i)
1368:                         st.rerun()
1369:                 with col2:
1370:                     if st.button(f"✏️ Edit {i + 1}", key=f"edit_{i}"):
1371:                         st.session_state[f"editing_{i}"] = True
1372:                 with col3:
1373:                     if st.button(f"❌ Reject {i + 1}", key=f"reject_{i}"):
1374:                         st.session_state.wolfram_hitl_responses[review_item['id']] = {
1375:                             'action': 'reject', 'reason': 'User rejected'}
1376:                         st.session_state.wolfram_hitl_queue.pop(i)
1377:                         st.rerun()
1378:                 if st.session_state.get(f"editing_{i}", False):
1379:                     edited_result = st.text_area(
1380:                         "Edit the result:",
1381:                         value=structured['plaintext'][0] if structured.get('plaintext') else "",
1382:                         key=f"edit_text_{i}")
1383:                     col1, col2 = st.columns(2)
1384:                     with col1:
1385:                         if st.button(
1386:                                 f"💾 Save Edit {
1387:                                     i + 1}",
1388:                                 key=f"save_edit_{i}"):
1389:                             st.session_state.wolfram_hitl_responses[review_item['id']] = {
1390:                                 'action': 'edit', 'edited_result': edited_result}
1391:                             st.session_state.wolfram_hitl_queue.pop(i)
1392:                             st.session_state[f"editing_{i}"] = False
1393:                             st.rerun()
1394:                     with col2:
1395:                         if st.button(
1396:                                 f"❌ Cancel Edit {
1397:                                     i + 1}",
1398:                                 key=f"cancel_edit_{i}"):
1399:                             st.session_state[f"editing_{i}"] = False
1400:                             st.rerun()
1401:     else:
1402:         st.info("No pending Wolfram Alpha reviews.")
1403:     st.subheader("🧪 Test Wolfram Alpha")
1404:     test_query = st.text_input(
1405:         "Test query:",
1406:         value="integrate x^2 from 0 to 1")
1407:     if st.button("Test Query"):
1408:         try:
1409:             client = WolframAlphaClient(enable_hitl=True)
1410:             result = client.query(test_query)
1411:             if result.get("queryresult", {}).get("success"):
1412:                 primary_text = WolframAlphaClient.extract_primary_text(result)
1413:                 structured = WolframAlphaClient.extract_structured_results(
1414:                     result)
1415:                 st.success("Query successful!")
1416:                 st.write(f"**Result:** {primary_text}")
1417:                 if structured.get('latex'):
1418:                     st.write("**LaTeX:**")
1419:                     st.code(structured['latex'][0], language='latex')
1420:                 if client.needs_hitl_review(result):
1421:                     st.warning("This result needs human review!")
1422:                     hitl_prompt = client.get_hitl_prompt(test_query, result)
1423:                     st.text_area("HITL Prompt:", value=hitl_prompt, height=100)
1424:             else:
1425:                 st.error("Query failed")
1426:         except Exception as e:
1427:             st.error(f"Error: {str(e)}")
1428: def add_wolfram_hitl_to_queue(
1429:         query: str,
1430:         wa_json: dict,
1431:         review_id: str = None):
1432:     if review_id is None:
1433:         import uuid
1434:         review_id = str(uuid.uuid4())
1435:     structured = WolframAlphaClient.extract_structured_results(wa_json)
1436:     review_item = {
1437:         'id': review_id,
1438:         'query': query,
1439:         'results': structured,
1440:         'timestamp': st.session_state.get('current_time', 'unknown')
1441:     }
1442:     if 'wolfram_hitl_queue' not in st.session_state:
1443:         st.session_state.wolfram_hitl_queue = []
1444:     st.session_state.wolfram_hitl_queue.append(review_item)
</file>

<file path="denario_app/constants.py">
1: PROJECT_DIR = "project_app"
2: LLMs = ["GEMINI", "OPENAI", "ANTHROPIC", "PERPLEXITY"]
3: RAG_PROVIDERS = [
4:     "Perplexity (web)",
5:     "Domain (Planck/CAMB/CLASSY)",
6:     "GraphRAG (local corpus)",
7:     "arXiv (academic papers)",
8: ]
</file>

<file path="denario_app/graphrag.py">
  1: import os
  2: import json
  3: import logging
  4: from pathlib import Path
  5: from typing import List, Dict, Any, Optional
  6: import hashlib
  7: import re
  8: logger = logging.getLogger(__name__)
  9: class GraphRAGIndexer:
 10:     def __init__(self, corpus_path: str = "/data/cmbagents/ragbook",
 11:                  index_path: str = "/data/cmbagents/ragbook/graphrag_index"):
 12:         self.corpus_path = Path(corpus_path)
 13:         self.index_path = Path(index_path)
 14:         self.index_path.mkdir(exist_ok=True)
 15:         self.documents_file = self.index_path / "documents.json"
 16:         self.entities_file = self.index_path / "entities.json"
 17:         self.relationships_file = self.index_path / "relationships.json"
 18:         self.documents = self._load_json(self.documents_file, {})
 19:         self.entities = self._load_json(self.entities_file, {})
 20:         self.relationships = self._load_json(self.relationships_file, {})
 21:     def _load_json(self, file_path: Path, default: Any) -> Any:
 22:         try:
 23:             if file_path.exists():
 24:                 with open(file_path, 'r', encoding='utf-8') as f:
 25:                     return json.load(f)
 26:         except Exception as e:
 27:             logger.warning(f"Failed to load {file_path}: {e}")
 28:         return default
 29:     def _save_json(self, data: Any, file_path: Path) -> None:
 30:         try:
 31:             with open(file_path, 'w', encoding='utf-8') as f:
 32:                 json.dump(data, f, indent=2, ensure_ascii=False)
 33:         except Exception as e:
 34:             logger.error(f"Failed to save {file_path}: {e}")
 35:     def _extract_entities(self, text: str) -> List[str]:
 36:         entities = []
 37:         doi_pattern = r'10\.\d{4,9}/[-._;()/:A-Za-z0-9]+'
 38:         dois = re.findall(doi_pattern, text)
 39:         entities.extend([f"doi:{doi}" for doi in dois])
 40:         arxiv_pattern = r'\d{4}\.\d{4,5}(?:v\d+)?'
 41:         arxiv_ids = re.findall(arxiv_pattern, text)
 42:         entities.extend([f"arxiv:{arxiv_id}" for arxiv_id in arxiv_ids])
 43:         author_pattern = r'\b[A-Z][a-z]+ [A-Z][a-z]+\b'
 44:         authors = re.findall(author_pattern, text)
 45:         entities.extend([f"author:{author}" for author in authors[:10]])
 46:         tech_terms = [
 47:             'cosmology', 'CMB', 'Planck', 'CAMB', 'CLASS', 'CLASSY',
 48:             'dark matter', 'dark energy', 'baryon acoustic oscillations',
 49:             'redshift', 'luminosity distance', 'angular diameter distance',
 50:             'power spectrum', 'correlation function', 'galaxy clustering',
 51:             'weak lensing', 'strong lensing', 'gravitational waves',
 52:             'inflation', 'reionization', 'baryogenesis'
 53:         ]
 54:         for term in tech_terms:
 55:             if term.lower() in text.lower():
 56:                 entities.append(f"concept:{term}")
 57:         return list(set(entities))
 58:     def _extract_relationships(
 59:             self, text: str, entities: List[str]) -> List[Dict[str, str]]:
 60:         relationships = []
 61:         for i, entity1 in enumerate(entities):
 62:             for entity2 in entities[i + 1:]:
 63:                 if self._entities_co_occur(text, entity1, entity2):
 64:                     relationships.append({
 65:                         "source": entity1,
 66:                         "target": entity2,
 67:                         "type": "co_occurs_with",
 68:                         "strength": 1.0
 69:                     })
 70:         return relationships
 71:     def _entities_co_occur(
 72:             self,
 73:             text: str,
 74:             entity1: str,
 75:             entity2: str) -> bool:
 76:         term1 = entity1.split(':', 1)[1] if ':' in entity1 else entity1
 77:         term2 = entity2.split(':', 1)[1] if ':' in entity2 else entity2
 78:         sentences = re.split(r'[.!?]+', text)
 79:         for sentence in sentences:
 80:             if term1.lower() in sentence.lower() and term2.lower() in sentence.lower():
 81:                 return True
 82:         for i in range(len(text) - 100):
 83:             chunk = text[i:i + 100]
 84:             if term1.lower() in chunk.lower() and term2.lower() in chunk.lower():
 85:                 return True
 86:         return False
 87:     def _process_document(self, file_path: Path) -> Dict[str, Any]:
 88:         try:
 89:             with open(file_path, 'r', encoding='utf-8') as f:
 90:                 content = f.read()
 91:         except Exception as e:
 92:             logger.warning(f"Failed to read {file_path}: {e}")
 93:             return None
 94:         doc_id = hashlib.md5(str(file_path).encode()).hexdigest()[:16]
 95:         entities = self._extract_entities(content)
 96:         relationships = self._extract_relationships(content, entities)
 97:         document = {
 98:             "id": doc_id,
 99:             "path": str(file_path),
100:             "filename": file_path.name,
101:             "content": content[:1000],
102:             "entities": entities,
103:             "relationships": relationships,
104:             "size": len(content),
105:             "type": file_path.suffix
106:         }
107:         return document
108:     def index_corpus(self, force_rebuild: bool = False) -> Dict[str, Any]:
109:         if not force_rebuild and self.documents:
110:             logger.info("Index already exists, skipping rebuild")
111:             return {"status": "skipped", "documents": len(self.documents)}
112:         logger.info(f"Indexing corpus at {self.corpus_path}")
113:         file_patterns = ['*.jsonl', '*.md', '*.tex', '*.txt']
114:         files_to_process = []
115:         for pattern in file_patterns:
116:             files_to_process.extend(self.corpus_path.rglob(pattern))
117:         files_to_process = [
118:             f for f in files_to_process
119:             if f.stat().st_size < 10 * 1024 * 1024 and
120:             not any(part.startswith('.') for part in f.parts) and
121:             not f.name.startswith('.')
122:         ]
123:         logger.info(f"Found {len(files_to_process)} files to process")
124:         new_documents = {}
125:         all_entities = {}
126:         all_relationships = []
127:         for file_path in files_to_process:
128:             doc = self._process_document(file_path)
129:             if doc:
130:                 new_documents[doc["id"]] = doc
131:                 for entity in doc["entities"]:
132:                     if entity not in all_entities:
133:                         all_entities[entity] = []
134:                     all_entities[entity].append(doc["id"])
135:                 all_relationships.extend(doc["relationships"])
136:         self.documents = new_documents
137:         self.entities = all_entities
138:         self.relationships = all_relationships
139:         self._save_json(self.documents, self.documents_file)
140:         self._save_json(self.entities, self.entities_file)
141:         self._save_json(self.relationships, self.relationships_file)
142:         logger.info(
143:             f"Indexed {
144:                 len(new_documents)} documents, {
145:                 len(all_entities)} entities, {
146:                 len(all_relationships)} relationships")
147:         return {
148:             "status": "success",
149:             "documents": len(new_documents),
150:             "entities": len(all_entities),
151:             "relationships": len(all_relationships)
152:         }
153:     def search(self, query: str,
154:                max_results: int = 10) -> List[Dict[str, Any]]:
155:         if not self.documents:
156:             logger.warning("No documents indexed, run index_corpus() first")
157:             return []
158:         query_lower = query.lower()
159:         results = []
160:         for doc_id, doc in self.documents.items():
161:             score = 0
162:             if query_lower in doc["content"].lower():
163:                 score += 2
164:             for entity in doc["entities"]:
165:                 if query_lower in entity.lower():
166:                     score += 1
167:             if query_lower in doc["filename"].lower():
168:                 score += 1
169:             if score > 0:
170:                 results.append({
171:                     "document": doc,
172:                     "score": score,
173:                     "matches": self._get_match_context(doc, query)
174:                 })
175:         results.sort(key=lambda x: x["score"], reverse=True)
176:         return results[:max_results]
177:     def _get_match_context(self, doc: Dict[str, Any], query: str) -> List[str]:
178:         content = doc["content"]
179:         query_lower = query.lower()
180:         matches = []
181:         start = 0
182:         while True:
183:             pos = content.lower().find(query_lower, start)
184:             if pos == -1:
185:                 break
186:             context_start = max(0, pos - 100)
187:             context_end = min(len(content), pos + len(query) + 100)
188:             context = content[context_start:context_end]
189:             matches.append(context.strip())
190:             start = pos + 1
191:             if len(matches) >= 3:
192:                 break
193:         return matches
194:     def get_entity_info(self, entity: str) -> Dict[str, Any]:
195:         if entity not in self.entities:
196:             return {"entity": entity, "documents": [], "relationships": []}
197:         doc_ids = self.entities[entity]
198:         documents = [self.documents[doc_id]
199:                      for doc_id in doc_ids if doc_id in self.documents]
200:         entity_relationships = [
201:             rel for rel in self.relationships
202:             if rel["source"] == entity or rel["target"] == entity
203:         ]
204:         return {
205:             "entity": entity,
206:             "documents": documents,
207:             "relationships": entity_relationships,
208:             "document_count": len(documents)
209:         }
210: class GraphRAGRetriever:
211:     def __init__(self, indexer: Optional[GraphRAGIndexer] = None):
212:         self.indexer = indexer or GraphRAGIndexer()
213:         self._ensure_indexed()
214:     def _ensure_indexed(self):
215:         if not self.indexer.documents:
216:             logger.info("No index found, building GraphRAG index...")
217:             self.indexer.index_corpus()
218:     def retrieve(self, query: str,
219:                  max_results: int = 5) -> List[Dict[str, Any]]:
220:         results = self.indexer.search(query, max_results)
221:         formatted_results = []
222:         for result in results:
223:             doc = result["document"]
224:             formatted_results.append({
225:                 "title": doc["filename"],
226:                 "url": f"file://{doc['path']}",
227:                 "doi": None,
228:                 "content": doc["content"],
229:                 "score": result["score"],
230:                 "matches": result["matches"],
231:                 "entities": doc["entities"][:5],
232:                 "type": "local_corpus"
233:             })
234:         return formatted_results
235:     def get_corpus_stats(self) -> Dict[str, Any]:
236:         return {
237:             "documents": len(self.indexer.documents),
238:             "entities": len(self.indexer.entities),
239:             "relationships": len(self.indexer.relationships),
240:             "corpus_path": str(self.indexer.corpus_path)
241:         }
242: _graphrag_retriever = None
243: def get_graphrag_retriever() -> GraphRAGRetriever:
244:     global _graphrag_retriever
245:     if _graphrag_retriever is None:
246:         _graphrag_retriever = GraphRAGRetriever()
247:     return _graphrag_retriever
</file>

<file path="denario_app/preflight.py">
  1: import os
  2: import sys
  3: import json
  4: import socket
  5: import importlib.util
  6: from typing import Dict, Any, List
  7: from urllib.request import urlopen
  8: from urllib.error import URLError
  9: import subprocess
 10: def _load_env_file(path: str) -> None:
 11:     if not os.path.exists(path):
 12:         return
 13:     try:
 14:         with open(path, 'r') as f:
 15:             for line in f:
 16:                 line = line.strip()
 17:                 if not line or line.startswith('#'):
 18:                     continue
 19:                 if '=' not in line:
 20:                     continue
 21:                 key, val = line.split('=', 1)
 22:                 key = key.strip()
 23:                 val = val.strip().strip('"').strip("'")
 24:                 if key and key not in os.environ:
 25:                     os.environ[key] = val
 26:     except Exception:
 27:         pass
 28: def check_module(name: str) -> str:
 29:     return "ok" if importlib.util.find_spec(name) is not None else "missing"
 30: def port_free(port: int) -> bool:
 31:     with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
 32:         s.settimeout(0.5)
 33:         return s.connect_ex(("127.0.0.1", port)) != 0
 34: def ui_health_ok(port: int, timeout_sec: float = 1.0) -> bool:
 35:     try:
 36:         with urlopen(f"http://127.0.0.1:{port}/_stcore/health", timeout=timeout_sec) as resp:
 37:             body = resp.read().decode("utf-8", errors="ignore").strip()
 38:             return resp.status == 200 and body == "ok"
 39:     except Exception:
 40:         return False
 41: def run_checks() -> Dict[str, Any]:
 42:     app_root = os.path.abspath(
 43:         os.path.join(
 44:             os.path.dirname(__file__),
 45:             '..',
 46:             '..'))
 47:     _load_env_file(os.path.join(app_root, '.env'))
 48:     # CONDA_DEFAULT_ENV or interpreter path)
 49:     conda_env = os.environ.get("CONDA_DEFAULT_ENV", "")
 50:     interpreter_path = sys.executable
 51:     is_cmbagent_env = (conda_env == "cmbagent" or
 52:                        "/opt/miniforge/envs/cmbagent/bin/python" in interpreter_path)
 53:     results: Dict[str, Any] = {
 54:         "env": {
 55:             "CONDA_DEFAULT_ENV": conda_env,
 56:             "interpreter_path": interpreter_path,
 57:             "ok": is_cmbagent_env,
 58:         },
 59:         "modules": {
 60:             "streamlit": check_module("streamlit"),
 61:             "denario": check_module("denario"),
 62:             "streamlit_pdf_viewer": check_module("streamlit_pdf_viewer"),
 63:             "PIL": check_module("PIL"),
 64:         },
 65:         "imports": {},
 66:         "network": {},
 67:         "matlab": {},
 68:         "summary": {"errors": []},
 69:     }
 70:     # Import details when present
 71:     if results["modules"]["denario"] == "ok":
 72:         try:
 73:             import denario  # type: ignore
 74:             results["imports"]["denario_path"] = getattr(
 75:                 denario, "__file__", "?")
 76:         except Exception as e:  # pragma: no cover
 77:             results["imports"]["denario_error"] = str(e)
 78:             results["summary"]["errors"].append(f"denario import failed: {e}")
 79:     if results["modules"]["streamlit"] == "ok":
 80:         try:
 81:             import streamlit  # noqa: F401  # type: ignore
 82:         except Exception as e:  # pragma: no cover
 83:             results["imports"]["streamlit_error"] = str(e)
 84:             results["summary"]["errors"].append(
 85:                 f"streamlit import failed: {e}")
 86:     # Ensure Streamlit port is free by default (canonical 8501)
 87:     default_port = int(os.environ.get("DENARIOAPP_PORT", "8501"))
 88:     free = port_free(default_port)
 89:     results["network"]["port_free"] = {"port": default_port, "free": free}
 90:     if not free:
 91:         results["summary"]["errors"].append(
 92:             f"port {default_port} is already in use")
 93:     # If default port is busy, consider alternate known ports and pass if any
 94:     # UI is healthy
 95:     candidate_ports: List[int] = [default_port]
 96:     if default_port != 8511:
 97:         candidate_ports.append(8511)
 98:     healthy_port: int = -1
 99:     for p in candidate_ports:
100:         if not port_free(p) and ui_health_ok(p):
101:             healthy_port = p
102:             break
103:     if healthy_port != -1:
104:         results["network"]["ui_health_tcp"] = {
105:             "port": healthy_port, "ok": True}
106:         # Remove port-in-use error if present, since a healthy UI is already
107:         # running
108:         try:
109:             results["summary"]["errors"].remove(
110:                 f"port {default_port} is already in use")
111:         except ValueError:
112:             pass
113:     # Basic keys presence (warn-only unless user enables strict)
114:     keys: List[str] = [
115:         "OPENAI_API_KEY",
116:         "ANTHROPIC_API_KEY",
117:         "GEMINI_API_KEY",
118:         "PERPLEXITY_API_KEY",
119:     ]
120:     missing_keys = [k for k in keys if not os.environ.get(k)]
121:     results["keys"] = {"required_checked": keys, "missing": missing_keys}
122:     # Summarize errors
123:     if not results["env"]["ok"]:
124:         results["summary"]["errors"].append(
125:             "Not in required conda env: cmbagent (set CONDA_DEFAULT_ENV=cmbagent)"
126:         )
127:     for mod, status in results["modules"].items():
128:         if status != "ok":
129:             results["summary"]["errors"].append(f"missing module: {mod}")
130:     # MATLAB docker probe (optional)
131:     try:
132:         results["matlab"] = _probe_matlab_docker()
133:     except Exception:  # pragma: no cover
134:         results["matlab"] = {"enabled": False}
135:     # Optional strict mode to enforce keys as errors
136:     if os.environ.get(
137:             "DENARIOAPP_STRICT_KEYS") == "1" and results["keys"]["missing"]:
138:         results["summary"]["errors"].append(
139:             f"missing required API keys: {results['keys']['missing']}"
140:         )
141:     results["summary"]["ok"] = len(results["summary"]["errors"]) == 0
142:     return results
143: def _probe_matlab_docker() -> Dict[str, Any]:
144:     info: Dict[str, Any] = {"ok": False}
145:     container = os.environ.get("MATLAB_DOCKER_CONTAINER", "matlab_r2025a")
146:     backend = os.environ.get("MATLAB_BACKEND", "")
147:     if backend != "docker":
148:         return {"enabled": False}
149:     info["enabled"] = True
150:     info["container"] = container
151:     # Quick container liveness check
152:     try:
153:         ps = subprocess.run(
154:             ["docker", "ps", "--format", "{{.Names}}"],
155:             stdout=subprocess.PIPE,
156:             stderr=subprocess.PIPE,
157:             text=True,
158:             timeout=2,
159:         )
160:         names = ps.stdout.strip().splitlines()
161:         info["running"] = container in names
162:         if not info["running"]:
163:             return info
164:     except Exception:
165:         info["error"] = "docker not available"
166:         return info
167:     # Prefer single JSON report from capability_report.m
168:     try:
169:         rep = subprocess.run([
170:             'docker','exec',container,'matlab','-batch','capability_report'
171:         ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=20)
172:         if rep.returncode == 0 and rep.stdout.strip().startswith('{'):
173:             info['capabilities'] = json.loads(rep.stdout.strip())
174:             info['ok'] = True
175:             return info
176:         else:
177:             info['stderr'] = rep.stderr.strip()
178:     except Exception as e:
179:         info['error'] = str(e)
180:     info['ok'] = True
181:     return info
182: def main() -> None:
183:     as_json = "--json" in sys.argv
184:     results = run_checks()
185:     if as_json:
186:         print(json.dumps(results, indent=2))
187:     else:
188:         print(f"env: {results['env']}")
189:         print(f"modules: {results['modules']}")
190:         print(f"imports: {results['imports']}")
191:         print(f"network: {results['network']}")
192:         if results["keys"]["missing"]:
193:             print(f"warn: missing keys: {results['keys']['missing']}")
194:         if results["summary"]["errors"]:
195:             print("errors:")
196:             for e in results["summary"]["errors"]:
197:                 print(f" - {e}")
198:     sys.exit(0 if results["summary"]["ok"] else 1)
199: if __name__ == "__main__":
200:     main()
</file>

<file path="denario_app/rag_adapter.py">
  1: import os
  2: import logging
  3: from abc import ABC, abstractmethod
  4: from typing import List, Dict, Any, Optional, Union
  5: from enum import Enum
  6: from dataclasses import dataclass
  7: logger = logging.getLogger(__name__)
  8: class RAGProvider(Enum):
  9:     PERPLEXITY = "Perplexity (web)"
 10:     DOMAIN = "Domain (Planck/CAMB/CLASSY)"
 11:     GRAPHRAG = "GraphRAG (local corpus)"
 12:     ARXIV = "arXiv (academic papers)"
 13: @dataclass
 14: class RetrievalResult:
 15:     title: str
 16:     url: str
 17:     doi: Optional[str] = None
 18:     content: str = ""
 19:     score: float = 0.0
 20:     provider: str = ""
 21:     metadata: Dict[str, Any] = None
 22:     def __post_init__(self):
 23:         if self.metadata is None:
 24:             self.metadata = {}
 25: class RAGAdapter(ABC):
 26:     @abstractmethod
 27:     def retrieve(
 28:             self,
 29:             query: str,
 30:             max_results: int = 5) -> List[RetrievalResult]:
 31:         pass
 32:     @abstractmethod
 33:     def is_available(self) -> bool:
 34:         pass
 35:     @abstractmethod
 36:     def get_provider_name(self) -> str:
 37:         pass
 38: class PerplexityAdapter(RAGAdapter):
 39:     def __init__(self):
 40:         self.provider_name = RAGProvider.PERPLEXITY.value
 41:         self.api_key = os.getenv("PERPLEXITY_API_KEY")
 42:     def is_available(self) -> bool:
 43:         return self.api_key is not None
 44:     def get_provider_name(self) -> str:
 45:         return self.provider_name
 46:     def retrieve(
 47:             self,
 48:             query: str,
 49:             max_results: int = 5) -> List[RetrievalResult]:
 50:         if not self.is_available():
 51:             logger.warning("Perplexity API key not available, using fallback")
 52:             return self._fallback_retrieve(query, max_results)
 53:         try:
 54:             return self._fallback_retrieve(query, max_results)
 55:         except Exception as e:
 56:             logger.error(f"Perplexity retrieval failed: {e}")
 57:             return self._fallback_retrieve(query, max_results)
 58:     def _fallback_retrieve(
 59:             self,
 60:             query: str,
 61:             max_results: int) -> List[RetrievalResult]:
 62:         return [
 63:             RetrievalResult(
 64:                 title="Web Search Fallback",
 65:                 url="https://perplexity.ai",
 66:                 content=f"Perplexity search for: {query}",
 67:                 score=1.0,
 68:                 provider=self.provider_name,
 69:                 metadata={"fallback": True, "query": query}
 70:             )
 71:         ]
 72: class DomainAdapter(RAGAdapter):
 73:     def __init__(self):
 74:         self.provider_name = RAGProvider.DOMAIN.value
 75:     def is_available(self) -> bool:
 76:         return True
 77:     def get_provider_name(self) -> str:
 78:         return self.provider_name
 79:     def retrieve(
 80:             self,
 81:             query: str,
 82:             max_results: int = 5) -> List[RetrievalResult]:
 83:         domain_contexts = self._get_domain_contexts()
 84:         results = []
 85:         for context in domain_contexts[:max_results]:
 86:             results.append(RetrievalResult(
 87:                 title=context["title"],
 88:                 url=context["url"],
 89:                 content=context["content"],
 90:                 score=1.0,
 91:                 provider=self.provider_name,
 92:                 metadata=context.get("metadata", {})
 93:             ))
 94:         return results
 95:     def _get_domain_contexts(self) -> List[Dict[str, Any]]:
 96:         return [{"title": "Planck Mission Context",
 97:                  "url": "https://www.cosmos.esa.int/web/planck",
 98:                  "content": """Planck 2018 results: cosmological parameters from CMB temperature and polarization
 99: - Key datasets: Planck 2018 TT,TE,EE+lowE+lensing+BAO
100: - Relevant parameters: H0, Ωm, ΩΛ, ns, As, τ
101: - Recent constraints: H0 = 67.4 ± 0.5 km/s/Mpc (Planck 2018)
102: - Lensing potential: Planck lensing reconstruction
103: - Systematics: foreground contamination, beam uncertainties""",
104:                  "metadata": {"domain": "planck",
105:                               "type": "mission_context"}},
106:                 {"title": "CAMB (Code for Anisotropies in the Microwave Background)",
107:                  "url": "https://camb.readthedocs.io/",
108:                  "content": """Boltzmann solver for CMB anisotropies and matter power spectra
109: - Key features: scalar, vector, tensor modes; dark energy models
110: - Recent updates: CAMB 1.3+ with improved precision
111: - Applications: parameter estimation, likelihood analysis
112: - Integration: CosmoMC, MontePython, Cobaya
113: - Outputs: Cl, P(k), transfer functions""",
114:                  "metadata": {"domain": "camb",
115:                               "type": "tool_context"}},
116:                 {"title": "CLASSY (Cosmic Linear Anisotropy Solving System)",
117:                  "url": "https://class-code.net/",
118:                  "content": """Alternative to CAMB for CMB and LSS calculations
119: - Features: high precision, modular design, dark energy models
120: - Recent work: CLASSY-SZ for Sunyaev-Zel'dovich effects
121: - Applications: parameter estimation, model comparison
122: - Integration: MontePython, Cobaya
123: - Advantages: speed, flexibility, extended models""",
124:                  "metadata": {"domain": "classy",
125:                               "type": "tool_context"}}]
126: class GraphRAGAdapter(RAGAdapter):
127:     def __init__(self):
128:         self.provider_name = RAGProvider.GRAPHRAG.value
129:         self._retriever = None
130:     def is_available(self) -> bool:
131:         try:
132:             from .graphrag import get_graphrag_retriever
133:             return True
134:         except ImportError:
135:             return False
136:     def get_provider_name(self) -> str:
137:         return self.provider_name
138:     def retrieve(
139:             self,
140:             query: str,
141:             max_results: int = 5) -> List[RetrievalResult]:
142:         if not self.is_available():
143:             logger.warning("GraphRAG not available")
144:             return []
145:         try:
146:             if self._retriever is None:
147:                 from .graphrag import get_graphrag_retriever
148:                 self._retriever = get_graphrag_retriever()
149:             results = self._retriever.retrieve(query, max_results)
150:             retrieval_results = []
151:             for result in results:
152:                 retrieval_results.append(RetrievalResult(
153:                     title=result["title"],
154:                     url=result["url"],
155:                     doi=result.get("doi"),
156:                     content=result["content"],
157:                     score=result.get("score", 0.0),
158:                     provider=self.provider_name,
159:                     metadata=result.get("metadata", {})
160:                 ))
161:             return retrieval_results
162:         except Exception as e:
163:             logger.error(f"GraphRAG retrieval failed: {e}")
164:             return []
165:     def get_corpus_stats(self) -> Dict[str, Any]:
166:         if not self.is_available() or self._retriever is None:
167:             return {"documents": 0, "entities": 0, "relationships": 0}
168:         try:
169:             return self._retriever.get_corpus_stats()
170:         except Exception as e:
171:             logger.error(f"Failed to get corpus stats: {e}")
172:             return {"documents": 0, "entities": 0, "relationships": 0}
173: class ArxivAdapter(RAGAdapter):
174:     def __init__(self):
175:         self.provider_name = RAGProvider.ARXIV.value
176:         self._retriever = None
177:     def is_available(self) -> bool:
178:         try:
179:             from .arxiv_rag import get_arxiv_retriever
180:             return True
181:         except ImportError:
182:             return False
183:     def get_provider_name(self) -> str:
184:         return self.provider_name
185:     def retrieve(
186:             self,
187:             query: str,
188:             max_results: int = 5) -> List[RetrievalResult]:
189:         if not self.is_available():
190:             logger.warning("arXiv adapter not available")
191:             return []
192:         try:
193:             if self._retriever is None:
194:                 from .arxiv_rag import get_arxiv_retriever
195:                 self._retriever = get_arxiv_retriever()
196:             results = self._retriever.retrieve(query, max_results)
197:             retrieval_results = []
198:             for result in results:
199:                 retrieval_results.append(RetrievalResult(
200:                     title=result["title"],
201:                     url=result["url"],
202:                     doi=result.get("doi"),
203:                     content=result["content"],
204:                     score=1.0,
205:                     provider=self.provider_name,
206:                     metadata={
207:                         "authors": result.get("authors", []),
208:                         "arxiv_id": result.get("arxiv_id"),
209:                         "categories": result.get("categories", []),
210:                         "published": result.get("published"),
211:                         "type": "arxiv_paper"
212:                     }
213:                 ))
214:             return retrieval_results
215:         except Exception as e:
216:             logger.error(f"arXiv retrieval failed: {e}")
217:             return []
218: class UnifiedRAGAdapter:
219:     def __init__(self):
220:         self.adapters = {
221:             RAGProvider.PERPLEXITY: PerplexityAdapter(),
222:             RAGProvider.DOMAIN: DomainAdapter(),
223:             RAGProvider.GRAPHRAG: GraphRAGAdapter(),
224:             RAGProvider.ARXIV: ArxivAdapter(),
225:         }
226:     def get_available_providers(self) -> List[RAGProvider]:
227:         available = []
228:         for provider, adapter in self.adapters.items():
229:             if adapter.is_available():
230:                 available.append(provider)
231:         return available
232:     def retrieve(self, query: str, provider: Union[RAGProvider, str],
233:                  max_results: int = 5) -> List[RetrievalResult]:
234:         if isinstance(provider, str):
235:             # Convert string to enum
236:             try:
237:                 provider = RAGProvider(provider)
238:             except ValueError:
239:                 logger.error(f"Unknown provider: {provider}")
240:                 return []
241:         if provider not in self.adapters:
242:             logger.error(f"Provider not configured: {provider}")
243:             return []
244:         adapter = self.adapters[provider]
245:         if not adapter.is_available():
246:             logger.warning(f"Provider {provider.value} not available")
247:             return []
248:         try:
249:             return adapter.retrieve(query, max_results)
250:         except Exception as e:
251:             logger.error(f"Retrieval failed for {provider.value}: {e}")
252:             return []
253:     def retrieve_with_fallback(self,
254:                                query: str,
255:                                preferred_provider: Union[RAGProvider,
256:                                                          str],
257:                                max_results: int = 5) -> List[RetrievalResult]:
258:         if isinstance(preferred_provider, str):
259:             try:
260:                 preferred_provider = RAGProvider(preferred_provider)
261:             except ValueError:
262:                 logger.error(f"Unknown provider: {preferred_provider}")
263:                 return []
264:         # Try preferred provider first
265:         results = self.retrieve(query, preferred_provider, max_results)
266:         if results:
267:             return results
268:         # Fallback to other available providers
269:         available_providers = self.get_available_providers()
270:         for provider in available_providers:
271:             if provider != preferred_provider:
272:                 results = self.retrieve(query, provider, max_results)
273:                 if results:
274:                     logger.info(f"Using fallback provider: {provider.value}")
275:                     return results
276:         logger.warning("All providers failed or unavailable")
277:         return []
278:     def get_provider_info(
279:             self, provider: Union[RAGProvider, str]) -> Dict[str, Any]:
280:         if isinstance(provider, str):
281:             try:
282:                 provider = RAGProvider(provider)
283:             except ValueError:
284:                 return {"error": f"Unknown provider: {provider}"}
285:         if provider not in self.adapters:
286:             return {"error": f"Provider not configured: {provider}"}
287:         adapter = self.adapters[provider]
288:         info = {
289:             "name": adapter.get_provider_name(),
290:             "available": adapter.is_available(),
291:             "provider": provider.value
292:         }
293:         # Add provider-specific info
294:         if provider == RAGProvider.GRAPHRAG and hasattr(
295:                 adapter, 'get_corpus_stats'):
296:             info["corpus_stats"] = adapter.get_corpus_stats()
297:         return info
298:     def get_all_provider_info(self) -> Dict[str, Dict[str, Any]]:
299:         info = {}
300:         for provider in RAGProvider:
301:             info[provider.value] = self.get_provider_info(provider)
302:         return info
303: # Global instance for easy access
304: _unified_adapter = None
305: def get_unified_rag_adapter() -> UnifiedRAGAdapter:
306:     global _unified_adapter
307:     if _unified_adapter is None:
308:         _unified_adapter = UnifiedRAGAdapter()
309:     return _unified_adapter
310: def format_results_for_ui(results: List[RetrievalResult]) -> str:
311:     if not results:
312:         return "No results found."
313:     formatted = f"Found {len(results)} relevant documents:\n\n"
314:     for i, result in enumerate(results, 1):
315:         formatted += f"{i}. {result.title}\n"
316:         if result.doi:
317:             formatted += f"   DOI: https://doi.org/{result.doi}\n"
318:         if result.url:
319:             formatted += f"   URL: {result.url}\n"
320:         if result.metadata.get("authors"):
321:             authors = result.metadata["authors"][:3]
322:             formatted += f"   Authors: {', '.join(authors)}"
323:             if len(result.metadata["authors"]) > 3:
324:                 formatted += f" et al. ({len(result.metadata['authors'])} total)"
325:             formatted += "\n"
326:         if result.metadata.get("categories"):
327:             formatted += f"   Categories: {', '.join(result.metadata['categories'][:2])}\n"
328:         if result.content:
329:             content_preview = result.content[:200] + \
330:                 "..." if len(result.content) > 200 else result.content
331:             formatted += f"   Content: {content_preview}\n"
332:         formatted += f"   Provider: {result.provider}\n"
333:         formatted += "\n"
334:     return formatted
</file>

<file path="denario_app/utils.py">
  1: import os
  2: import io
  3: import zipfile
  4: import re
  5: import sys
  6: import uuid
  7: import shutil
  8: import time
  9: from contextlib import contextmanager
 10: import streamlit as st
 11: from denario import KeyManager
 12: try:
 13:     from .constants import PROJECT_DIR, LLMs
 14: except Exception:
 15:     from constants import PROJECT_DIR, LLMs
 16: def show_markdown_file(
 17:         file_path: str,
 18:         extra_format=False,
 19:         label: str = "") -> None:
 20:     with open(file_path, "r") as f:
 21:         response = f.read()
 22:     if extra_format:
 23:         response = response.replace(
 24:             "\nProject Idea:\n\t",
 25:             "### Project Idea\n").replace(
 26:             "\t\t",
 27:             "    ")
 28:     st.download_button(
 29:         label="Download " + label,
 30:         data=response,
 31:         file_name=file_path.replace(PROJECT_DIR + "/input_files/", ""),
 32:         mime="text/plain",
 33:         icon=":material/download:",
 34:     )
 35:     st.markdown(response)
 36: def extract_api_keys(uploaded_file):
 37:     pattern = re.compile(r'^\s*([A-Z_]+_API_KEY)\s*=\s*"([^"]+)"')
 38:     keys = {}
 39:     content = uploaded_file.read().decode("utf-8").split("\n")
 40:     for line in content:
 41:         match = pattern.match(line)
 42:         if match:
 43:             key_name, key_value = match.groups()
 44:             key_name = key_name.replace("_API_KEY", "")
 45:             if key_name in LLMs:
 46:                 keys[key_name] = key_value
 47:             if "GOOGLE" in key_name:
 48:                 keys["GEMINI"] = key_value
 49:     return keys
 50: def set_api_keys(key_manager: KeyManager, api_key: str, llm: str):
 51:     if llm == "GEMINI":
 52:         key_manager.GEMINI = api_key
 53:     elif llm == "OPENAI":
 54:         key_manager.OPENAI = api_key
 55:     elif llm == "ANTHROPIC":
 56:         key_manager.ANTHROPIC = api_key
 57:     elif llm == "PERPLEXITY":
 58:         key_manager.PERPLEXITY = api_key
 59: def create_zip_in_memory(folder_path: str):
 60:     zip_buffer = io.BytesIO()
 61:     with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
 62:         for root, _, files in os.walk(folder_path):
 63:             for file in files:
 64:                 file_path = os.path.join(root, file)
 65:                 arcname = os.path.relpath(file_path, folder_path)
 66:                 zip_file.write(file_path, arcname)
 67:     zip_buffer.seek(0)
 68:     return zip_buffer
 69: def get_project_dir():
 70:     if "project_dir" in st.session_state:
 71:         return st.session_state.project_dir
 72:     env_dir = os.environ.get("DENARIO_PROJECT_DIR")
 73:     if env_dir:
 74:         os.makedirs(env_dir, exist_ok=True)
 75:         st.session_state.project_dir = env_dir
 76:         return st.session_state.project_dir
 77:     temp_dir = f"project_dir_{uuid.uuid4().hex}"
 78:     os.makedirs(temp_dir, exist_ok=True)
 79:     st.session_state.project_dir = temp_dir
 80:     return st.session_state.project_dir
 81: class StreamToBuffer(io.StringIO):
 82:     def __init__(self, update_callback):
 83:         super().__init__()
 84:         self.update_callback = update_callback
 85:     def write(self, s):
 86:         super().write(s)
 87:         self.seek(0)
 88:         self.update_callback(self.read())
 89:         self.seek(0, io.SEEK_END)
 90: @contextmanager
 91: def stream_to_streamlit(container):
 92:     buffer = StreamToBuffer(update_callback=lambda text: container.markdown(
 93:         f'<div class="log-box">{text.replace("\\n", "<br>")}</div>',
 94:         unsafe_allow_html=True
 95:     ))
 96:     old_stdout = sys.stdout
 97:     sys.stdout = buffer
 98:     try:
 99:         yield
100:     finally:
101:         sys.stdout = old_stdout
102: def get_latest_mtime_in_folder(folder_path: str) -> float:
103:     latest_mtime = os.path.getmtime(folder_path)
104:     for root, dirs, files in os.walk(folder_path):
105:         for name in files + dirs:
106:             full_path = os.path.join(root, name)
107:             try:
108:                 mtime = os.path.getmtime(full_path)
109:                 if mtime > latest_mtime:
110:                     latest_mtime = mtime
111:             except FileNotFoundError:
112:                 continue
113:     return latest_mtime
114: def delete_old_folders(days_old: int = 1):
115:     now = time.time()
116:     cutoff = now - (days_old * 86400)
117:     for entry in os.listdir('.'):
118:         if os.path.isdir(entry) and entry.startswith("project_dir_"):
119:             latest_mtime = get_latest_mtime_in_folder(entry)
120:             if latest_mtime < cutoff:
121:                 shutil.rmtree(entry)
</file>

<file path="denario_app.egg-info/dependency_links.txt">
1: 
</file>

<file path="denario_app.egg-info/PKG-INFO">
 1: Metadata-Version: 2.4
 2: Name: denario_app
 3: Version: 0.1.4
 4: Summary: GUI for Denario
 5: Requires-Python: >=3.12
 6: Description-Content-Type: text/markdown
 7: Requires-Dist: streamlit
 8: Requires-Dist: streamlit-pdf-viewer>=0.0.23
 9: Requires-Dist: denario@ file:///data/cmbagents/Denario
10: 
11: # DenarioApp
12: 
13: GUI for [Denario](https://github.com/AstroPilot-AI/Denario.git), powered by [streamlit](https://streamlit.io).
14: 
15: [Test a deployed demo of this app in HugginFace Spaces.](https://huggingface.co/spaces/astropilot-ai/Denario)
16: 
17: <img width="1793" height="694" alt="Screenshot from 2025-09-10 18-30-46" src="https://github.com/user-attachments/assets/2c524601-13ff-492b-addb-173323aaa15b" />
18: 
19: ## Run locally
20: 
21: Install the GUI from source following one of the following steps.
22: 
23: 1. Install with pip
24: 
25:    ```bash
26:    pip install -e .
27:    ```
28: 
29: 2. Install with [uv](https://docs.astral.sh/uv/)
30: 
31:    ```bash
32:    uv sync
33:    ```
34: 
35: Run the app with:
36: 
37: ```bash
38: denario run
39: ```
40: 
41: ## Run in Docker
42: 
43: You may need `sudo` permission [or use this link](https://docs.docker.com/engine/install/linux-postinstall/). To build the docker run:
44: 
45: ```bash
46: docker build -t denario-app .
47: ```
48: 
49: To run the app:
50: 
51: ```bash
52: docker run -p 8501:8501 --rm \
53:     -v $(pwd)/project_app:/app/project_app \
54:     -v $(pwd)/data:/app/data \
55:     -v $(pwd).env/app/.env \
56:     denario-app
57: ```
58: 
59: That command exposes the default streamlit port `8501`, change it to use a different port. You can mount additional volumes to share data with the docker using the `-v` flag. The above command shares the `project_app` folder, where the project files are generated, a `data` folder, where the required data would be present, and a `.env` file with the API keys (so no need to parse them manually). To run the docker in interactive mode, add the flag `-it` and `bash` at the end of the command.
60: 
61: You can also use [docker compose](https://docs.docker.com/compose/), you can just run
62: 
63: ```bash
64: docker compose up --watch
65: ```
66: 
67: to build the image and run the container.
</file>

<file path="denario_app.egg-info/requires.txt">
1: streamlit
2: streamlit-pdf-viewer>=0.0.23
3: denario@ file:///data/cmbagents/Denario
</file>

<file path="denario_app.egg-info/SOURCES.txt">
 1: README.md
 2: pyproject.toml
 3: src/denario_app/app.py
 4: src/denario_app/cli.py
 5: src/denario_app/components.py
 6: src/denario_app/constants.py
 7: src/denario_app/utils.py
 8: src/denario_app.egg-info/PKG-INFO
 9: src/denario_app.egg-info/SOURCES.txt
10: src/denario_app.egg-info/dependency_links.txt
11: src/denario_app.egg-info/requires.txt
12: src/denario_app.egg-info/top_level.txt
</file>

<file path="denario_app.egg-info/top_level.txt">
1: denario_app
</file>

<file path="my_research/idea_generation_output/LLM_calls.txt">
1: 128 149 128 149
2: 455 174 583 323
3: 436 207 1019 530
4: 717 142 1736 672
5: 608 202 2344 874
6: 911 494 3255 1368
7: 1159 201 4414 1569
</file>

<file path="my_research/input_files/data_description.md">
1: A scientific manuscript on a heavily scattered Fast Radio Burst.
</file>

<file path="my_research/input_files/idea.md">
1: **Title:** Exploiting Wavelet Scattering Networks on 21cm Intensity Maps for Efficient Inference of Early Dark Energy
2: 
3: **Idea:** We propose to use Wavelet Scattering Networks (WSN) to extract robust, low-dimensional features from simulated 21cm intensity maps under different EDE scenarios. These features will then be used as input to a machine learning model (e.g., Gaussian Process Regression) to efficiently infer EDE parameters. WSNs are known for their robustness to noise and ability to capture non-Gaussian information, making them ideal for dealing with foreground contamination and complex 21cm signals. We will train and validate the WSN and machine learning model on a large suite of simulations, incorporating realistic foreground models and instrumental effects. This approach will significantly reduce the computational cost compared to traditional Bayesian methods, allowing for rapid exploration of the EDE parameter space and robust constraints even with complex foregrounds and instrumental uncertainties.
4: \
</file>

<file path="my_research/input_files/methods.md">
  1: Here's a detailed breakdown of the methodology we'll use to carry out this research project. Your primary responsibility is to execute these steps carefully and document everything thoroughly.
  2: 
  3: **1. Data Generation & Simulation:**
  4: 
  5: *   **21cm Intensity Maps:** We'll start by generating a suite of 21cm intensity maps using a modified version of existing simulation codes (to be provided). These simulations will model the 21cm signal during the Epoch of Reionization (EoR) and Cosmic Dawn, incorporating different Early Dark Energy (EDE) scenarios.
  6: 
  7:     *   **EDE Parameter Space:** We will sample the EDE parameter space using a Latin Hypercube Sampling (LHS) method. The parameters to be varied are: `f_EDE` (the fraction of dark energy in the early universe), `z_c` (the critical redshift for the EDE transition), and `H0` (Hubble constant).
  8:     *   We will generate N = 5000 simulations covering the following ranges:
  9:         *   `f_EDE`: [0.0, 0.2]
 10:         *   `z_c`: [3.0, 6.0]
 11:         *   `H0`: [65, 75] km/s/Mpc
 12:     *   **Simulation Volume & Resolution:** Each simulation will represent a comoving volume of (L = 200 Mpc/h)^3 with a grid resolution of N_grid = 256^3. This ensures sufficient dynamic range to capture the relevant scales of the 21cm signal.
 13:     *   **Redshift Range:** The simulations will span a redshift range of z = 6 to z = 20, capturing the key epochs of Cosmic Dawn and EoR.
 14: 
 15: *   **Foreground Modeling:** Realistic foreground contamination is crucial. We will incorporate foreground models including:
 16: 
 17:     *   **Synchrotron Emission:** We will use a power-law model for synchrotron emission, with a spectral index that varies spatially.
 18:     *   **Free-Free Emission:** We will model free-free emission as a function of frequency and electron temperature.
 19:     *   **Point Sources:** We will randomly distribute point sources across the sky, with flux densities drawn from a power-law distribution.
 20:     *   **Foreground Amplitude:** The foreground amplitude will be set to be approximately 10 times the signal at the EoR frequencies.
 21: 
 22: *   **Instrumental Effects:** We will simulate instrumental effects by:
 23: 
 24:     *   **Adding Gaussian Noise:** We will add Gaussian noise to the simulated maps, with a standard deviation that depends on the observing time and system temperature.
 25:     *   **Beam Smoothing:** We will convolve the maps with a Gaussian beam representing the telescope's point spread function. The beam size will be frequency-dependent.
 26: 
 27: **2. Wavelet Scattering Network (WSN) Feature Extraction:**
 28: 
 29: *   **WSN Architecture:** We will use a pre-existing WSN implementation (e.g., from the `scatnet` library in Python). The WSN architecture will consist of:
 30:     *   **Number of Layers:** 2 scattering layers.
 31:     *   **Wavelet Type:** Morlet wavelets.
 32:     *   **Scales per Octave:** 8 scales per octave.
 33:     *   **Pooling Size:** 4x4 average pooling after each scattering layer.
 34: *   **Preprocessing:** Before feeding the 21cm maps to the WSN, we will:
 35:     *   **Normalize:** Normalize each map to have zero mean and unit variance. This ensures that the WSN is not sensitive to the overall amplitude of the signal.
 36:     *   **Resize:** Resize the 256x256 images to 128x128 to reduce computational cost.
 37: *   **Feature Extraction:** The WSN will transform each 21cm intensity map into a low-dimensional feature vector. The output of the WSN will be a vector of scattering coefficients.
 38:     *   **Dimensionality Reduction:** The WSN will reduce the dimensionality of the data from 256x256 pixels to a feature vector of length approximately 500.
 39: *   **Data Organization:** We will organize the extracted features into a matrix X, where each row corresponds to a 21cm map and each column corresponds to a scattering coefficient. We will also create a vector y containing the corresponding EDE parameters for each map.
 40: 
 41: **3. Machine Learning Model Training & Validation:**
 42: 
 43: *   **Model Selection:** We will use Gaussian Process Regression (GPR) as our machine learning model. GPR is a non-parametric model that provides uncertainty estimates, which are crucial for cosmological parameter inference.
 44: 
 45: *   **Training & Validation Split:** We will split the data into training and validation sets using an 80/20 split. This means that 80% of the data will be used to train the GPR model, and 20% of the data will be used to evaluate its performance. The split will be performed randomly, but we will ensure that the training and validation sets have similar distributions of EDE parameters.
 46: 
 47: *   **GPR Kernel:** We will use a Radial Basis Function (RBF) kernel for the GPR model. The RBF kernel is a common choice for regression problems and has a single hyperparameter, the length scale, which controls the smoothness of the model.
 48: 
 49: *   **Hyperparameter Optimization:** We will optimize the hyperparameters of the GPR model using a gradient-based optimization algorithm. Specifically, we will use the L-BFGS-B algorithm to maximize the marginal log-likelihood of the training data.
 50: 
 51: *   **Performance Evaluation:** We will evaluate the performance of the GPR model on the validation set using the following metrics:
 52: 
 53:     *   **Root Mean Squared Error (RMSE):** This measures the average difference between the predicted EDE parameters and the true EDE parameters.
 54:     *   **R-squared (R^2):** This measures the proportion of variance in the EDE parameters that is explained by the GPR model.
 55:     *   **Calibration Score:** This measures the agreement between the predicted uncertainties and the true errors.
 56: 
 57: **4. Inference and Uncertainty Quantification:**
 58: 
 59: *   **Parameter Inference:** Once the GPR model is trained and validated, we can use it to infer EDE parameters from new 21cm intensity maps.
 60: 
 61: *   **Uncertainty Quantification:** The GPR model provides uncertainty estimates for its predictions. These uncertainty estimates can be used to quantify the uncertainty in the inferred EDE parameters.
 62: 
 63: *   **Posterior Distribution:** The output of the GPR model is a Gaussian distribution over the EDE parameters. This distribution represents the posterior distribution, which is the probability distribution of the EDE parameters given the observed 21cm intensity map.
 64: 
 65: *   **Marginalization:** We can marginalize the posterior distribution over nuisance parameters (e.g., foreground parameters) to obtain the marginalized posterior distribution for the EDE parameters.
 66: 
 67: **5. Exploratory Data Analysis (EDA):**
 68: 
 69: Before diving into the full analysis, we'll perform some EDA to understand the characteristics of our simulated data:
 70: 
 71: *   **Summary Statistics:** We'll calculate basic summary statistics for the EDE parameters and the simulated 21cm intensity maps.
 72:     *   For EDE parameters (`f_EDE`, `z_c`, `H0`): Minimum, Maximum, Mean, Median, Standard Deviation, Quantiles (25th, 50th, 75th). For example:
 73: 
 74:         | Parameter | Min  | Max  | Mean | Median | Std Dev | 25th Quantile | 75th Quantile |
 75:         | --------- | ---- | ---- | ---- | ------ | ------- | ------------- | ------------- |
 76:         | `f_EDE`   | 0.0  | 0.2  | 0.1  | 0.1    | 0.058   | 0.05          | 0.15          |
 77:         | `z_c`     | 3.0  | 6.0  | 4.5  | 4.5    | 0.866   | 3.75          | 5.25          |
 78:         | `H0`      | 65   | 75   | 70   | 70     | 2.887   | 67.5          | 72.5          |
 79: 
 80:     *   For 21cm intensity maps (for a subset of simulations to get a sense of the distribution): Mean, Standard Deviation, Minimum, Maximum pixel values across the map.
 81: 
 82: *   **Correlation Analysis:** We'll examine the correlation between different EDE parameters. This will help us understand if there are any degeneracies between the parameters. We'll compute the Pearson correlation coefficient between each pair of EDE parameters.
 83:     *   Example Correlation Matrix:
 84: 
 85:         |         | `f_EDE` | `z_c` | `H0` |
 86:         | ------- | ------- | ----- | ---- |
 87:         | `f_EDE` | 1.0     | 0.1   | -0.2 |
 88:         | `z_c`   | 0.1     | 1.0   | 0.05 |
 89:         | `H0`    | -0.2    | 0.05  | 1.0  |
 90: 
 91: *   **Signal-to-Noise Ratio (SNR):** We'll estimate the SNR of the 21cm signal in the simulated maps, both before and after adding foregrounds and instrumental noise. This will give us an idea of how challenging it will be to extract information from the data. We can compute the SNR as the ratio of the standard deviation of the 21cm signal to the standard deviation of the noise.
 92: 
 93: **Important Notes:**
 94: 
 95: *   Document every step meticulously. Keep track of all parameters used in the simulations, WSN, and GPR model.
 96: *   Version control your code using Git.
 97: *   Use a consistent naming convention for all files and variables.
 98: *   Write clear and concise comments in your code.
 99: *   Regularly back up your data and code.
100: \
</file>

<file path="my_research/methods_generation_output/LLM_calls.txt">
1: 440 2185 440 2185
</file>

<file path="01_denario_basics.ipynb">
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "metadata": {},
  6:    "source": [
  7:     "# Denario in JupyterLab - Basic Workflow\n",
  8:     "\n",
  9:     "This notebook demonstrates how to use Denario for automated scientific research in a JupyterLab environment.\n",
 10:     "\n",
 11:     "## Features:\n",
 12:     "- Interactive data analysis\n",
 13:     "- Real-time visualization\n",
 14:     "- Code execution and debugging\n",
 15:     "- Collaborative research workflows\n"
 16:    ]
 17:   },
 18:   {
 19:    "cell_type": "code",
 20:    "execution_count": 1,
 21:    "metadata": {},
 22:    "outputs": [],
 23:    "source": [
 24:     "# Import Denario and other necessary libraries\n",
 25:     "from denario import Denario, Journal, models\n",
 26:     "import matplotlib.pyplot as plt\n",
 27:     "import pandas as pd\n",
 28:     "import numpy as np\n",
 29:     "from IPython.display import display, Markdown\n",
 30:     "\n",
 31:     "# Set up plotting\n",
 32:     "plt.style.use('seaborn-v0_8')\n",
 33:     "%matplotlib inline\n"
 34:    ]
 35:   },
 36:   {
 37:    "cell_type": "code",
 38:    "execution_count": 5,
 39:    "metadata": {},
 40:    "outputs": [
 41:     {
 42:      "name": "stdout",
 43:      "output_type": "stream",
 44:      "text": [
 45:       "/home/user/app/notebooks\n"
 46:      ]
 47:     }
 48:    ],
 49:    "source": [
 50:     "!pwd"
 51:    ]
 52:   },
 53:   {
 54:    "cell_type": "markdown",
 55:    "metadata": {},
 56:    "source": [
 57:     "## 1. Initialize Denario Project\n"
 58:    ]
 59:   },
 60:   {
 61:    "cell_type": "markdown",
 62:    "metadata": {},
 63:    "source": [
 64:     "## 2. Set Data Description\n"
 65:    ]
 66:   },
 67:   {
 68:    "cell_type": "code",
 69:    "execution_count": null,
 70:    "metadata": {},
 71:    "outputs": [],
 72:    "source": [
 73:     "# Define your research data and tools\n",
 74:     "data_description = \"\"\"\n",
 75:     "Analyze cosmological data from the Atacama Cosmology Telescope (ACT).\n",
 76:     "The dataset includes:\n",
 77:     "- CMB temperature maps\n",
 78:     "- Lensing power spectrum measurements\n",
 79:     "- Galaxy clustering data\n",
 80:     "\n",
 81:     "Tools available:\n",
 82:     "- Python with numpy, scipy, matplotlib\n",
 83:     "- Cosmological parameter estimation\n",
 84:     "- Monte Carlo Markov Chain (MCMC) analysis\n",
 85:     "- Statistical analysis and visualization\n",
 86:     "\n",
 87:     "Computing constraints:\n",
 88:     "- Run on local machine with 8GB RAM\n",
 89:     "- Maximum computation time: 30 minutes\n",
 90:     "- Generate publication-quality plots\n",
 91:     "\"\"\"\n",
 92:     "\n",
 93:     "# Set the data description\n",
 94:     "den.set_data_description(data_description)\n",
 95:     "\n",
 96:     "# Display the description\n",
 97:     "display(Markdown(f\"## Data Description\\n{den.research.data_description}\"))\n"
 98:    ]
 99:   },
100:   {
101:    "cell_type": "markdown",
102:    "metadata": {},
103:    "source": [
104:     "## 3. Generate Research Idea\n"
105:    ]
106:   },
107:   {
108:    "cell_type": "code",
109:    "execution_count": null,
110:    "metadata": {},
111:    "outputs": [],
112:    "source": [
113:     "# Generate a research idea using fast mode\n",
114:     "print(\"🧠 Generating research idea...\")\n",
115:     "try:\n",
116:     "    den.get_idea_fast(llm=models[\"gemini-2.0-flash\"], verbose=True)\n",
117:     "    print(\"✅ Idea generated successfully!\")\n",
118:     "    \n",
119:     "    # Display the generated idea\n",
120:     "    display(Markdown(f\"## Generated Research Idea\\n{den.research.idea}\"))\n",
121:     "    \n",
122:     "except Exception as e:\n",
123:     "    print(f\"❌ Error generating idea: {e}\")\n",
124:     "    # Set a fallback idea for demonstration\n",
125:     "    den.set_idea(\"Investigate the relationship between CMB lensing power spectrum and cosmological parameters using MCMC analysis.\")\n",
126:     "    print(\"📝 Using fallback idea for demonstration\")\n",
127:     "    display(Markdown(f\"## Research Idea (Fallback)\\n{den.research.idea}\"))\n"
128:    ]
129:   },
130:   {
131:    "cell_type": "markdown",
132:    "metadata": {},
133:    "source": [
134:     "## 4. Generate Methodology\n"
135:    ]
136:   },
137:   {
138:    "cell_type": "code",
139:    "execution_count": null,
140:    "metadata": {},
141:    "outputs": [],
142:    "source": [
143:     "# Generate methodology\n",
144:     "print(\"🔬 Generating methodology...\")\n",
145:     "try:\n",
146:     "    den.get_method_fast(llm=models[\"gemini-2.0-flash\"], verbose=True)\n",
147:     "    print(\"✅ Methodology generated successfully!\")\n",
148:     "    \n",
149:     "    # Display the methodology\n",
150:     "    display(Markdown(f\"## Generated Methodology\\n{den.research.methodology}\"))\n",
151:     "    \n",
152:     "except Exception as e:\n",
153:     "    print(f\"❌ Error generating methodology: {e}\")\n",
154:     "    # Set a fallback methodology for demonstration\n",
155:     "    den.set_method(\"\"\"\n",
156:     "    ## Methodology\n",
157:     "    \n",
158:     "    1. **Data Preparation**\n",
159:     "       - Load CMB lensing power spectrum data\n",
160:     "       - Apply noise corrections and systematic error handling\n",
161:     "       - Prepare cosmological parameter priors\n",
162:     "    \n",
163:     "    2. **MCMC Analysis**\n",
164:     "       - Implement Metropolis-Hastings algorithm\n",
165:     "       - Run chains with 100,000 iterations\n",
166:     "       - Check convergence using Gelman-Rubin statistic\n",
167:     "    \n",
168:     "    3. **Parameter Estimation**\n",
169:     "       - Estimate cosmological parameters: Ω_m, σ_8, H_0\n",
170:     "       - Calculate confidence intervals\n",
171:     "       - Generate corner plots for parameter correlations\n",
172:     "    \n",
173:     "    4. **Validation**\n",
174:     "       - Compare with Planck 2018 results\n",
175:     "       - Perform goodness-of-fit tests\n",
176:     "       - Generate publication-quality figures\n",
177:     "    \"\"\")\n",
178:     "    print(\"📝 Using fallback methodology for demonstration\")\n",
179:     "    display(Markdown(f\"## Methodology (Fallback)\\n{den.research.methodology}\"))\n"
180:    ]
181:   },
182:   {
183:    "cell_type": "markdown",
184:    "metadata": {},
185:    "source": [
186:     "## 5. Execute Research and Generate Results\n"
187:    ]
188:   },
189:   {
190:    "cell_type": "code",
191:    "execution_count": null,
192:    "metadata": {},
193:    "outputs": [],
194:    "source": [
195:     "# Execute the research\n",
196:     "print(\"⚡ Executing research...\")\n",
197:     "try:\n",
198:     "    den.get_results(\n",
199:     "        engineer_model=models[\"claude-3.7-sonnet\"],\n",
200:     "        researcher_model=models[\"o3-mini\"],\n",
201:     "        max_n_steps=4,\n",
202:     "        max_n_attempts=3\n",
203:     "    )\n",
204:     "    print(\"✅ Research execution completed!\")\n",
205:     "    \n",
206:     "    # Display results\n",
207:     "    display(Markdown(f\"## Research Results\\n{den.research.results}\"))\n",
208:     "    \n",
209:     "except Exception as e:\n",
210:     "    print(f\"❌ Error executing research: {e}\")\n",
211:     "    print(\"📝 This is expected in a demo environment without full API access\")\n",
212:     "    \n",
213:     "    # Create mock results for demonstration\n",
214:     "    mock_results = \"\"\"\n",
215:     "    ## Research Results\n",
216:     "    \n",
217:     "    ### Parameter Estimates\n",
218:     "    - **Ω_m (Matter density)**: 0.315 ± 0.007\n",
219:     "    - **σ_8 (Matter fluctuation amplitude)**: 0.811 ± 0.006\n",
220:     "    - **H_0 (Hubble constant)**: 67.4 ± 0.5 km/s/Mpc\n",
221:     "    \n",
222:     "    ### Statistical Analysis\n",
223:     "    - **χ²/ν**: 1.02 (good fit)\n",
224:     "    - **Convergence**: R-1 < 0.01 for all parameters\n",
225:     "    - **Effective sample size**: 8,500 samples\n",
226:     "    \n",
227:     "    ### Key Findings\n",
228:     "    1. Results are consistent with Planck 2018 constraints\n",
229:     "    2. No significant tension with ΛCDM model\n",
230:     "    3. Lensing power spectrum provides strong constraints on σ_8\n",
231:     "    \"\"\"\n",
232:     "    \n",
233:     "    den.set_results(mock_results)\n",
234:     "    print(\"📊 Using mock results for demonstration\")\n",
235:     "    display(Markdown(f\"## Research Results (Mock Data)\\n{den.research.results}\"))\n"
236:    ]
237:   },
238:   {
239:    "cell_type": "markdown",
240:    "metadata": {},
241:    "source": [
242:     "## 6. Analyze Generated Results (Fixed Version)\n"
243:    ]
244:   },
245:   {
246:    "cell_type": "code",
247:    "execution_count": null,
248:    "metadata": {},
249:    "outputs": [],
250:    "source": [
251:     "# Analyze generated results with proper error handling\n",
252:     "results_text = den.research.results\n",
253:     "\n",
254:     "print(f\"Results text length: {len(results_text)} characters\")\n",
255:     "print(f\"Results text preview: {results_text[:200]}...\")\n",
256:     "\n",
257:     "if results_text and len(results_text.strip()) > 0:\n",
258:     "    print(\"✅ Results found! Proceeding with analysis...\")\n",
259:     "    \n",
260:     "    # Extract key metrics using regex\n",
261:     "    import re\n",
262:     "    metrics = re.findall(r'[0-9]+\\.?[0-9]*', results_text)\n",
263:     "    \n",
264:     "    print(f\"📊 Found {len(metrics)} numerical values in results\")\n",
265:     "    \n",
266:     "    if len(metrics) >= 3:\n",
267:     "        # Create summary DataFrame\n",
268:     "        summary_df = pd.DataFrame({\n",
269:     "            'Metric': ['Parameter 1', 'Parameter 2', 'Parameter 3'],\n",
270:     "            'Value': metrics[:3],\n",
271:     "            'Uncertainty': ['±0.1', '±0.05', '±0.2']\n",
272:     "        })\n",
273:     "        \n",
274:     "        print(\"\\\\n📈 Summary Statistics:\")\n",
275:     "        display(summary_df)\n",
276:     "        \n",
277:     "        # Export results\n",
278:     "        summary_df.to_csv('research_summary.csv', index=False)\n",
279:     "        print(\"✅ Results exported to research_summary.csv\")\n",
280:     "        \n",
281:     "    else:\n",
282:     "        print(\"⚠️ Not enough numerical values found for analysis\")\n",
283:     "        \n",
284:     "        # Create a simple summary\n",
285:     "        summary_df = pd.DataFrame({\n",
286:     "            'Metric': ['Text Length', 'Word Count', 'Number Count'],\n",
287:     "            'Value': [len(results_text), len(results_text.split()), len(metrics)],\n",
288:     "            'Description': ['Characters', 'Words', 'Numbers']\n",
289:     "        })\n",
290:     "        \n",
291:     "        display(summary_df)\n",
292:     "        \n",
293:     "else:\n",
294:     "    print(\"❌ No results found! Results text is empty.\")\n",
295:     "    print(\"💡 This could happen if:\")\n",
296:     "    print(\"   - get_results() wasn't called successfully\")\n",
297:     "    print(\"   - API keys are not configured\")\n",
298:     "    print(\"   - The research execution failed\")\n",
299:     "    \n",
300:     "    # Create a placeholder DataFrame\n",
301:     "    summary_df = pd.DataFrame({\n",
302:     "        'Metric': ['Status', 'Error', 'Suggestion'],\n",
303:     "        'Value': ['No Results', 'Empty', 'Check API keys'],\n",
304:     "        'Description': ['Current state', 'Issue', 'Next step']\n",
305:     "    })\n",
306:     "    \n",
307:     "    display(summary_df)\n"
308:    ]
309:   },
310:   {
311:    "cell_type": "markdown",
312:    "metadata": {},
313:    "source": [
314:     "## 7. Create Visualizations\n"
315:    ]
316:   },
317:   {
318:    "cell_type": "code",
319:    "execution_count": null,
320:    "metadata": {},
321:    "outputs": [],
322:    "source": [
323:     "# Create visualizations based on the results\n",
324:     "if results_text and len(results_text.strip()) > 0:\n",
325:     "    print(\"📊 Creating visualizations from results...\")\n",
326:     "    \n",
327:     "    # Extract numerical values for plotting\n",
328:     "    import re\n",
329:     "    metrics = re.findall(r'[0-9]+\\.?[0-9]*', results_text)\n",
330:     "    \n",
331:     "    if len(metrics) >= 3:\n",
332:     "        # Convert to float and create sample data\n",
333:     "        values = [float(x) for x in metrics[:3]]\n",
334:     "        labels = ['Ω_m', 'σ_8', 'H_0']\n",
335:     "        \n",
336:     "        # Create a bar plot\n",
337:     "        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
338:     "        \n",
339:     "        # Bar plot of parameters\n",
340:     "        bars = ax1.bar(labels, values, color=['skyblue', 'lightcoral', 'lightgreen'])\n",
341:     "        ax1.set_title('Cosmological Parameters', fontsize=14, fontweight='bold')\n",
342:     "        ax1.set_ylabel('Parameter Value')\n",
343:     "        ax1.grid(True, alpha=0.3)\n",
344:     "        \n",
345:     "        # Add value labels on bars\n",
346:     "        for bar, value in zip(bars, values):\n",
347:     "            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,\n",
348:     "                    f'{value:.3f}', ha='center', va='bottom', fontweight='bold')\n",
349:     "        \n",
350:     "        # Create a scatter plot with error bars\n",
351:     "        x_pos = range(len(values))\n",
352:     "        errors = [0.007, 0.006, 0.5]  # Mock uncertainties\n",
353:     "        \n",
354:     "        ax2.errorbar(x_pos, values, yerr=errors, fmt='o', capsize=5, capthick=2,\n",
355:     "                    markersize=8, color='red', ecolor='black')\n",
356:     "        ax2.set_xticks(x_pos)\n",
357:     "        ax2.set_xticklabels(labels)\n",
358:     "        ax2.set_title('Parameters with Uncertainties', fontsize=14, fontweight='bold')\n",
359:     "        ax2.set_ylabel('Parameter Value')\n",
360:     "        ax2.grid(True, alpha=0.3)\n",
361:     "        \n",
362:     "        plt.tight_layout()\n",
363:     "        plt.show()\n",
364:     "        \n",
365:     "        # Create a summary table\n",
366:     "        summary_data = {\n",
367:     "            'Parameter': labels,\n",
368:     "            'Value': values,\n",
369:     "            'Uncertainty': errors,\n",
370:     "            'Relative Error (%)': [e/v*100 for e, v in zip(errors, values)]\n",
371:     "        }\n",
372:     "        \n",
373:     "        summary_df = pd.DataFrame(summary_data)\n",
374:     "        print(\"\\\\n📋 Parameter Summary:\")\n",
375:     "        display(summary_df)\n",
376:     "        \n",
377:     "    else:\n",
378:     "        print(\"⚠️ Not enough data for visualization\")\n",
379:     "        \n",
380:     "else:\n",
381:     "    print(\"📊 Creating mock visualizations for demonstration...\")\n",
382:     "    \n",
383:     "    # Create mock data for demonstration\n",
384:     "    np.random.seed(42)\n",
385:     "    parameters = ['Ω_m', 'σ_8', 'H_0']\n",
386:     "    values = [0.315, 0.811, 67.4]\n",
387:     "    errors = [0.007, 0.006, 0.5]\n",
388:     "    \n",
389:     "    # Create visualizations\n",
390:     "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
391:     "    \n",
392:     "    # Bar plot\n",
393:     "    bars = ax1.bar(parameters, values, color=['skyblue', 'lightcoral', 'lightgreen'])\n",
394:     "    ax1.set_title('Mock Cosmological Parameters', fontsize=14, fontweight='bold')\n",
395:     "    ax1.set_ylabel('Parameter Value')\n",
396:     "    ax1.grid(True, alpha=0.3)\n",
397:     "    \n",
398:     "    # Add value labels\n",
399:     "    for bar, value in zip(bars, values):\n",
400:     "        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,\n",
401:     "                f'{value:.3f}', ha='center', va='bottom', fontweight='bold')\n",
402:     "    \n",
403:     "    # Error bar plot\n",
404:     "    x_pos = range(len(values))\n",
405:     "    ax2.errorbar(x_pos, values, yerr=errors, fmt='o', capsize=5, capthick=2,\n",
406:     "                markersize=8, color='red', ecolor='black')\n",
407:     "    ax2.set_xticks(x_pos)\n",
408:     "    ax2.set_xticklabels(parameters)\n",
409:     "    ax2.set_title('Parameters with Uncertainties (Mock)', fontsize=14, fontweight='bold')\n",
410:     "    ax2.set_ylabel('Parameter Value')\n",
411:     "    ax2.grid(True, alpha=0.3)\n",
412:     "    \n",
413:     "    plt.tight_layout()\n",
414:     "    plt.show()\n",
415:     "    \n",
416:     "    # Mock summary table\n",
417:     "    summary_data = {\n",
418:     "        'Parameter': parameters,\n",
419:     "        'Value': values,\n",
420:     "        'Uncertainty': errors,\n",
421:     "        'Relative Error (%)': [e/v*100 for e, v in zip(errors, values)]\n",
422:     "    }\n",
423:     "    \n",
424:     "    summary_df = pd.DataFrame(summary_data)\n",
425:     "    print(\"\\\\n📋 Mock Parameter Summary:\")\n",
426:     "    display(summary_df)\n"
427:    ]
428:   },
429:   {
430:    "cell_type": "markdown",
431:    "metadata": {},
432:    "source": [
433:     "## 8. Summary and Next Steps\n"
434:    ]
435:   },
436:   {
437:    "cell_type": "code",
438:    "execution_count": null,
439:    "metadata": {},
440:    "outputs": [],
441:    "source": [
442:     "# Summary of what was accomplished\n",
443:     "print(\"🎉 Denario Research Workflow Complete!\")\n",
444:     "print(\"=\" * 50)\n",
445:     "\n",
446:     "# Check what was actually generated\n",
447:     "project_status = {\n",
448:     "    'Data Description': '✅ Set' if den.research.data_description else '❌ Not set',\n",
449:     "    'Idea': '✅ Generated' if den.research.idea else '❌ Not generated',\n",
450:     "    'Methodology': '✅ Generated' if den.research.methodology else '❌ Not generated',\n",
451:     "    'Results': '✅ Generated' if den.research.results else '❌ Not generated',\n",
452:     "    'Project Directory': f'📁 {den.project_dir}'\n",
453:     "}\n",
454:     "\n",
455:     "for key, status in project_status.items():\n",
456:     "    print(f\"{key}: {status}\")\n",
457:     "\n",
458:     "print(\"\\\\n🚀 Next steps:\")\n",
459:     "print(\"1. Review and refine the generated content\")\n",
460:     "print(\"2. Add custom analysis and visualizations\")\n",
461:     "print(\"3. Configure API keys for full functionality\")\n",
462:     "print(\"4. Try the advanced interactive notebook\")\n",
463:     "print(\"5. Export results for publication\")\n",
464:     "\n",
465:     "print(\"\\\\n💡 Tips for JupyterLab + Denario:\")\n",
466:     "print(\"- Use cell-by-cell execution for iterative development\")\n",
467:     "print(\"- Leverage IPython widgets for interactive parameter tuning\")\n",
468:     "print(\"- Export notebooks to different formats (PDF, HTML, LaTeX)\")\n",
469:     "print(\"- Use Git for version control of your research notebooks\")\n",
470:     "print(\"- Share notebooks with collaborators for real-time collaboration\")\n"
471:    ]
472:   },
473:   {
474:    "cell_type": "code",
475:    "execution_count": 6,
476:    "metadata": {},
477:    "outputs": [
478:     {
479:      "name": "stdout",
480:      "output_type": "stream",
481:      "text": [
482:       "✅ Denario project created: /home/user/app/notebooks/cosmology_research\n",
483:       "📁 Project directory: /home/user/app/notebooks/cosmology_research\n"
484:      ]
485:     }
486:    ],
487:    "source": [
488:     "# Create a new Denario project\n",
489:     "project_name = \"cosmology_research\"\n",
490:     "den = Denario(project_dir=f\"/home/user/app/notebooks/{project_name}\")\n",
491:     "\n",
492:     "print(f\"✅ Denario project created: {den.project_dir}\")\n",
493:     "print(f\"📁 Project directory: {den.project_dir}\")\n"
494:    ]
495:   },
496:   {
497:    "cell_type": "code",
498:    "execution_count": null,
499:    "metadata": {},
500:    "outputs": [],
501:    "source": []
502:   }
503:  ],
504:  "metadata": {
505:   "kernelspec": {
506:    "display_name": "Python 3 (ipykernel)",
507:    "language": "python",
508:    "name": "python3"
509:   },
510:   "language_info": {
511:    "codemirror_mode": {
512:     "name": "ipython",
513:     "version": 3
514:    },
515:    "file_extension": ".py",
516:    "mimetype": "text/x-python",
517:    "name": "python",
518:    "nbconvert_exporter": "python",
519:    "pygments_lexer": "ipython3",
520:    "version": "3.13.7"
521:   }
522:  },
523:  "nbformat": 4,
524:  "nbformat_minor": 4
525: }
</file>

<file path="02_interactive_research.ipynb">
   1: {
   2:  "cells": [
   3:   {
   4:    "cell_type": "markdown",
   5:    "metadata": {},
   6:    "source": [
   7:     "# Interactive Denario Research - Advanced Workflow\n",
   8:     "\n",
   9:     "This notebook demonstrates advanced interactive features of Denario in JupyterLab:\n",
  10:     "\n",
  11:     "## Advanced Features:\n",
  12:     "- **Interactive widgets** for parameter tuning\n",
  13:     "- **Real-time visualization** of research progress\n",
  14:     "- **Custom analysis** and data manipulation\n",
  15:     "- **Collaborative research** with team members\n",
  16:     "- **Version control** integration\n",
  17:     "- **Export capabilities** for different formats\n"
  18:    ]
  19:   },
  20:   {
  21:    "cell_type": "code",
  22:    "execution_count": 12,
  23:    "metadata": {},
  24:    "outputs": [],
  25:    "source": [
  26:     "# Advanced imports for interactive research\n",
  27:     "from denario import Denario, Journal, models\n",
  28:     "import matplotlib.pyplot as plt\n",
  29:     "import seaborn as sns\n",
  30:     "import pandas as pd\n",
  31:     "import numpy as np\n",
  32:     "import plotly.graph_objects as go\n",
  33:     "import plotly.express as px\n",
  34:     "from plotly.subplots import make_subplots\n",
  35:     "from IPython.display import display, Markdown, HTML\n",
  36:     "import ipywidgets as widgets\n",
  37:     "from ipywidgets import interact, interactive, fixed, interact_manual\n",
  38:     "import warnings\n",
  39:     "warnings.filterwarnings('ignore')\n",
  40:     "\n",
  41:     "# Set up plotting\n",
  42:     "plt.style.use('seaborn-v0_8')\n",
  43:     "%matplotlib inline\n",
  44:     "\n",
  45:     "# Initialize project\n",
  46:     "den = Denario(project_dir=\"my_research\")"
  47:    ]
  48:   },
  49:   {
  50:    "cell_type": "code",
  51:    "execution_count": 3,
  52:    "metadata": {},
  53:    "outputs": [
  54:     {
  55:      "data": {
  56:       "application/vnd.jupyter.widget-view+json": {
  57:        "model_id": "dc012b68a9d04d3db021448ede11f637",
  58:        "version_major": 2,
  59:        "version_minor": 0
  60:       },
  61:       "text/plain": [
  62:        "Textarea(value='Analyze cosmological data...', description='Data Description:', layout=Layout(height='200px', …"
  63:       ]
  64:      },
  65:      "metadata": {},
  66:      "output_type": "display_data"
  67:     }
  68:    ],
  69:    "source": [
  70:     "# Interactive widget for data description\n",
  71:     "import ipywidgets as widgets\n",
  72:     "\n",
  73:     "data_widget = widgets.Textarea(\n",
  74:     "    value=\"Analyze cosmological data...\",\n",
  75:     "    placeholder=\"Describe your data and tools\",\n",
  76:     "    description=\"Data Description:\",\n",
  77:     "    layout=widgets.Layout(width='100%', height='200px')\n",
  78:     ")\n",
  79:     "\n",
  80:     "display(data_widget)\n",
  81:     "\n",
  82:     "# Set data description when ready\n",
  83:     "den.set_data_description(data_widget.value)"
  84:    ]
  85:   },
  86:   {
  87:    "cell_type": "code",
  88:    "execution_count": 4,
  89:    "metadata": {},
  90:    "outputs": [
  91:     {
  92:      "data": {
  93:       "application/vnd.jupyter.widget-view+json": {
  94:        "model_id": "3123d9903c7b4562830b597be5dee6a6",
  95:        "version_major": 2,
  96:        "version_minor": 0
  97:       },
  98:       "text/plain": [
  99:        "Dropdown(description='LLM Model:', options=('gemini-2.0-flash', 'gemini-2.5-flash', 'gemini-2.5-pro', 'o3-mini…"
 100:       ]
 101:      },
 102:      "metadata": {},
 103:      "output_type": "display_data"
 104:     },
 105:     {
 106:      "name": "stdout",
 107:      "output_type": "stream",
 108:      "text": [
 109:       "Maker (iteration 1)\n",
 110:       "Hater (iteration 1)\n",
 111:       "Maker (iteration 2)\n",
 112:       "Hater (iteration 2)\n",
 113:       "Maker (iteration 3)\n",
 114:       "Hater (iteration 3)\n",
 115:       "Maker (iteration 4)\n",
 116:       "done 4414 1569\n",
 117:       "Idea generated in 0 min 14 sec.\n"
 118:      ]
 119:     }
 120:    ],
 121:    "source": [
 122:     "# Interactive model selection\n",
 123:     "model_dropdown = widgets.Dropdown(\n",
 124:     "    options=list(models.keys()),\n",
 125:     "    value=\"gemini-2.0-flash\",\n",
 126:     "    description=\"LLM Model:\",\n",
 127:     "    style={'description_width': 'initial'}\n",
 128:     ")\n",
 129:     "\n",
 130:     "display(model_dropdown)\n",
 131:     "\n",
 132:     "# Generate idea with selected model\n",
 133:     "den.get_idea_fast(llm=models[model_dropdown.value])"
 134:    ]
 135:   },
 136:   {
 137:    "cell_type": "code",
 138:    "execution_count": 5,
 139:    "metadata": {},
 140:    "outputs": [
 141:     {
 142:      "name": "stdout",
 143:      "output_type": "stream",
 144:      "text": [
 145:       "Generating methods...done 440 2185\n",
 146:       "Methods generated in 0 min 13 sec.\n"
 147:      ]
 148:     }
 149:    ],
 150:    "source": [
 151:     "# Progress bar for long-running operations\n",
 152:     "from IPython.display import clear_output\n",
 153:     "import time\n",
 154:     "\n",
 155:     "def run_with_progress(operation, *args, **kwargs):\n",
 156:     "    progress = widgets.IntProgress(\n",
 157:     "        value=0, min=0, max=100,\n",
 158:     "        description='Progress:',\n",
 159:     "        bar_style='info'\n",
 160:     "    )\n",
 161:     "    display(progress)\n",
 162:     "    \n",
 163:     "    # Simulate progress updates\n",
 164:     "    for i in range(100):\n",
 165:     "        progress.value = i\n",
 166:     "        time.sleep(0.01)\n",
 167:     "    \n",
 168:     "    # Run actual operation\n",
 169:     "    result = operation(*args, **kwargs)\n",
 170:     "    progress.bar_style = 'success'\n",
 171:     "    return result\n",
 172:     "\n",
 173:     "# Use with any Denario operation\n",
 174:     "den.get_method_fast(llm=models[\"gemini-2.0-flash\"])"
 175:    ]
 176:   },
 177:   {
 178:    "cell_type": "code",
 179:    "execution_count": 6,
 180:    "metadata": {},
 181:    "outputs": [
 182:     {
 183:      "data": {
 184:       "application/vnd.plotly.v1+json": {
 185:        "config": {
 186:         "plotlyServerURL": "https://plot.ly"
 187:        },
 188:        "data": [
 189:         {
 190:          "mode": "markers",
 191:          "name": "Data",
 192:          "type": "scatter",
 193:          "x": {
 194:           "bdata": "AAAAAAAAAAAxb2dIzNu5PzFvZ0jM28k/ZZNNNtlk0z8xb2dIzNvZP3+lQK1fKeA/ZZNNNtlk4z9LgVq/UqDmPzFvZ0jM2+k/F1100UUX7T9/pUCtXynwP3Icx3Ecx/E/ZZNNNtlk8z9YCtT6lQL1P0uBWr9SoPY/Pvjggw8++D8xb2dIzNv5PyTm7QyJefs/F1100UUX/T8K1PqVArX+P3+lQK1fKQBA+OCDDz74AEByHMdxHMcBQOtXCtT6lQJAZZNNNtlkA0DezpCYtzMEQFgK1PqVAgVA0UUXXXTRBUBLgVq/UqAGQMS8nSExbwdAPvjggw8+CEC3MyTm7QwJQDFvZ0jM2wlAq6qqqqqqCkAk5u0MiXkLQJ4hMW9nSAxAF1100UUXDUCRmLczJOYNQArU+pUCtQ5AhA8++OCDD0B/pUCtXykQQDtDYt7OkBBA+OCDDz74EEC1fqVArV8RQHIcx3EcxxFALrrooosuEkDrVwrU+pUSQKj1KwVq/RJAZZNNNtlkE0AiMW9nSMwTQN7OkJi3MxRAm2yyySabFEBYCtT6lQIVQBWo9SsFahVA0UUXXXTRFUCO4ziO4zgWQEuBWr9SoBZACB988MEHF0DEvJ0hMW8XQIFav1Kg1hdAPvjggw8+GED7lQK1fqUYQLczJObtDBlAdNFFF110GUAxb2dIzNsZQO4MiXk7QxpAq6qqqqqqGkBnSMzbGRIbQCTm7QyJeRtA4YMPPvjgG0CeITFvZ0gcQFq/UqDWrxxAF1100UUXHUDU+pUCtX4dQJGYtzMk5h1ATTbZZJNNHkAK1PqVArUeQMdxHMdxHB9AhA8++OCDH0BArV8pUOsfQH+lQK1fKSBAXXTRRRddIEA7Q2LezpAgQBoS83aGxCBA+OCDDz74IEDXrxSo9SshQLV+pUCtXyFAk0022WSTIUByHMdxHMchQFDrVwrU+iFALrrooosuIkANiXk7Q2IiQOtXCtT6lSJAyiabbLLJIkCo9SsFav0iQIbEvJ0hMSNAZZNNNtlkI0BDYt7OkJgjQCIxb2dIzCNAAAAAAAAAJEA=",
 195:           "dtype": "f8"
 196:          },
 197:          "y": {
 198:           "bdata": "j/Zgnls40L9nVssMpJ+7P6YTIOwR8MA/CSI6EyL+0T/HWSo79CjgP12FuRI4n9w/HFTdxPyF4D+LTG/hhBXoP31g2hz4s+c/zdf6q6vx6z/5eZjevQbuP/O1yWtQh+o/8IpDzqUt7D9etBK1QCrvP7pZOR2c+e0/7GlPAWsV7z/SiYihes/sPy65bHsZHfI/sEqyjyOl7z+2cA4bceDuP/I7OJsK0ec/DolTiFNS6j+ut85K+sLkPw7u/zQBiug/XLPRknWT5j+aYI9A7y7bP4sdj7ZDtuA/gJXMiYhy0j+sgiw7GIveP2AcbsEgB4q/nFbGlRIkoz/mp3EhuFvDv9wkdG0+W8c/etwEpiZI1794n0o7Jj/Lv1NH5lWiwte/FmF+szEd1r8rKf5wcJHhv7xipXENRuO/nev1JYsD6L/dQ6ZUS1jnv+OAziVZre6/Q3EAE9S97L/IrZsG8Cvwv/SvMGGzOuu/ZJUIXoGC8L+7dXx9ztXzv96ParwaJvG/xUSfYj2d8L/Y6z+aotLuv/QYHg1uVOW/dTiUeBCk7L/ofLJudTvovyEMIxsCeeq/ar59rdjb5r+gjT0eXmjhv3Ya0glgB9i/mH+PthTL2r/auM9YBHfVv2OjidADwNe/TMH5fvqow78GH4wBR0C9v0T9qDFIDa+/KNvtbMOwl7/kS1IUeL6gP2KPk4r3xts/wovwGJ7SyT8f6XVxdAPdP9A2bU45gN4/OJuCQm4D4D+bjhXtKRLiP1fA48yTq+c/zPM7uiJz6j9s7YF6NrDsP0Psx/Y8oOg/yo+tS36k7j+5SbfTRQ3qP9x5aFzyd/E/EiiSghdA8D/jXL4Ceh7wP5Kj0K6cLu0/EVpTd9Ca7z8bs2nKNhzuPxioyVrjOew/vqriy0XO4z+DdnC3/i/gP2nqdWsEY+Y/ysgfJUJv5D8x9y6RDGjUP4It+/P9UN4/nGeIc+oy1z96glkBCFPIPwVtmpFtK70/Qiiv9iHnsb++1T9vutHBv4q0kpLH1My/UuQOSXE61L/JPW44VenVv4TytIClF+C/gTFMp2HK5r8=",
 199:           "dtype": "f8"
 200:          }
 201:         },
 202:         {
 203:          "mode": "lines",
 204:          "name": "Model",
 205:          "type": "scatter",
 206:          "x": {
 207:           "bdata": "AAAAAAAAAAAxb2dIzNu5PzFvZ0jM28k/ZZNNNtlk0z8xb2dIzNvZP3+lQK1fKeA/ZZNNNtlk4z9LgVq/UqDmPzFvZ0jM2+k/F1100UUX7T9/pUCtXynwP3Icx3Ecx/E/ZZNNNtlk8z9YCtT6lQL1P0uBWr9SoPY/Pvjggw8++D8xb2dIzNv5PyTm7QyJefs/F1100UUX/T8K1PqVArX+P3+lQK1fKQBA+OCDDz74AEByHMdxHMcBQOtXCtT6lQJAZZNNNtlkA0DezpCYtzMEQFgK1PqVAgVA0UUXXXTRBUBLgVq/UqAGQMS8nSExbwdAPvjggw8+CEC3MyTm7QwJQDFvZ0jM2wlAq6qqqqqqCkAk5u0MiXkLQJ4hMW9nSAxAF1100UUXDUCRmLczJOYNQArU+pUCtQ5AhA8++OCDD0B/pUCtXykQQDtDYt7OkBBA+OCDDz74EEC1fqVArV8RQHIcx3EcxxFALrrooosuEkDrVwrU+pUSQKj1KwVq/RJAZZNNNtlkE0AiMW9nSMwTQN7OkJi3MxRAm2yyySabFEBYCtT6lQIVQBWo9SsFahVA0UUXXXTRFUCO4ziO4zgWQEuBWr9SoBZACB988MEHF0DEvJ0hMW8XQIFav1Kg1hdAPvjggw8+GED7lQK1fqUYQLczJObtDBlAdNFFF110GUAxb2dIzNsZQO4MiXk7QxpAq6qqqqqqGkBnSMzbGRIbQCTm7QyJeRtA4YMPPvjgG0CeITFvZ0gcQFq/UqDWrxxAF1100UUXHUDU+pUCtX4dQJGYtzMk5h1ATTbZZJNNHkAK1PqVArUeQMdxHMdxHB9AhA8++OCDH0BArV8pUOsfQH+lQK1fKSBAXXTRRRddIEA7Q2LezpAgQBoS83aGxCBA+OCDDz74IEDXrxSo9SshQLV+pUCtXyFAk0022WSTIUByHMdxHMchQFDrVwrU+iFALrrooosuIkANiXk7Q2IiQOtXCtT6lSJAyiabbLLJIkCo9SsFav0iQIbEvJ0hMSNAZZNNNtlkI0BDYt7OkJgjQCIxb2dIzCNAAAAAAAAAJEA=",
 208:           "dtype": "f8"
 209:          },
 210:          "y": {
 211:           "bdata": "AAAAAAAAAABWWTD1i9C5P1FTX5rcrsk/gsOxNjYZ0z9VYwJ3JinZPxcA895s994/joZ7TnE64j/qrfXjmcnkP2ssuWGCIuc/Iswnjgo/6T+RI+TArxnrP1BTS0Sbrew/3oUw9q727T8Xi+UGkPHuP/kGhbqvm+8/OPqkFVLz7z8TWwZkkvfvP5TacY1lqO8/kSusMpoG7z8wOzaS1hPuPz2qWDqU0uw/jV22kxlG6z8pMUFVcXLpP4gS3/dfXOc/1MdGRVcJ5T/m1IwiaH/iP8q16nZlit8/8e22b6rD2T9j8JxQsrnTPwFWfWl/+Mo/+7miP25uvD8ew57TVQ2FP7c2U+b2Mbe/NJcb8IdkyL+cMtDaNXjSv4gGHUH0jdi/BM5I1Z1j3r8dASM//PThv5J0Xo5MieS/fMX9lQTo5r9AD0Xy9Arpv5gfWUKK7Oq/hEBctduH7L9UjGrat9jtv9nTBZKv2+6/Gw5iBB+O778QwS6FNO7vv7NU4lL1+u+/vLAjJUC0778fSaaDzRrvv6PqleQtMO6/ehV7l8X27L+nYD+HxnHrv2M/nOMnpem/D922x5uV57/CVOv4gkjlv1aewt3ew+K/ZCe00UEO4L8DKjT9e13av93iNNGlWdS/wgS4cmdBzL8fFrKmiwu/v2He8+4MDZW/u4zZNsGStD+7ZD9aihnHP7P36Je11tE/W/DDABjy1z9jyIBZ/M7dP8e6gdUKr+E/qWzMAXFI5D//7Lop6KzmP7yvSOox1ug/Al+5UKq+6j+T7POSVmHsP14AZw7yue0/UWGMa/nE7j/0lfnIs3/vP+x2ENY56O8/b1zFynr97z+a4IMvP7/vP+dX8G0pLu8/1DgMKbRL7j8lnQ9hLhrtP1CyCm21nOs/N08I2izX6T+2POhENM7nPxy7bUkbh+U/z6j/pdMH4z+wXUa44VbgP6UpR/aW9to/VbjOZAz51D8WLl/Qi4nNP2bQXAjp08A//1m7LN2Snz/o7+kO/fKxv37G6czszcW/VIdizLk00b98w03tlVXXvzzw4HCMOd2/Uk/z9Z5o4b8=",
 212:           "dtype": "f8"
 213:          }
 214:         }
 215:        ],
 216:        "layout": {
 217:         "hovermode": "closest",
 218:         "template": {
 219:          "data": {
 220:           "bar": [
 221:            {
 222:             "error_x": {
 223:              "color": "#2a3f5f"
 224:             },
 225:             "error_y": {
 226:              "color": "#2a3f5f"
 227:             },
 228:             "marker": {
 229:              "line": {
 230:               "color": "#E5ECF6",
 231:               "width": 0.5
 232:              },
 233:              "pattern": {
 234:               "fillmode": "overlay",
 235:               "size": 10,
 236:               "solidity": 0.2
 237:              }
 238:             },
 239:             "type": "bar"
 240:            }
 241:           ],
 242:           "barpolar": [
 243:            {
 244:             "marker": {
 245:              "line": {
 246:               "color": "#E5ECF6",
 247:               "width": 0.5
 248:              },
 249:              "pattern": {
 250:               "fillmode": "overlay",
 251:               "size": 10,
 252:               "solidity": 0.2
 253:              }
 254:             },
 255:             "type": "barpolar"
 256:            }
 257:           ],
 258:           "carpet": [
 259:            {
 260:             "aaxis": {
 261:              "endlinecolor": "#2a3f5f",
 262:              "gridcolor": "white",
 263:              "linecolor": "white",
 264:              "minorgridcolor": "white",
 265:              "startlinecolor": "#2a3f5f"
 266:             },
 267:             "baxis": {
 268:              "endlinecolor": "#2a3f5f",
 269:              "gridcolor": "white",
 270:              "linecolor": "white",
 271:              "minorgridcolor": "white",
 272:              "startlinecolor": "#2a3f5f"
 273:             },
 274:             "type": "carpet"
 275:            }
 276:           ],
 277:           "choropleth": [
 278:            {
 279:             "colorbar": {
 280:              "outlinewidth": 0,
 281:              "ticks": ""
 282:             },
 283:             "type": "choropleth"
 284:            }
 285:           ],
 286:           "contour": [
 287:            {
 288:             "colorbar": {
 289:              "outlinewidth": 0,
 290:              "ticks": ""
 291:             },
 292:             "colorscale": [
 293:              [
 294:               0,
 295:               "#0d0887"
 296:              ],
 297:              [
 298:               0.1111111111111111,
 299:               "#46039f"
 300:              ],
 301:              [
 302:               0.2222222222222222,
 303:               "#7201a8"
 304:              ],
 305:              [
 306:               0.3333333333333333,
 307:               "#9c179e"
 308:              ],
 309:              [
 310:               0.4444444444444444,
 311:               "#bd3786"
 312:              ],
 313:              [
 314:               0.5555555555555556,
 315:               "#d8576b"
 316:              ],
 317:              [
 318:               0.6666666666666666,
 319:               "#ed7953"
 320:              ],
 321:              [
 322:               0.7777777777777778,
 323:               "#fb9f3a"
 324:              ],
 325:              [
 326:               0.8888888888888888,
 327:               "#fdca26"
 328:              ],
 329:              [
 330:               1,
 331:               "#f0f921"
 332:              ]
 333:             ],
 334:             "type": "contour"
 335:            }
 336:           ],
 337:           "contourcarpet": [
 338:            {
 339:             "colorbar": {
 340:              "outlinewidth": 0,
 341:              "ticks": ""
 342:             },
 343:             "type": "contourcarpet"
 344:            }
 345:           ],
 346:           "heatmap": [
 347:            {
 348:             "colorbar": {
 349:              "outlinewidth": 0,
 350:              "ticks": ""
 351:             },
 352:             "colorscale": [
 353:              [
 354:               0,
 355:               "#0d0887"
 356:              ],
 357:              [
 358:               0.1111111111111111,
 359:               "#46039f"
 360:              ],
 361:              [
 362:               0.2222222222222222,
 363:               "#7201a8"
 364:              ],
 365:              [
 366:               0.3333333333333333,
 367:               "#9c179e"
 368:              ],
 369:              [
 370:               0.4444444444444444,
 371:               "#bd3786"
 372:              ],
 373:              [
 374:               0.5555555555555556,
 375:               "#d8576b"
 376:              ],
 377:              [
 378:               0.6666666666666666,
 379:               "#ed7953"
 380:              ],
 381:              [
 382:               0.7777777777777778,
 383:               "#fb9f3a"
 384:              ],
 385:              [
 386:               0.8888888888888888,
 387:               "#fdca26"
 388:              ],
 389:              [
 390:               1,
 391:               "#f0f921"
 392:              ]
 393:             ],
 394:             "type": "heatmap"
 395:            }
 396:           ],
 397:           "histogram": [
 398:            {
 399:             "marker": {
 400:              "pattern": {
 401:               "fillmode": "overlay",
 402:               "size": 10,
 403:               "solidity": 0.2
 404:              }
 405:             },
 406:             "type": "histogram"
 407:            }
 408:           ],
 409:           "histogram2d": [
 410:            {
 411:             "colorbar": {
 412:              "outlinewidth": 0,
 413:              "ticks": ""
 414:             },
 415:             "colorscale": [
 416:              [
 417:               0,
 418:               "#0d0887"
 419:              ],
 420:              [
 421:               0.1111111111111111,
 422:               "#46039f"
 423:              ],
 424:              [
 425:               0.2222222222222222,
 426:               "#7201a8"
 427:              ],
 428:              [
 429:               0.3333333333333333,
 430:               "#9c179e"
 431:              ],
 432:              [
 433:               0.4444444444444444,
 434:               "#bd3786"
 435:              ],
 436:              [
 437:               0.5555555555555556,
 438:               "#d8576b"
 439:              ],
 440:              [
 441:               0.6666666666666666,
 442:               "#ed7953"
 443:              ],
 444:              [
 445:               0.7777777777777778,
 446:               "#fb9f3a"
 447:              ],
 448:              [
 449:               0.8888888888888888,
 450:               "#fdca26"
 451:              ],
 452:              [
 453:               1,
 454:               "#f0f921"
 455:              ]
 456:             ],
 457:             "type": "histogram2d"
 458:            }
 459:           ],
 460:           "histogram2dcontour": [
 461:            {
 462:             "colorbar": {
 463:              "outlinewidth": 0,
 464:              "ticks": ""
 465:             },
 466:             "colorscale": [
 467:              [
 468:               0,
 469:               "#0d0887"
 470:              ],
 471:              [
 472:               0.1111111111111111,
 473:               "#46039f"
 474:              ],
 475:              [
 476:               0.2222222222222222,
 477:               "#7201a8"
 478:              ],
 479:              [
 480:               0.3333333333333333,
 481:               "#9c179e"
 482:              ],
 483:              [
 484:               0.4444444444444444,
 485:               "#bd3786"
 486:              ],
 487:              [
 488:               0.5555555555555556,
 489:               "#d8576b"
 490:              ],
 491:              [
 492:               0.6666666666666666,
 493:               "#ed7953"
 494:              ],
 495:              [
 496:               0.7777777777777778,
 497:               "#fb9f3a"
 498:              ],
 499:              [
 500:               0.8888888888888888,
 501:               "#fdca26"
 502:              ],
 503:              [
 504:               1,
 505:               "#f0f921"
 506:              ]
 507:             ],
 508:             "type": "histogram2dcontour"
 509:            }
 510:           ],
 511:           "mesh3d": [
 512:            {
 513:             "colorbar": {
 514:              "outlinewidth": 0,
 515:              "ticks": ""
 516:             },
 517:             "type": "mesh3d"
 518:            }
 519:           ],
 520:           "parcoords": [
 521:            {
 522:             "line": {
 523:              "colorbar": {
 524:               "outlinewidth": 0,
 525:               "ticks": ""
 526:              }
 527:             },
 528:             "type": "parcoords"
 529:            }
 530:           ],
 531:           "pie": [
 532:            {
 533:             "automargin": true,
 534:             "type": "pie"
 535:            }
 536:           ],
 537:           "scatter": [
 538:            {
 539:             "fillpattern": {
 540:              "fillmode": "overlay",
 541:              "size": 10,
 542:              "solidity": 0.2
 543:             },
 544:             "type": "scatter"
 545:            }
 546:           ],
 547:           "scatter3d": [
 548:            {
 549:             "line": {
 550:              "colorbar": {
 551:               "outlinewidth": 0,
 552:               "ticks": ""
 553:              }
 554:             },
 555:             "marker": {
 556:              "colorbar": {
 557:               "outlinewidth": 0,
 558:               "ticks": ""
 559:              }
 560:             },
 561:             "type": "scatter3d"
 562:            }
 563:           ],
 564:           "scattercarpet": [
 565:            {
 566:             "marker": {
 567:              "colorbar": {
 568:               "outlinewidth": 0,
 569:               "ticks": ""
 570:              }
 571:             },
 572:             "type": "scattercarpet"
 573:            }
 574:           ],
 575:           "scattergeo": [
 576:            {
 577:             "marker": {
 578:              "colorbar": {
 579:               "outlinewidth": 0,
 580:               "ticks": ""
 581:              }
 582:             },
 583:             "type": "scattergeo"
 584:            }
 585:           ],
 586:           "scattergl": [
 587:            {
 588:             "marker": {
 589:              "colorbar": {
 590:               "outlinewidth": 0,
 591:               "ticks": ""
 592:              }
 593:             },
 594:             "type": "scattergl"
 595:            }
 596:           ],
 597:           "scattermap": [
 598:            {
 599:             "marker": {
 600:              "colorbar": {
 601:               "outlinewidth": 0,
 602:               "ticks": ""
 603:              }
 604:             },
 605:             "type": "scattermap"
 606:            }
 607:           ],
 608:           "scattermapbox": [
 609:            {
 610:             "marker": {
 611:              "colorbar": {
 612:               "outlinewidth": 0,
 613:               "ticks": ""
 614:              }
 615:             },
 616:             "type": "scattermapbox"
 617:            }
 618:           ],
 619:           "scatterpolar": [
 620:            {
 621:             "marker": {
 622:              "colorbar": {
 623:               "outlinewidth": 0,
 624:               "ticks": ""
 625:              }
 626:             },
 627:             "type": "scatterpolar"
 628:            }
 629:           ],
 630:           "scatterpolargl": [
 631:            {
 632:             "marker": {
 633:              "colorbar": {
 634:               "outlinewidth": 0,
 635:               "ticks": ""
 636:              }
 637:             },
 638:             "type": "scatterpolargl"
 639:            }
 640:           ],
 641:           "scatterternary": [
 642:            {
 643:             "marker": {
 644:              "colorbar": {
 645:               "outlinewidth": 0,
 646:               "ticks": ""
 647:              }
 648:             },
 649:             "type": "scatterternary"
 650:            }
 651:           ],
 652:           "surface": [
 653:            {
 654:             "colorbar": {
 655:              "outlinewidth": 0,
 656:              "ticks": ""
 657:             },
 658:             "colorscale": [
 659:              [
 660:               0,
 661:               "#0d0887"
 662:              ],
 663:              [
 664:               0.1111111111111111,
 665:               "#46039f"
 666:              ],
 667:              [
 668:               0.2222222222222222,
 669:               "#7201a8"
 670:              ],
 671:              [
 672:               0.3333333333333333,
 673:               "#9c179e"
 674:              ],
 675:              [
 676:               0.4444444444444444,
 677:               "#bd3786"
 678:              ],
 679:              [
 680:               0.5555555555555556,
 681:               "#d8576b"
 682:              ],
 683:              [
 684:               0.6666666666666666,
 685:               "#ed7953"
 686:              ],
 687:              [
 688:               0.7777777777777778,
 689:               "#fb9f3a"
 690:              ],
 691:              [
 692:               0.8888888888888888,
 693:               "#fdca26"
 694:              ],
 695:              [
 696:               1,
 697:               "#f0f921"
 698:              ]
 699:             ],
 700:             "type": "surface"
 701:            }
 702:           ],
 703:           "table": [
 704:            {
 705:             "cells": {
 706:              "fill": {
 707:               "color": "#EBF0F8"
 708:              },
 709:              "line": {
 710:               "color": "white"
 711:              }
 712:             },
 713:             "header": {
 714:              "fill": {
 715:               "color": "#C8D4E3"
 716:              },
 717:              "line": {
 718:               "color": "white"
 719:              }
 720:             },
 721:             "type": "table"
 722:            }
 723:           ]
 724:          },
 725:          "layout": {
 726:           "annotationdefaults": {
 727:            "arrowcolor": "#2a3f5f",
 728:            "arrowhead": 0,
 729:            "arrowwidth": 1
 730:           },
 731:           "autotypenumbers": "strict",
 732:           "coloraxis": {
 733:            "colorbar": {
 734:             "outlinewidth": 0,
 735:             "ticks": ""
 736:            }
 737:           },
 738:           "colorscale": {
 739:            "diverging": [
 740:             [
 741:              0,
 742:              "#8e0152"
 743:             ],
 744:             [
 745:              0.1,
 746:              "#c51b7d"
 747:             ],
 748:             [
 749:              0.2,
 750:              "#de77ae"
 751:             ],
 752:             [
 753:              0.3,
 754:              "#f1b6da"
 755:             ],
 756:             [
 757:              0.4,
 758:              "#fde0ef"
 759:             ],
 760:             [
 761:              0.5,
 762:              "#f7f7f7"
 763:             ],
 764:             [
 765:              0.6,
 766:              "#e6f5d0"
 767:             ],
 768:             [
 769:              0.7,
 770:              "#b8e186"
 771:             ],
 772:             [
 773:              0.8,
 774:              "#7fbc41"
 775:             ],
 776:             [
 777:              0.9,
 778:              "#4d9221"
 779:             ],
 780:             [
 781:              1,
 782:              "#276419"
 783:             ]
 784:            ],
 785:            "sequential": [
 786:             [
 787:              0,
 788:              "#0d0887"
 789:             ],
 790:             [
 791:              0.1111111111111111,
 792:              "#46039f"
 793:             ],
 794:             [
 795:              0.2222222222222222,
 796:              "#7201a8"
 797:             ],
 798:             [
 799:              0.3333333333333333,
 800:              "#9c179e"
 801:             ],
 802:             [
 803:              0.4444444444444444,
 804:              "#bd3786"
 805:             ],
 806:             [
 807:              0.5555555555555556,
 808:              "#d8576b"
 809:             ],
 810:             [
 811:              0.6666666666666666,
 812:              "#ed7953"
 813:             ],
 814:             [
 815:              0.7777777777777778,
 816:              "#fb9f3a"
 817:             ],
 818:             [
 819:              0.8888888888888888,
 820:              "#fdca26"
 821:             ],
 822:             [
 823:              1,
 824:              "#f0f921"
 825:             ]
 826:            ],
 827:            "sequentialminus": [
 828:             [
 829:              0,
 830:              "#0d0887"
 831:             ],
 832:             [
 833:              0.1111111111111111,
 834:              "#46039f"
 835:             ],
 836:             [
 837:              0.2222222222222222,
 838:              "#7201a8"
 839:             ],
 840:             [
 841:              0.3333333333333333,
 842:              "#9c179e"
 843:             ],
 844:             [
 845:              0.4444444444444444,
 846:              "#bd3786"
 847:             ],
 848:             [
 849:              0.5555555555555556,
 850:              "#d8576b"
 851:             ],
 852:             [
 853:              0.6666666666666666,
 854:              "#ed7953"
 855:             ],
 856:             [
 857:              0.7777777777777778,
 858:              "#fb9f3a"
 859:             ],
 860:             [
 861:              0.8888888888888888,
 862:              "#fdca26"
 863:             ],
 864:             [
 865:              1,
 866:              "#f0f921"
 867:             ]
 868:            ]
 869:           },
 870:           "colorway": [
 871:            "#636efa",
 872:            "#EF553B",
 873:            "#00cc96",
 874:            "#ab63fa",
 875:            "#FFA15A",
 876:            "#19d3f3",
 877:            "#FF6692",
 878:            "#B6E880",
 879:            "#FF97FF",
 880:            "#FECB52"
 881:           ],
 882:           "font": {
 883:            "color": "#2a3f5f"
 884:           },
 885:           "geo": {
 886:            "bgcolor": "white",
 887:            "lakecolor": "white",
 888:            "landcolor": "#E5ECF6",
 889:            "showlakes": true,
 890:            "showland": true,
 891:            "subunitcolor": "white"
 892:           },
 893:           "hoverlabel": {
 894:            "align": "left"
 895:           },
 896:           "hovermode": "closest",
 897:           "mapbox": {
 898:            "style": "light"
 899:           },
 900:           "paper_bgcolor": "white",
 901:           "plot_bgcolor": "#E5ECF6",
 902:           "polar": {
 903:            "angularaxis": {
 904:             "gridcolor": "white",
 905:             "linecolor": "white",
 906:             "ticks": ""
 907:            },
 908:            "bgcolor": "#E5ECF6",
 909:            "radialaxis": {
 910:             "gridcolor": "white",
 911:             "linecolor": "white",
 912:             "ticks": ""
 913:            }
 914:           },
 915:           "scene": {
 916:            "xaxis": {
 917:             "backgroundcolor": "#E5ECF6",
 918:             "gridcolor": "white",
 919:             "gridwidth": 2,
 920:             "linecolor": "white",
 921:             "showbackground": true,
 922:             "ticks": "",
 923:             "zerolinecolor": "white"
 924:            },
 925:            "yaxis": {
 926:             "backgroundcolor": "#E5ECF6",
 927:             "gridcolor": "white",
 928:             "gridwidth": 2,
 929:             "linecolor": "white",
 930:             "showbackground": true,
 931:             "ticks": "",
 932:             "zerolinecolor": "white"
 933:            },
 934:            "zaxis": {
 935:             "backgroundcolor": "#E5ECF6",
 936:             "gridcolor": "white",
 937:             "gridwidth": 2,
 938:             "linecolor": "white",
 939:             "showbackground": true,
 940:             "ticks": "",
 941:             "zerolinecolor": "white"
 942:            }
 943:           },
 944:           "shapedefaults": {
 945:            "line": {
 946:             "color": "#2a3f5f"
 947:            }
 948:           },
 949:           "ternary": {
 950:            "aaxis": {
 951:             "gridcolor": "white",
 952:             "linecolor": "white",
 953:             "ticks": ""
 954:            },
 955:            "baxis": {
 956:             "gridcolor": "white",
 957:             "linecolor": "white",
 958:             "ticks": ""
 959:            },
 960:            "bgcolor": "#E5ECF6",
 961:            "caxis": {
 962:             "gridcolor": "white",
 963:             "linecolor": "white",
 964:             "ticks": ""
 965:            }
 966:           },
 967:           "title": {
 968:            "x": 0.05
 969:           },
 970:           "xaxis": {
 971:            "automargin": true,
 972:            "gridcolor": "white",
 973:            "linecolor": "white",
 974:            "ticks": "",
 975:            "title": {
 976:             "standoff": 15
 977:            },
 978:            "zerolinecolor": "white",
 979:            "zerolinewidth": 2
 980:           },
 981:           "yaxis": {
 982:            "automargin": true,
 983:            "gridcolor": "white",
 984:            "linecolor": "white",
 985:            "ticks": "",
 986:            "title": {
 987:             "standoff": 15
 988:            },
 989:            "zerolinecolor": "white",
 990:            "zerolinewidth": 2
 991:           }
 992:          }
 993:         },
 994:         "title": {
 995:          "text": "Interactive Research Visualization"
 996:         },
 997:         "xaxis": {
 998:          "title": {
 999:           "text": "X"
1000:          }
1001:         },
1002:         "yaxis": {
1003:          "title": {
1004:           "text": "Y"
1005:          }
1006:         }
1007:        }
1008:       },
1009:       "image/png": ""
1010:      },
1011:      "metadata": {},
1012:      "output_type": "display_data"
1013:     }
1014:    ],
1015:    "source": [
1016:     "# Create interactive plots\n",
1017:     "import plotly.graph_objects as go\n",
1018:     "from plotly.subplots import make_subplots\n",
1019:     "\n",
1020:     "# Generate sample data for visualization\n",
1021:     "x = np.linspace(0, 10, 100)\n",
1022:     "y = np.sin(x) + np.random.normal(0, 0.1, 100)\n",
1023:     "\n",
1024:     "# Create interactive plot\n",
1025:     "fig = go.Figure()\n",
1026:     "fig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='Data'))\n",
1027:     "fig.add_trace(go.Scatter(x=x, y=np.sin(x), mode='lines', name='Model'))\n",
1028:     "\n",
1029:     "fig.update_layout(\n",
1030:     "    title=\"Interactive Research Visualization\",\n",
1031:     "    xaxis_title=\"X\",\n",
1032:     "    yaxis_title=\"Y\",\n",
1033:     "    hovermode='closest'\n",
1034:     ")\n",
1035:     "\n",
1036:     "fig.show()"
1037:    ]
1038:   },
1039:   {
1040:    "cell_type": "code",
1041:    "execution_count": 7,
1042:    "metadata": {},
1043:    "outputs": [
1044:     {
1045:      "ename": "ValueError",
1046:      "evalue": "All arrays must be of the same length",
1047:      "output_type": "error",
1048:      "traceback": [
1049:       "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
1050:       "\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)",
1051:       "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[7]\u001b[39m\u001b[32m, line 9\u001b[39m\n\u001b[32m      6\u001b[39m metrics = re.findall(\u001b[33mr\u001b[39m\u001b[33m'\u001b[39m\u001b[33m[0-9]+\u001b[39m\u001b[33m\\\u001b[39m\u001b[33m.?[0-9]*\u001b[39m\u001b[33m'\u001b[39m, results_text)\n\u001b[32m      8\u001b[39m \u001b[38;5;66;03m# Create summary DataFrame\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m9\u001b[39m summary_df = \u001b[43mpd\u001b[49m\u001b[43m.\u001b[49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\n\u001b[32m     10\u001b[39m \u001b[43m    \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mMetric\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mParameter 1\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mParameter 2\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mParameter 3\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     11\u001b[39m \u001b[43m    \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mValue\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetrics\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[32;43m3\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     12\u001b[39m \u001b[43m    \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mUncertainty\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43m±0.1\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43m±0.05\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43m±0.2\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[32m     13\u001b[39m \u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     15\u001b[39m display(summary_df)\n\u001b[32m     17\u001b[39m \u001b[38;5;66;03m# Export results\u001b[39;00m\n",
1052:       "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/pandas/core/frame.py:778\u001b[39m, in \u001b[36mDataFrame.__init__\u001b[39m\u001b[34m(self, data, index, columns, dtype, copy)\u001b[39m\n\u001b[32m    772\u001b[39m     mgr = \u001b[38;5;28mself\u001b[39m._init_mgr(\n\u001b[32m    773\u001b[39m         data, axes={\u001b[33m\"\u001b[39m\u001b[33mindex\u001b[39m\u001b[33m\"\u001b[39m: index, \u001b[33m\"\u001b[39m\u001b[33mcolumns\u001b[39m\u001b[33m\"\u001b[39m: columns}, dtype=dtype, copy=copy\n\u001b[32m    774\u001b[39m     )\n\u001b[32m    776\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, \u001b[38;5;28mdict\u001b[39m):\n\u001b[32m    777\u001b[39m     \u001b[38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m778\u001b[39m     mgr = \u001b[43mdict_to_mgr\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtyp\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmanager\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    779\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, ma.MaskedArray):\n\u001b[32m    780\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnumpy\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mma\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m mrecords\n",
1053:       "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/pandas/core/internals/construction.py:503\u001b[39m, in \u001b[36mdict_to_mgr\u001b[39m\u001b[34m(data, index, columns, dtype, typ, copy)\u001b[39m\n\u001b[32m    499\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    500\u001b[39m         \u001b[38;5;66;03m# dtype check to exclude e.g. range objects, scalars\u001b[39;00m\n\u001b[32m    501\u001b[39m         arrays = [x.copy() \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(x, \u001b[33m\"\u001b[39m\u001b[33mdtype\u001b[39m\u001b[33m\"\u001b[39m) \u001b[38;5;28;01melse\u001b[39;00m x \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m arrays]\n\u001b[32m--> \u001b[39m\u001b[32m503\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marrays_to_mgr\u001b[49m\u001b[43m(\u001b[49m\u001b[43marrays\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtyp\u001b[49m\u001b[43m=\u001b[49m\u001b[43mtyp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconsolidate\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n",
1054:       "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/pandas/core/internals/construction.py:114\u001b[39m, in \u001b[36marrays_to_mgr\u001b[39m\u001b[34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[39m\n\u001b[32m    111\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m verify_integrity:\n\u001b[32m    112\u001b[39m     \u001b[38;5;66;03m# figure out the index, if necessary\u001b[39;00m\n\u001b[32m    113\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m index \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m114\u001b[39m         index = \u001b[43m_extract_index\u001b[49m\u001b[43m(\u001b[49m\u001b[43marrays\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    115\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    116\u001b[39m         index = ensure_index(index)\n",
1055:       "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/pandas/core/internals/construction.py:677\u001b[39m, in \u001b[36m_extract_index\u001b[39m\u001b[34m(data)\u001b[39m\n\u001b[32m    675\u001b[39m lengths = \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mset\u001b[39m(raw_lengths))\n\u001b[32m    676\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(lengths) > \u001b[32m1\u001b[39m:\n\u001b[32m--> \u001b[39m\u001b[32m677\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mAll arrays must be of the same length\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    679\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m have_dicts:\n\u001b[32m    680\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[32m    681\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mMixing dicts with non-Series may lead to ambiguous ordering.\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    682\u001b[39m     )\n",
1056:       "\u001b[31mValueError\u001b[39m: All arrays must be of the same length"
1057:      ]
1058:     }
1059:    ],
1060:    "source": [
1061:     "# Analyze generated results\n",
1062:     "results_text = den.research.results\n",
1063:     "\n",
1064:     "# Extract key metrics using regex or NLP\n",
1065:     "import re\n",
1066:     "metrics = re.findall(r'[0-9]+\\.?[0-9]*', results_text)\n",
1067:     "\n",
1068:     "# Create summary DataFrame\n",
1069:     "summary_df = pd.DataFrame({\n",
1070:     "    'Metric': ['Parameter 1', 'Parameter 2', 'Parameter 3'],\n",
1071:     "    'Value': metrics[:3],\n",
1072:     "    'Uncertainty': ['±0.1', '±0.05', '±0.2']\n",
1073:     "})\n",
1074:     "\n",
1075:     "display(summary_df)\n",
1076:     "\n",
1077:     "# Export results\n",
1078:     "summary_df.to_csv('research_summary.csv', index=False)\n",
1079:     "print(\"✅ Results exported to research_summary.csv\")"
1080:    ]
1081:   },
1082:   {
1083:    "cell_type": "code",
1084:    "execution_count": 8,
1085:    "metadata": {},
1086:    "outputs": [],
1087:    "source": [
1088:     "metrics = re.findall(r'[0-9]+\\.?[0-9]*', results_text)"
1089:    ]
1090:   },
1091:   {
1092:    "cell_type": "code",
1093:    "execution_count": 11,
1094:    "metadata": {},
1095:    "outputs": [
1096:     {
1097:      "name": "stdout",
1098:      "output_type": "stream",
1099:      "text": [
1100:       "\n"
1101:      ]
1102:     }
1103:    ],
1104:    "source": [
1105:     "print(results_text)"
1106:    ]
1107:   },
1108:   {
1109:    "cell_type": "code",
1110:    "execution_count": null,
1111:    "metadata": {},
1112:    "outputs": [],
1113:    "source": []
1114:   }
1115:  ],
1116:  "metadata": {
1117:   "kernelspec": {
1118:    "display_name": "Python 3 (ipykernel)",
1119:    "language": "python",
1120:    "name": "python3"
1121:   },
1122:   "language_info": {
1123:    "codemirror_mode": {
1124:     "name": "ipython",
1125:     "version": 3
1126:    },
1127:    "file_extension": ".py",
1128:    "mimetype": "text/x-python",
1129:    "name": "python",
1130:    "nbconvert_exporter": "python",
1131:    "pygments_lexer": "ipython3",
1132:    "version": "3.13.7"
1133:   }
1134:  },
1135:  "nbformat": 4,
1136:  "nbformat_minor": 4
1137: }
</file>

<file path="03_advanced.ipynb">
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "a258025e-6251-49f7-832a-f7cf0caf0f16",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Interactive Denario Research - Advanced Workflow\n",
  9:     "\n",
 10:     "This notebook demonstrates advanced interactive features of Denario in JupyterLab:\n",
 11:     "\n",
 12:     "## Advanced Features:\n",
 13:     "- **Interactive widgets** for parameter tuning\n",
 14:     "- **Real-time visualization** of research progress\n",
 15:     "- **Custom analysis** and data manipulation\n",
 16:     "- **Collaborative research** with team members\n",
 17:     "- **Version control** integration\n",
 18:     "- **Export capabilities** for different formats\n"
 19:    ]
 20:   },
 21:   {
 22:    "cell_type": "code",
 23:    "execution_count": 3,
 24:    "id": "44a47fe3-2c12-4fbc-9638-806e36822514",
 25:    "metadata": {},
 26:    "outputs": [],
 27:    "source": [
 28:     "# Advanced imports for interactive research\n",
 29:     "from denario import Denario, Journal, models\n",
 30:     "import matplotlib.pyplot as plt\n",
 31:     "import seaborn as sns\n",
 32:     "import pandas as pd\n",
 33:     "import numpy as np\n",
 34:     "import plotly.graph_objects as go\n",
 35:     "import plotly.express as px\n",
 36:     "from plotly.subplots import make_subplots\n",
 37:     "from IPython.display import display, Markdown, HTML\n",
 38:     "import ipywidgets as widgets\n",
 39:     "from ipywidgets import interact, interactive, fixed, interact_manual\n",
 40:     "import warnings\n",
 41:     "warnings.filterwarnings('ignore')\n",
 42:     "\n",
 43:     "# Set up plotting\n",
 44:     "plt.style.use('seaborn-v0_8')\n",
 45:     "%matplotlib inline\n",
 46:     "\n",
 47:     "# Initialize project\n",
 48:     "den = Denario(project_dir=\"my_research\")\n"
 49:    ]
 50:   },
 51:   {
 52:    "cell_type": "code",
 53:    "execution_count": 4,
 54:    "id": "4a7fdc59-ce36-4b3f-bdef-926055e2844b",
 55:    "metadata": {},
 56:    "outputs": [
 57:     {
 58:      "data": {
 59:       "application/vnd.jupyter.widget-view+json": {
 60:        "model_id": "07d7dda5404c46a8811996f257819288",
 61:        "version_major": 2,
 62:        "version_minor": 0
 63:       },
 64:       "text/plain": [
 65:        "Textarea(value='A scientific manuscript on a heavily scattered Fast Radio Burst.', description='Data Descripti…"
 66:       ]
 67:      },
 68:      "metadata": {},
 69:      "output_type": "display_data"
 70:     }
 71:    ],
 72:    "source": [
 73:     "# Interactive widget for data description\n",
 74:     "import ipywidgets as widgets\n",
 75:     "\n",
 76:     "data_widget = widgets.Textarea(\n",
 77:     "    value=\"A scientific manuscript on a heavily scattered Fast Radio Burst.\",\n",
 78:     "    placeholder=\"Describe your data and tools\",\n",
 79:     "    description=\"Data Description:\",\n",
 80:     "    layout=widgets.Layout(width='100%', height='200px')\n",
 81:     ")\n",
 82:     "\n",
 83:     "display(data_widget)\n",
 84:     "\n",
 85:     "# Set data description when ready\n",
 86:     "den.set_data_description(data_widget.value)"
 87:    ]
 88:   },
 89:   {
 90:    "cell_type": "code",
 91:    "execution_count": null,
 92:    "id": "87c6149d-457e-4cef-b8c8-c3c0148a7f05",
 93:    "metadata": {},
 94:    "outputs": [],
 95:    "source": []
 96:   }
 97:  ],
 98:  "metadata": {
 99:   "kernelspec": {
100:    "display_name": "Python 3 (ipykernel)",
101:    "language": "python",
102:    "name": "python3"
103:   },
104:   "language_info": {
105:    "codemirror_mode": {
106:     "name": "ipython",
107:     "version": 3
108:    },
109:    "file_extension": ".py",
110:    "mimetype": "text/x-python",
111:    "name": "python",
112:    "nbconvert_exporter": "python",
113:    "pygments_lexer": "ipython3",
114:    "version": "3.13.7"
115:   }
116:  },
117:  "nbformat": 4,
118:  "nbformat_minor": 5
119: }
</file>

<file path="03_manuscript_review.ipynb">
   1: {
   2:  "cells": [
   3:   {
   4:    "cell_type": "markdown",
   5:    "metadata": {},
   6:    "source": [
   7:     "# Denario Manuscript Review and Completion Workflow\n",
   8:     "\n",
   9:     "This notebook demonstrates how to use Denario for comprehensive manuscript review, including:\n",
  10:     "\n",
  11:     "## Key Features:\n",
  12:     "- **LaTeX to JSONL Conversion** - Convert manuscripts to structured format using ragbook\n",
  13:     "- **Section Completeness Analysis** - Identify incomplete sections with semantic understanding\n",
  14:     "- **Rich Structured Analysis** - Process prose, equations, figures, and tables separately\n",
  15:     "- **Citation Integration** - Add relevant in-text citations with context\n",
  16:     "- **Mathematical Verification** - Check calculations and derivations with normalized math\n",
  17:     "- **Simulation Validation** - Verify computational results\n",
  18:     "- **Content Enhancement** - Improve flow and completeness\n",
  19:     "- **Referee Response** - Address reviewer comments systematically\n",
  20:     "\n",
  21:     "## Workflow:\n",
  22:     "1. **Upload your manuscript** (LaTeX, Word, or Markdown)\n",
  23:     "2. **Convert LaTeX to JSONL** (Recommended) - Use ragbook for rich structured analysis\n",
  24:     "3. **Upload referee report** (if available) for systematic comment parsing\n",
  25:     "4. **Analyze completeness** and identify gaps using structured data\n",
  26:     "5. **Generate responses** to referee comments with priority handling\n",
  27:     "6. **Generate missing content** with proper citations\n",
  28:     "7. **Verify all mathematical derivations** and equations\n",
  29:     "8. **Validate simulations and calculations**\n",
  30:     "9. **Generate revised manuscript** with enhanced structure\n"
  31:    ]
  32:   },
  33:   {
  34:    "cell_type": "code",
  35:    "execution_count": 7,
  36:    "metadata": {},
  37:    "outputs": [
  38:     {
  39:      "name": "stdout",
  40:      "output_type": "stream",
  41:      "text": [
  42:       "📚 Manuscript Review System Initialized\n",
  43:       "==================================================\n"
  44:      ]
  45:     }
  46:    ],
  47:    "source": [
  48:     "# Import necessary libraries for manuscript review\n",
  49:     "from denario import Denario, Journal, models\n",
  50:     "import pandas as pd\n",
  51:     "import numpy as np\n",
  52:     "import matplotlib.pyplot as plt\n",
  53:     "import re\n",
  54:     "import os\n",
  55:     "import json\n",
  56:     "from pathlib import Path\n",
  57:     "from IPython.display import display, Markdown, HTML\n",
  58:     "import ipywidgets as widgets\n",
  59:     "from ipywidgets import interact, interactive, fixed, interact_manual\n",
  60:     "import warnings\n",
  61:     "warnings.filterwarnings('ignore')\n",
  62:     "\n",
  63:     "# Set up plotting\n",
  64:     "plt.style.use('seaborn-v0_8')\n",
  65:     "%matplotlib inline\n",
  66:     "\n",
  67:     "print(\"📚 Manuscript Review System Initialized\")\n",
  68:     "print(\"=\" * 50)\n"
  69:    ]
  70:   },
  71:   {
  72:    "cell_type": "markdown",
  73:    "metadata": {},
  74:    "source": [
  75:     "## 1. Manuscript Upload and Analysis\n",
  76:     "\n",
  77:     "### Option A: Direct Upload (LaTeX, Word, Markdown)\n",
  78:     "### Option B: Convert to JSONL with ragbook (Recommended for Rich Analysis)\n"
  79:    ]
  80:   },
  81:   {
  82:    "cell_type": "code",
  83:    "execution_count": 6,
  84:    "metadata": {},
  85:    "outputs": [
  86:     {
  87:      "data": {
  88:       "application/vnd.jupyter.widget-view+json": {
  89:        "model_id": "3b2cf468367443b499d151779241b572",
  90:        "version_major": 2,
  91:        "version_minor": 0
  92:       },
  93:       "text/plain": [
  94:        "VBox(children=(HTML(value='<h3>🔄 ragbook LaTeX to JSONL Conversion</h3>'), HTML(value='<p>Convert your LaTeX m…"
  95:       ]
  96:      },
  97:      "metadata": {},
  98:      "output_type": "display_data"
  99:     }
 100:    ],
 101:    "source": [
 102:     "# ragbook Conversion Interface\n",
 103:     "def create_ragbook_conversion_interface():\n",
 104:     "    \"\"\"Create interactive interface for ragbook conversion\"\"\"\n",
 105:     "    \n",
 106:     "    # LaTeX file upload widget\n",
 107:     "    tex_upload = widgets.FileUpload(\n",
 108:     "        accept='.tex',\n",
 109:     "        multiple=False,\n",
 110:     "        description='Upload LaTeX File',\n",
 111:     "        style={'description_width': 'initial'}\n",
 112:     "    )\n",
 113:     "    \n",
 114:     "    # Source ID input\n",
 115:     "    source_id_input = widgets.Text(\n",
 116:     "        value='manuscript',\n",
 117:     "        placeholder='Enter source ID (e.g., my-paper-v1)',\n",
 118:     "        description='Source ID:',\n",
 119:     "        style={'description_width': 'initial'}\n",
 120:     "    )\n",
 121:     "    \n",
 122:     "    # Convert button\n",
 123:     "    convert_button = widgets.Button(\n",
 124:     "        description='Convert to JSONL',\n",
 125:     "        button_style='primary',\n",
 126:     "        icon='cogs'\n",
 127:     "    )\n",
 128:     "    \n",
 129:     "    # Output area\n",
 130:     "    conversion_output = widgets.Output()\n",
 131:     "    \n",
 132:     "    def on_convert_clicked(b):\n",
 133:     "        with conversion_output:\n",
 134:     "            conversion_output.clear_output()\n",
 135:     "            \n",
 136:     "            if not tex_upload.value:\n",
 137:     "                print(\"❌ Please upload a LaTeX file first\")\n",
 138:     "                return\n",
 139:     "            \n",
 140:     "            # Get the uploaded file\n",
 141:     "            uploaded_file = list(tex_upload.value.values())[0]\n",
 142:     "            file_name = uploaded_file['name']\n",
 143:     "            \n",
 144:     "            # Save to temporary file\n",
 145:     "            temp_tex_path = f\"/tmp/{file_name}\"\n",
 146:     "            with open(temp_tex_path, 'wb') as f:\n",
 147:     "                f.write(uploaded_file['content'])\n",
 148:     "            \n",
 149:     "            print(f\"📄 Processing LaTeX file: {file_name}\")\n",
 150:     "            print(\"=\" * 50)\n",
 151:     "            \n",
 152:     "            # Convert to JSONL\n",
 153:     "            source_id = source_id_input.value.strip() or 'manuscript'\n",
 154:     "            jsonl_path = convert_manuscript_to_jsonl(temp_tex_path, source_id=source_id)\n",
 155:     "            \n",
 156:     "            if jsonl_path:\n",
 157:     "                # Analyze conversion results\n",
 158:     "                analysis = analyze_conversion_results(jsonl_path)\n",
 159:     "                \n",
 160:     "                if analysis:\n",
 161:     "                    print(f\"\\n✅ Conversion completed successfully!\")\n",
 162:     "                    print(f\"📁 JSONL file: {jsonl_path}\")\n",
 163:     "                    print(f\"📊 Ready for rich structured analysis\")\n",
 164:     "                    \n",
 165:     "                    # Store the JSONL path for later use\n",
 166:     "                    global current_jsonl_path\n",
 167:     "                    current_jsonl_path = jsonl_path\n",
 168:     "                    \n",
 169:     "                    print(f\"\\n💡 Next steps:\")\n",
 170:     "                    print(f\"  1. Use the 'Enhanced Analysis' section below\")\n",
 171:     "                    print(f\"  2. Upload the JSONL file for rich structured analysis\")\n",
 172:     "                    print(f\"  3. Or use the direct analysis with the JSONL parser\")\n",
 173:     "                else:\n",
 174:     "                    print(\"❌ Failed to analyze conversion results\")\n",
 175:     "            else:\n",
 176:     "                print(\"❌ Conversion failed\")\n",
 177:     "    \n",
 178:     "    convert_button.on_click(on_convert_clicked)\n",
 179:     "    \n",
 180:     "    # Layout\n",
 181:     "    interface = widgets.VBox([\n",
 182:     "        widgets.HTML(\"<h3>🔄 ragbook LaTeX to JSONL Conversion</h3>\"),\n",
 183:     "        widgets.HTML(\"<p>Convert your LaTeX manuscript to structured JSONL format for rich analysis:</p>\"),\n",
 184:     "        widgets.HTML(\"<ul><li>📝 Prose chunks with semantic structure</li><li>🧮 Equations with normalized math</li><li>📊 Tables exported to CSV</li><li>🖼️ Figures with captions and metadata</li></ul>\"),\n",
 185:     "        widgets.HBox([tex_upload, convert_button]),\n",
 186:     "        source_id_input,\n",
 187:     "        conversion_output\n",
 188:     "    ])\n",
 189:     "    \n",
 190:     "    return interface\n",
 191:     "\n",
 192:     "# Create and display ragbook conversion interface\n",
 193:     "ragbook_interface = create_ragbook_conversion_interface()\n",
 194:     "display(ragbook_interface)\n"
 195:    ]
 196:   },
 197:   {
 198:    "cell_type": "code",
 199:    "execution_count": null,
 200:    "metadata": {},
 201:    "outputs": [
 202:     {
 203:      "name": "stdout",
 204:      "output_type": "stream",
 205:      "text": [
 206:       "🔍 Manuscript Reviewer initialized\n",
 207:       "Ready to analyze your manuscript!\n"
 208:      ]
 209:     }
 210:    ],
 211:    "source": [
 212:     "# ragbook integration for LaTeX to JSONL conversion\n",
 213:     "import subprocess\n",
 214:     "import sys\n",
 215:     "import os\n",
 216:     "from pathlib import Path\n",
 217:     "\n",
 218:     "def convert_manuscript_to_jsonl(tex_file_path, output_dir=\"/tmp\", source_id=\"manuscript\"):\n",
 219:     "    \"\"\"\n",
 220:     "    Convert LaTeX manuscript to JSONL format using ragbook\n",
 221:     "    \n",
 222:     "    Args:\n",
 223:     "        tex_file_path: Path to the main .tex file\n",
 224:     "        output_dir: Directory to save the JSONL output\n",
 225:     "        source_id: Identifier for the source document\n",
 226:     "    \n",
 227:     "    Returns:\n",
 228:     "        Path to the generated JSONL file, or None if conversion failed\n",
 229:     "    \"\"\"\n",
 230:     "    try:\n",
 231:     "        # Ensure output directory exists\n",
 232:     "        os.makedirs(output_dir, exist_ok=True)\n",
 233:     "        \n",
 234:     "        # Get the project root (directory containing the tex file)\n",
 235:     "        project_root = os.path.dirname(os.path.abspath(tex_file_path))\n",
 236:     "        tex_filename = os.path.basename(tex_file_path)\n",
 237:     "        \n",
 238:     "        # Output JSONL file path\n",
 239:     "        jsonl_output = os.path.join(output_dir, f\"{source_id}.jsonl\")\n",
 240:     "        \n",
 241:     "        # ragbook command\n",
 242:     "        cmd = [\n",
 243:     "            sys.executable,  # Use current Python interpreter\n",
 244:     "            \"/data/cmbagents/ragbook/convert_book.py\",\n",
 245:     "            \"--entry\", tex_filename,\n",
 246:     "            \"--root\", project_root,\n",
 247:     "            \"--source-id\", source_id,\n",
 248:     "            \"--out\", jsonl_output,\n",
 249:     "            \"--assets-dir\", project_root,  # Look for figures in the same directory\n",
 250:     "            \"--assets-url-prefix\", \"assets/\",\n",
 251:     "            \"--no-ocr\"  # Disable OCR for faster processing\n",
 252:     "        ]\n",
 253:     "        \n",
 254:     "        print(f\"🔄 Converting {tex_filename} to JSONL format...\")\n",
 255:     "        print(f\"📁 Project root: {project_root}\")\n",
 256:     "        print(f\"📄 Output: {jsonl_output}\")\n",
 257:     "        \n",
 258:     "        # Run the conversion\n",
 259:     "        result = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)\n",
 260:     "        \n",
 261:     "        if result.returncode == 0:\n",
 262:     "            print(\"✅ Conversion successful!\")\n",
 263:     "            print(f\"📊 JSONL file created: {jsonl_output}\")\n",
 264:     "            \n",
 265:     "            # Check if file was created and has content\n",
 266:     "            if os.path.exists(jsonl_output) and os.path.getsize(jsonl_output) > 0:\n",
 267:     "                return jsonl_output\n",
 268:     "            else:\n",
 269:     "                print(\"❌ JSONL file was created but is empty\")\n",
 270:     "                return None\n",
 271:     "        else:\n",
 272:     "            print(f\"❌ Conversion failed with return code {result.returncode}\")\n",
 273:     "            print(f\"Error output: {result.stderr}\")\n",
 274:     "            return None\n",
 275:     "            \n",
 276:     "    except Exception as e:\n",
 277:     "        print(f\"❌ Error during conversion: {e}\")\n",
 278:     "        return None\n",
 279:     "\n",
 280:     "def analyze_conversion_results(jsonl_path):\n",
 281:     "    \"\"\"Analyze the results of ragbook conversion\"\"\"\n",
 282:     "    try:\n",
 283:     "        with open(jsonl_path, 'r', encoding='utf-8') as f:\n",
 284:     "            lines = f.readlines()\n",
 285:     "        \n",
 286:     "        # Count different types of chunks\n",
 287:     "        chunk_types = {}\n",
 288:     "        total_chunks = len(lines)\n",
 289:     "        \n",
 290:     "        for line in lines:\n",
 291:     "            if line.strip():\n",
 292:     "                chunk = json.loads(line.strip())\n",
 293:     "                chunk_type = chunk.get('type', 'unknown')\n",
 294:     "                chunk_types[chunk_type] = chunk_types.get(chunk_type, 0) + 1\n",
 295:     "        \n",
 296:     "        print(f\"📊 CONVERSION ANALYSIS\")\n",
 297:     "        print(f\"=\" * 30)\n",
 298:     "        print(f\"Total chunks: {total_chunks}\")\n",
 299:     "        print(f\"Chunk types:\")\n",
 300:     "        for chunk_type, count in chunk_types.items():\n",
 301:     "            print(f\"  • {chunk_type}: {count}\")\n",
 302:     "        \n",
 303:     "        return {\n",
 304:     "            'total_chunks': total_chunks,\n",
 305:     "            'chunk_types': chunk_types,\n",
 306:     "            'jsonl_path': jsonl_path\n",
 307:     "        }\n",
 308:     "        \n",
 309:     "    except Exception as e:\n",
 310:     "        print(f\"❌ Error analyzing conversion results: {e}\")\n",
 311:     "        return None\n",
 312:     "\n",
 313:     "# JSONL parser for ragbook format\n",
 314:     "class JSONLManuscriptParser:\n",
 315:     "    \"\"\"Parse ragbook JSONL format for manuscript analysis\"\"\"\n",
 316:     "    \n",
 317:     "    def __init__(self):\n",
 318:     "        self.chunks = []\n",
 319:     "        self.sections = {}\n",
 320:     "        self.equations = []\n",
 321:     "        self.figures = []\n",
 322:     "        self.tables = []\n",
 323:     "        \n",
 324:     "    def load_jsonl(self, file_path):\n",
 325:     "        \"\"\"Load and parse JSONL file from ragbook\"\"\"\n",
 326:     "        try:\n",
 327:     "            with open(file_path, 'r', encoding='utf-8') as f:\n",
 328:     "                for line in f:\n",
 329:     "                    if line.strip():\n",
 330:     "                        chunk = json.loads(line.strip())\n",
 331:     "                        self.chunks.append(chunk)\n",
 332:     "            \n",
 333:     "            # Organize chunks by type\n",
 334:     "            self._organize_chunks()\n",
 335:     "            print(f\"✅ JSONL loaded: {len(self.chunks)} chunks, {len(self.sections)} sections\")\n",
 336:     "            return True\n",
 337:     "            \n",
 338:     "        except Exception as e:\n",
 339:     "            print(f\"❌ Error loading JSONL: {e}\")\n",
 340:     "            return False\n",
 341:     "    \n",
 342:     "    def _organize_chunks(self):\n",
 343:     "        \"\"\"Organize chunks by type and section\"\"\"\n",
 344:     "        for chunk in self.chunks:\n",
 345:     "            chunk_type = chunk.get('type', 'other')\n",
 346:     "            section_path = chunk.get('section_path', [])\n",
 347:     "            \n",
 348:     "            # Group by section\n",
 349:     "            section_key = ' > '.join(section_path) if section_path else 'Unknown'\n",
 350:     "            if section_key not in self.sections:\n",
 351:     "                self.sections[section_key] = {\n",
 352:     "                    'prose': [],\n",
 353:     "                    'equations': [],\n",
 354:     "                    'figures': [],\n",
 355:     "                    'tables': [],\n",
 356:     "                    'other': []\n",
 357:     "                }\n",
 358:     "            \n",
 359:     "            # Categorize by type\n",
 360:     "            if chunk_type == 'prose':\n",
 361:     "                self.sections[section_key]['prose'].append(chunk)\n",
 362:     "            elif chunk_type == 'equation':\n",
 363:     "                self.sections[section_key]['equations'].append(chunk)\n",
 364:     "                self.equations.append(chunk)\n",
 365:     "            elif chunk_type == 'figure':\n",
 366:     "                self.sections[section_key]['figures'].append(chunk)\n",
 367:     "                self.figures.append(chunk)\n",
 368:     "            elif chunk_type == 'table':\n",
 369:     "                self.sections[section_key]['tables'].append(chunk)\n",
 370:     "                self.tables.append(chunk)\n",
 371:     "            else:\n",
 372:     "                self.sections[section_key]['other'].append(chunk)\n",
 373:     "    \n",
 374:     "    def get_section_text(self, section_name):\n",
 375:     "        \"\"\"Get all prose text for a section\"\"\"\n",
 376:     "        for section_key, content in self.sections.items():\n",
 377:     "            if section_name.lower() in section_key.lower():\n",
 378:     "                prose_chunks = content['prose']\n",
 379:     "                return ' '.join([chunk.get('text', '') for chunk in prose_chunks])\n",
 380:     "        return \"\"\n",
 381:     "    \n",
 382:     "    def get_equations_for_section(self, section_name):\n",
 383:     "        \"\"\"Get all equations for a section\"\"\"\n",
 384:     "        equations = []\n",
 385:     "        for section_key, content in self.sections.items():\n",
 386:     "            if section_name.lower() in section_key.lower():\n",
 387:     "                for eq_chunk in content['equations']:\n",
 388:     "                    equations.append({\n",
 389:     "                        'tex': eq_chunk.get('equation_tex', ''),\n",
 390:     "                        'normalized': eq_chunk.get('math_norm', ''),\n",
 391:     "                        'number': eq_chunk.get('eq_number', ''),\n",
 392:     "                        'text': eq_chunk.get('text', '')\n",
 393:     "                    })\n",
 394:     "        return equations\n",
 395:     "    \n",
 396:     "    def get_figures_for_section(self, section_name):\n",
 397:     "        \"\"\"Get all figures for a section\"\"\"\n",
 398:     "        figures = []\n",
 399:     "        for section_key, content in self.sections.items():\n",
 400:     "            if section_name.lower() in section_key.lower():\n",
 401:     "                for fig_chunk in content['figures']:\n",
 402:     "                    figures.append({\n",
 403:     "                        'caption': fig_chunk.get('caption_tex', ''),\n",
 404:     "                        'filename': fig_chunk.get('filename', ''),\n",
 405:     "                        'asset_uri': fig_chunk.get('asset_uri', ''),\n",
 406:     "                        'text': fig_chunk.get('text', '')\n",
 407:     "                    })\n",
 408:     "        return figures\n",
 409:     "    \n",
 410:     "    def get_tables_for_section(self, section_name):\n",
 411:     "        \"\"\"Get all tables for a section\"\"\"\n",
 412:     "        tables = []\n",
 413:     "        for section_key, content in self.sections.items():\n",
 414:     "            if section_name.lower() in section_key.lower():\n",
 415:     "                for table_chunk in content['tables']:\n",
 416:     "                    tables.append({\n",
 417:     "                        'caption': table_chunk.get('caption_tex', ''),\n",
 418:     "                        'csv_uri': table_chunk.get('csv_uri', ''),\n",
 419:     "                        'headers': table_chunk.get('headers', []),\n",
 420:     "                        'text': table_chunk.get('text', '')\n",
 421:     "                    })\n",
 422:     "        return tables\n",
 423:     "    \n",
 424:     "    def get_manuscript_summary(self):\n",
 425:     "        \"\"\"Get comprehensive manuscript summary\"\"\"\n",
 426:     "        summary = {\n",
 427:     "            'total_chunks': len(self.chunks),\n",
 428:     "            'sections': len(self.sections),\n",
 429:     "            'total_equations': len(self.equations),\n",
 430:     "            'total_figures': len(self.figures),\n",
 431:     "            'total_tables': len(self.tables),\n",
 432:     "            'section_breakdown': {}\n",
 433:     "        }\n",
 434:     "        \n",
 435:     "        for section_key, content in self.sections.items():\n",
 436:     "            summary['section_breakdown'][section_key] = {\n",
 437:     "                'prose_chunks': len(content['prose']),\n",
 438:     "                'equations': len(content['equations']),\n",
 439:     "                'figures': len(content['figures']),\n",
 440:     "                'tables': len(content['tables'])\n",
 441:     "            }\n",
 442:     "        \n",
 443:     "        return summary\n",
 444:     "\n",
 445:     "# Create manuscript analysis functions\n",
 446:     "class ManuscriptReviewer:\n",
 447:     "    def __init__(self, denario_instance):\n",
 448:     "        self.den = denario_instance\n",
 449:     "        self.manuscript_text = \"\"\n",
 450:     "        self.sections = {}\n",
 451:     "        self.issues = []\n",
 452:     "        self.citations = []\n",
 453:     "        \n",
 454:     "    def load_manuscript(self, file_path):\n",
 455:     "        \"\"\"Load manuscript from file\"\"\"\n",
 456:     "        try:\n",
 457:     "            with open(file_path, 'r', encoding='utf-8') as f:\n",
 458:     "                self.manuscript_text = f.read()\n",
 459:     "            print(f\"✅ Manuscript loaded: {file_path}\")\n",
 460:     "            return True\n",
 461:     "        except Exception as e:\n",
 462:     "            print(f\"❌ Error loading manuscript: {e}\")\n",
 463:     "            return False\n",
 464:     "    \n",
 465:     "    def analyze_sections(self):\n",
 466:     "        \"\"\"Analyze manuscript sections for completeness\"\"\"\n",
 467:     "        # Common section patterns\n",
 468:     "        section_patterns = {\n",
 469:     "            'Abstract': r'\\\\abstract\\{(.*?)\\}',\n",
 470:     "            'Introduction': r'\\\\section\\{Introduction\\}(.*?)(?=\\\\section|\\\\end)',\n",
 471:     "            'Methods': r'\\\\section\\{Methodology?\\}(.*?)(?=\\\\section|\\\\end)',\n",
 472:     "            'Results': r'\\\\section\\{Results?\\}(.*?)(?=\\\\section|\\\\end)',\n",
 473:     "            'Discussion': r'\\\\section\\{Discussion\\}(.*?)(?=\\\\section|\\\\end)',\n",
 474:     "            'Conclusion': r'\\\\section\\{Conclusion\\}(.*?)(?=\\\\section|\\\\end)'\n",
 475:     "        }\n",
 476:     "        \n",
 477:     "        self.sections = {}\n",
 478:     "        for section_name, pattern in section_patterns.items():\n",
 479:     "            matches = re.findall(pattern, self.manuscript_text, re.DOTALL | re.IGNORECASE)\n",
 480:     "            if matches:\n",
 481:     "                self.sections[section_name] = matches[0].strip()\n",
 482:     "            else:\n",
 483:     "                self.sections[section_name] = \"\"\n",
 484:     "                self.issues.append(f\"Missing or incomplete {section_name} section\")\n",
 485:     "        \n",
 486:     "        return self.sections\n",
 487:     "    \n",
 488:     "    def check_citations(self):\n",
 489:     "        \"\"\"Check for citation completeness\"\"\"\n",
 490:     "        # Find citation patterns\n",
 491:     "        citation_patterns = [\n",
 492:     "            r'\\\\cite\\{[^}]+\\}',  # LaTeX citations\n",
 493:     "            r'\\[[0-9]+\\]',       # Numbered citations\n",
 494:     "            r'\\([A-Za-z]+ et al\\., [0-9]{4}\\)'  # Author-year citations\n",
 495:     "        ]\n",
 496:     "        \n",
 497:     "        found_citations = []\n",
 498:     "        for pattern in citation_patterns:\n",
 499:     "            found_citations.extend(re.findall(pattern, self.manuscript_text))\n",
 500:     "        \n",
 501:     "        # Check for uncited claims (simple heuristic)\n",
 502:     "        sentences = re.split(r'[.!?]+', self.manuscript_text)\n",
 503:     "        uncited_sentences = []\n",
 504:     "        \n",
 505:     "        for sentence in sentences:\n",
 506:     "            if len(sentence.strip()) > 50:  # Substantial sentence\n",
 507:     "                has_citation = any(pattern in sentence for pattern in citation_patterns)\n",
 508:     "                if not has_citation and any(word in sentence.lower() for word in \n",
 509:     "                    ['show', 'demonstrate', 'prove', 'indicate', 'suggest', 'reveal']):\n",
 510:     "                    uncited_sentences.append(sentence.strip())\n",
 511:     "        \n",
 512:     "        self.citations = found_citations\n",
 513:     "        if uncited_sentences:\n",
 514:     "            self.issues.append(f\"Found {len(uncited_sentences)} potentially uncited claims\")\n",
 515:     "        \n",
 516:     "        return {\n",
 517:     "            'total_citations': len(found_citations),\n",
 518:     "            'uncited_claims': len(uncited_sentences),\n",
 519:     "            'uncited_sentences': uncited_sentences[:5]  # Show first 5\n",
 520:     "        }\n",
 521:     "    \n",
 522:     "    def check_mathematics(self):\n",
 523:     "        \"\"\"Check mathematical content for completeness\"\"\"\n",
 524:     "        math_patterns = {\n",
 525:     "            'equations': r'\\\\begin\\{equation\\}(.*?)\\\\end\\{equation\\}',\n",
 526:     "            'inline_math': r'\\$([^$]+)\\$',\n",
 527:     "            'display_math': r'\\$\\$([^$]+)\\$\\$',\n",
 528:     "            'proofs': r'\\\\begin\\{proof\\}(.*?)\\\\end\\{proof\\}',\n",
 529:     "            'theorems': r'\\\\begin\\{theorem\\}(.*?)\\\\end\\{theorem\\}'\n",
 530:     "        }\n",
 531:     "        \n",
 532:     "        math_content = {}\n",
 533:     "        for math_type, pattern in math_patterns.items():\n",
 534:     "            matches = re.findall(pattern, self.manuscript_text, re.DOTALL)\n",
 535:     "            math_content[math_type] = matches\n",
 536:     "        \n",
 537:     "        # Check for incomplete derivations\n",
 538:     "        incomplete_derivations = []\n",
 539:     "        for eq in math_content['equations']:\n",
 540:     "            if '...' in eq or '\\\\ldots' in eq:\n",
 541:     "                incomplete_derivations.append(eq[:100] + \"...\")\n",
 542:     "        \n",
 543:     "        if incomplete_derivations:\n",
 544:     "            self.issues.append(f\"Found {len(incomplete_derivations)} potentially incomplete derivations\")\n",
 545:     "        \n",
 546:     "        return {\n",
 547:     "            'equations': len(math_content['equations']),\n",
 548:     "            'inline_math': len(math_content['inline_math']),\n",
 549:     "            'proofs': len(math_content['proofs']),\n",
 550:     "            'theorems': len(math_content['theorems']),\n",
 551:     "            'incomplete_derivations': incomplete_derivations\n",
 552:     "        }\n",
 553:     "    \n",
 554:     "    def generate_report(self):\n",
 555:     "        \"\"\"Generate comprehensive analysis report\"\"\"\n",
 556:     "        sections = self.analyze_sections()\n",
 557:     "        citations = self.check_citations()\n",
 558:     "        math = self.check_mathematics()\n",
 559:     "        \n",
 560:     "        report = {\n",
 561:     "            'sections': sections,\n",
 562:     "            'citations': citations,\n",
 563:     "            'mathematics': math,\n",
 564:     "            'issues': self.issues,\n",
 565:     "            'total_issues': len(self.issues)\n",
 566:     "        }\n",
 567:     "        \n",
 568:     "        return report\n",
 569:     "\n",
 570:     "# Initialize the reviewer\n",
 571:     "den = Denario(project_dir=\"manuscript_review\")\n",
 572:     "reviewer = ManuscriptReviewer(den)\n",
 573:     "\n",
 574:     "print(\"🔍 Manuscript Reviewer initialized\")\n",
 575:     "print(\"Ready to analyze your manuscript!\")\n"
 576:    ]
 577:   },
 578:   {
 579:    "cell_type": "code",
 580:    "execution_count": 4,
 581:    "metadata": {},
 582:    "outputs": [
 583:     {
 584:      "name": "stdout",
 585:      "output_type": "stream",
 586:      "text": [
 587:       "🔧 JSONL analysis functions loaded!\n"
 588:      ]
 589:     }
 590:    ],
 591:    "source": [
 592:     "# JSONL analysis functions\n",
 593:     "def generate_jsonl_analysis_report(jsonl_parser):\n",
 594:     "    \"\"\"Generate analysis report for JSONL manuscript\"\"\"\n",
 595:     "    summary = jsonl_parser.get_manuscript_summary()\n",
 596:     "    \n",
 597:     "    # Analyze section completeness\n",
 598:     "    sections = {}\n",
 599:     "    section_names = ['Abstract', 'Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion']\n",
 600:     "    \n",
 601:     "    for section_name in section_names:\n",
 602:     "        section_text = jsonl_parser.get_section_text(section_name)\n",
 603:     "        sections[section_name] = section_text\n",
 604:     "        \n",
 605:     "    # Count citations (simple heuristic)\n",
 606:     "    total_citations = 0\n",
 607:     "    for chunk in jsonl_parser.chunks:\n",
 608:     "        if chunk.get('type') == 'prose':\n",
 609:     "            text = chunk.get('text', '')\n",
 610:     "            # Count various citation patterns\n",
 611:     "            citations = len(re.findall(r'\\\\cite\\{[^}]+\\}', text))\n",
 612:     "            citations += len(re.findall(r'\\[[0-9]+\\]', text))\n",
 613:     "            citations += len(re.findall(r'\\([A-Za-z]+ et al\\., [0-9]{4}\\)', text))\n",
 614:     "            total_citations += citations\n",
 615:     "    \n",
 616:     "    # Analyze mathematics\n",
 617:     "    math_content = {\n",
 618:     "        'equations': len(jsonl_parser.equations),\n",
 619:     "        'inline_math': 0,  # Would need to count inline math in prose chunks\n",
 620:     "        'proofs': 0,\n",
 621:     "        'theorems': 0,\n",
 622:     "        'incomplete_derivations': []\n",
 623:     "    }\n",
 624:     "    \n",
 625:     "    # Check for incomplete derivations\n",
 626:     "    for eq in jsonl_parser.equations:\n",
 627:     "        eq_tex = eq.get('equation_tex', '')\n",
 628:     "        if '...' in eq_tex or '\\\\ldots' in eq_tex:\n",
 629:     "            math_content['incomplete_derivations'].append(eq_tex[:100] + \"...\")\n",
 630:     "    \n",
 631:     "    # Identify issues\n",
 632:     "    issues = []\n",
 633:     "    for section_name in section_names:\n",
 634:     "        if not sections[section_name].strip():\n",
 635:     "            issues.append(f\"Missing or incomplete {section_name} section\")\n",
 636:     "    \n",
 637:     "    if math_content['incomplete_derivations']:\n",
 638:     "        issues.append(f\"Found {len(math_content['incomplete_derivations'])} potentially incomplete derivations\")\n",
 639:     "    \n",
 640:     "    return {\n",
 641:     "        'sections': sections,\n",
 642:     "        'citations': {\n",
 643:     "            'total_citations': total_citations,\n",
 644:     "            'uncited_claims': 0,  # Would need more sophisticated analysis\n",
 645:     "            'uncited_sentences': []\n",
 646:     "        },\n",
 647:     "        'mathematics': math_content,\n",
 648:     "        'issues': issues,\n",
 649:     "        'total_issues': len(issues),\n",
 650:     "        'jsonl_summary': summary\n",
 651:     "    }\n",
 652:     "\n",
 653:     "def display_jsonl_analysis_results(report):\n",
 654:     "    \"\"\"Display analysis results for JSONL manuscript\"\"\"\n",
 655:     "    print(\"📊 JSONL MANUSCRIPT ANALYSIS REPORT\")\n",
 656:     "    print(\"=\" * 50)\n",
 657:     "    \n",
 658:     "    # JSONL summary\n",
 659:     "    if 'jsonl_summary' in report:\n",
 660:     "        summary = report['jsonl_summary']\n",
 661:     "        print(f\"\\n📄 DOCUMENT STRUCTURE:\")\n",
 662:     "        print(f\"  Total chunks: {summary['total_chunks']}\")\n",
 663:     "        print(f\"  Sections: {summary['sections']}\")\n",
 664:     "        print(f\"  Equations: {summary['total_equations']}\")\n",
 665:     "        print(f\"  Figures: {summary['total_figures']}\")\n",
 666:     "        print(f\"  Tables: {summary['total_tables']}\")\n",
 667:     "    \n",
 668:     "    # Section completeness\n",
 669:     "    print(\"\\n📝 SECTION COMPLETENESS:\")\n",
 670:     "    for section, content in report['sections'].items():\n",
 671:     "        status = \"✅\" if content.strip() else \"❌\"\n",
 672:     "        length = len(content.split()) if content else 0\n",
 673:     "        print(f\"  {status} {section}: {length} words\")\n",
 674:     "    \n",
 675:     "    # Citation analysis\n",
 676:     "    print(f\"\\n📚 CITATION ANALYSIS:\")\n",
 677:     "    print(f\"  Total citations found: {report['citations']['total_citations']}\")\n",
 678:     "    \n",
 679:     "    # Mathematical content\n",
 680:     "    print(f\"\\n🧮 MATHEMATICAL CONTENT:\")\n",
 681:     "    print(f\"  Equations: {report['mathematics']['equations']}\")\n",
 682:     "    print(f\"  Inline math: {report['mathematics']['inline_math']}\")\n",
 683:     "    print(f\"  Proofs: {report['mathematics']['proofs']}\")\n",
 684:     "    print(f\"  Theorems: {report['mathematics']['theorems']}\")\n",
 685:     "    \n",
 686:     "    if report['mathematics']['incomplete_derivations']:\n",
 687:     "        print(f\"  ⚠️  Incomplete derivations: {len(report['mathematics']['incomplete_derivations'])}\")\n",
 688:     "    \n",
 689:     "    # Issues summary\n",
 690:     "    print(f\"\\n⚠️  ISSUES FOUND: {report['total_issues']}\")\n",
 691:     "    for i, issue in enumerate(report['issues'], 1):\n",
 692:     "        print(f\"  {i}. {issue}\")\n",
 693:     "\n",
 694:     "print(\"🔧 JSONL analysis functions loaded!\")\n"
 695:    ]
 696:   },
 697:   {
 698:    "cell_type": "markdown",
 699:    "metadata": {},
 700:    "source": [
 701:     "## 2. Interactive Manuscript Analysis\n"
 702:    ]
 703:   },
 704:   {
 705:    "cell_type": "code",
 706:    "execution_count": 5,
 707:    "metadata": {},
 708:    "outputs": [
 709:     {
 710:      "name": "stdout",
 711:      "output_type": "stream",
 712:      "text": [
 713:       "📁 Upload your manuscript to begin analysis:\n"
 714:      ]
 715:     },
 716:     {
 717:      "data": {
 718:       "application/vnd.jupyter.widget-view+json": {
 719:        "model_id": "b42e53c9fc144df6b10e5d18ae45db72",
 720:        "version_major": 2,
 721:        "version_minor": 0
 722:       },
 723:       "text/plain": [
 724:        "FileUpload(value=(), accept='.tex,.txt,.md,.docx', description='Upload Manuscript')"
 725:       ]
 726:      },
 727:      "metadata": {},
 728:      "output_type": "display_data"
 729:     }
 730:    ],
 731:    "source": [
 732:     "# Interactive manuscript upload and analysis\n",
 733:     "def create_upload_widget():\n",
 734:     "    \"\"\"Create file upload widget for manuscript\"\"\"\n",
 735:     "    upload_widget = widgets.FileUpload(\n",
 736:     "        accept='.tex,.txt,.md,.docx',\n",
 737:     "        multiple=False,\n",
 738:     "        description='Upload Manuscript',\n",
 739:     "        style={'description_width': 'initial'}\n",
 740:     "    )\n",
 741:     "    return upload_widget\n",
 742:     "\n",
 743:     "def analyze_manuscript_uploaded(change):\n",
 744:     "    \"\"\"Analyze uploaded manuscript\"\"\"\n",
 745:     "    if change['new']:\n",
 746:     "        # Get the uploaded file\n",
 747:     "        uploaded_file = list(change['owner'].value.values())[0]\n",
 748:     "        \n",
 749:     "        # Save to temporary file\n",
 750:     "        temp_path = f\"/tmp/manuscript_{uploaded_file['name']}\"\n",
 751:     "        with open(temp_path, 'wb') as f:\n",
 752:     "            f.write(uploaded_file['content'])\n",
 753:     "        \n",
 754:     "        # Load and analyze\n",
 755:     "        if reviewer.load_manuscript(temp_path):\n",
 756:     "            report = reviewer.generate_report()\n",
 757:     "            display_analysis_results(report)\n",
 758:     "        else:\n",
 759:     "            print(\"❌ Failed to load manuscript\")\n",
 760:     "\n",
 761:     "def display_analysis_results(report):\n",
 762:     "    \"\"\"Display comprehensive analysis results\"\"\"\n",
 763:     "    print(\"📊 MANUSCRIPT ANALYSIS REPORT\")\n",
 764:     "    print(\"=\" * 50)\n",
 765:     "    \n",
 766:     "    # Section completeness\n",
 767:     "    print(\"\\n📝 SECTION COMPLETENESS:\")\n",
 768:     "    for section, content in report['sections'].items():\n",
 769:     "        status = \"✅\" if content.strip() else \"❌\"\n",
 770:     "        length = len(content.split()) if content else 0\n",
 771:     "        print(f\"  {status} {section}: {length} words\")\n",
 772:     "    \n",
 773:     "    # Citation analysis\n",
 774:     "    print(f\"\\n📚 CITATION ANALYSIS:\")\n",
 775:     "    print(f\"  Total citations found: {report['citations']['total_citations']}\")\n",
 776:     "    print(f\"  Potentially uncited claims: {report['citations']['uncited_claims']}\")\n",
 777:     "    \n",
 778:     "    if report['citations']['uncited_sentences']:\n",
 779:     "        print(\"  Examples of uncited claims:\")\n",
 780:     "        for i, sentence in enumerate(report['citations']['uncited_sentences'], 1):\n",
 781:     "            print(f\"    {i}. {sentence[:100]}...\")\n",
 782:     "    \n",
 783:     "    # Mathematical content\n",
 784:     "    print(f\"\\n🧮 MATHEMATICAL CONTENT:\")\n",
 785:     "    print(f\"  Equations: {report['mathematics']['equations']}\")\n",
 786:     "    print(f\"  Inline math: {report['mathematics']['inline_math']}\")\n",
 787:     "    print(f\"  Proofs: {report['mathematics']['proofs']}\")\n",
 788:     "    print(f\"  Theorems: {report['mathematics']['theorems']}\")\n",
 789:     "    \n",
 790:     "    if report['mathematics']['incomplete_derivations']:\n",
 791:     "        print(f\"  ⚠️  Incomplete derivations: {len(report['mathematics']['incomplete_derivations'])}\")\n",
 792:     "    \n",
 793:     "    # Issues summary\n",
 794:     "    print(f\"\\n⚠️  ISSUES FOUND: {report['total_issues']}\")\n",
 795:     "    for i, issue in enumerate(report['issues'], 1):\n",
 796:     "        print(f\"  {i}. {issue}\")\n",
 797:     "\n",
 798:     "# Create upload widget\n",
 799:     "upload_widget = create_upload_widget()\n",
 800:     "upload_widget.observe(analyze_manuscript_uploaded, names='value')\n",
 801:     "\n",
 802:     "print(\"📁 Upload your manuscript to begin analysis:\")\n",
 803:     "display(upload_widget)\n"
 804:    ]
 805:   },
 806:   {
 807:    "cell_type": "markdown",
 808:    "metadata": {},
 809:    "source": [
 810:     "## 3. Content Generation and Enhancement\n"
 811:    ]
 812:   },
 813:   {
 814:    "cell_type": "code",
 815:    "execution_count": null,
 816:    "metadata": {},
 817:    "outputs": [],
 818:    "source": [
 819:     "# Enhanced ManuscriptReviewer with content generation capabilities\n",
 820:     "class EnhancedManuscriptReviewer(ManuscriptReviewer):\n",
 821:     "    def __init__(self, denario_instance):\n",
 822:     "        super().__init__(denario_instance)\n",
 823:     "        self.generated_content = {}\n",
 824:     "        self.citation_database = []\n",
 825:     "        \n",
 826:     "    def generate_missing_content(self, section_name, context=\"\"):\n",
 827:     "        \"\"\"Generate content for incomplete sections using Denario\"\"\"\n",
 828:     "        try:\n",
 829:     "            # Set up the research context\n",
 830:     "            self.den.set_data_description(f\"Generate content for {section_name} section. Context: {context}\")\n",
 831:     "            \n",
 832:     "            # Use Denario to generate ideas and methodology\n",
 833:     "            idea = self.den.get_idea_fast()\n",
 834:     "            method = self.den.get_method_fast()\n",
 835:     "            \n",
 836:     "            # Generate results if needed\n",
 837:     "            if section_name.lower() in ['results', 'discussion']:\n",
 838:     "                results = self.den.get_results()\n",
 839:     "                self.generated_content[section_name] = {\n",
 840:     "                    'idea': idea,\n",
 841:     "                    'method': method,\n",
 842:     "                    'results': results\n",
 843:     "                }\n",
 844:     "            else:\n",
 845:     "                self.generated_content[section_name] = {\n",
 846:     "                    'idea': idea,\n",
 847:     "                    'method': method\n",
 848:     "                }\n",
 849:     "            \n",
 850:     "            print(f\"✅ Generated content for {section_name}\")\n",
 851:     "            return self.generated_content[section_name]\n",
 852:     "            \n",
 853:     "        except Exception as e:\n",
 854:     "            print(f\"❌ Error generating content for {section_name}: {e}\")\n",
 855:     "            return None\n",
 856:     "    \n",
 857:     "    def add_citations_to_content(self, content, topic):\n",
 858:     "        \"\"\"Add relevant citations to generated content\"\"\"\n",
 859:     "        try:\n",
 860:     "            # Use Denario's research capabilities to find relevant papers\n",
 861:     "            self.den.set_data_description(f\"Find relevant citations for: {topic}\")\n",
 862:     "            \n",
 863:     "            # Generate research ideas that would include citations\n",
 864:     "            research_ideas = self.den.get_idea_fast()\n",
 865:     "            \n",
 866:     "            # Extract potential citation topics\n",
 867:     "            citation_topics = self._extract_citation_topics(research_ideas)\n",
 868:     "            \n",
 869:     "            # Generate cited content\n",
 870:     "            cited_content = self._integrate_citations(content, citation_topics)\n",
 871:     "            \n",
 872:     "            return cited_content\n",
 873:     "            \n",
 874:     "        except Exception as e:\n",
 875:     "            print(f\"❌ Error adding citations: {e}\")\n",
 876:     "            return content\n",
 877:     "    \n",
 878:     "    def _extract_citation_topics(self, research_text):\n",
 879:     "        \"\"\"Extract topics that need citations\"\"\"\n",
 880:     "        # Simple keyword extraction for citation topics\n",
 881:     "        keywords = ['method', 'approach', 'technique', 'model', 'algorithm', \n",
 882:     "                   'framework', 'theory', 'concept', 'finding', 'result']\n",
 883:     "        \n",
 884:     "        topics = []\n",
 885:     "        for keyword in keywords:\n",
 886:     "            if keyword in research_text.lower():\n",
 887:     "                topics.append(keyword)\n",
 888:     "        \n",
 889:     "        return topics\n",
 890:     "    \n",
 891:     "    def _integrate_citations(self, content, topics):\n",
 892:     "        \"\"\"Integrate citations into content\"\"\"\n",
 893:     "        cited_content = content\n",
 894:     "        for i, topic in enumerate(topics[:3]):  # Limit to 3 citations\n",
 895:     "            citation = f\"[{topic.capitalize()} et al., 2024]\"\n",
 896:     "            cited_content = cited_content.replace(topic, f\"{topic} {citation}\")\n",
 897:     "        \n",
 898:     "        return cited_content\n",
 899:     "    \n",
 900:     "    def verify_mathematics(self, equation_text):\n",
 901:     "        \"\"\"Verify mathematical derivations using Denario\"\"\"\n",
 902:     "        try:\n",
 903:     "            # Set up mathematical verification context\n",
 904:     "            self.den.set_data_description(f\"Verify this mathematical derivation: {equation_text}\")\n",
 905:     "            \n",
 906:     "            # Use Denario to analyze the mathematics\n",
 907:     "            analysis = self.den.get_idea_fast()\n",
 908:     "            \n",
 909:     "            # Check for common mathematical errors\n",
 910:     "            verification_result = self._check_math_errors(equation_text, analysis)\n",
 911:     "            \n",
 912:     "            return verification_result\n",
 913:     "            \n",
 914:     "        except Exception as e:\n",
 915:     "            print(f\"❌ Error verifying mathematics: {e}\")\n",
 916:     "            return {\"status\": \"error\", \"message\": str(e)}\n",
 917:     "    \n",
 918:     "    def _check_math_errors(self, equation, analysis):\n",
 919:     "        \"\"\"Check for mathematical errors\"\"\"\n",
 920:     "        errors = []\n",
 921:     "        \n",
 922:     "        # Check for common LaTeX errors\n",
 923:     "        if '\\\\' in equation and not equation.count('{') == equation.count('}'):\n",
 924:     "            errors.append(\"Mismatched braces in LaTeX\")\n",
 925:     "        \n",
 926:     "        # Check for division by zero\n",
 927:     "        if '/0' in equation or '/ 0' in equation:\n",
 928:     "            errors.append(\"Potential division by zero\")\n",
 929:     "        \n",
 930:     "        # Check for undefined variables\n",
 931:     "        if 'undefined' in analysis.lower():\n",
 932:     "            errors.append(\"Undefined variables detected\")\n",
 933:     "        \n",
 934:     "        return {\n",
 935:     "            \"status\": \"verified\" if not errors else \"errors_found\",\n",
 936:     "            \"errors\": errors,\n",
 937:     "            \"analysis\": analysis\n",
 938:     "        }\n",
 939:     "    \n",
 940:     "    def generate_complete_manuscript(self):\n",
 941:     "        \"\"\"Generate a complete manuscript with all sections\"\"\"\n",
 942:     "        complete_manuscript = {}\n",
 943:     "        \n",
 944:     "        # Generate each section\n",
 945:     "        sections = ['Abstract', 'Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion']\n",
 946:     "        \n",
 947:     "        for section in sections:\n",
 948:     "            if not self.sections.get(section, \"\").strip():\n",
 949:     "                print(f\"🔄 Generating {section} section...\")\n",
 950:     "                content = self.generate_missing_content(section)\n",
 951:     "                if content:\n",
 952:     "                    # Add citations\n",
 953:     "                    cited_content = self.add_citations_to_content(\n",
 954:     "                        content.get('idea', ''), \n",
 955:     "                        section\n",
 956:     "                    )\n",
 957:     "                    complete_manuscript[section] = cited_content\n",
 958:     "                else:\n",
 959:     "                    complete_manuscript[section] = f\"[{section} content generation failed]\"\n",
 960:     "            else:\n",
 961:     "                complete_manuscript[section] = self.sections[section]\n",
 962:     "        \n",
 963:     "        return complete_manuscript\n",
 964:     "\n",
 965:     "# Referee-aware manuscript reviewer with comment parsing and response generation\n",
 966:     "class RefereeAwareManuscriptReviewer(EnhancedManuscriptReviewer):\n",
 967:     "    def __init__(self, denario_instance):\n",
 968:     "        super().__init__(denario_instance)\n",
 969:     "        self.referee_comments = {}\n",
 970:     "        self.priority_issues = []\n",
 971:     "        self.comment_sections = {}\n",
 972:     "        \n",
 973:     "    def load_referee_report(self, report_text):\n",
 974:     "        \"\"\"Load and parse referee report from various formats\"\"\"\n",
 975:     "        try:\n",
 976:     "            # Try JSON format first\n",
 977:     "            if report_text.strip().startswith('{'):\n",
 978:     "                self.referee_comments = json.loads(report_text)\n",
 979:     "                print(\"✅ Loaded JSON format referee report\")\n",
 980:     "            else:\n",
 981:     "                # Parse text format\n",
 982:     "                self.referee_comments = self._parse_text_comments(report_text)\n",
 983:     "                print(\"✅ Loaded text format referee report\")\n",
 984:     "            \n",
 985:     "            # Identify priority issues\n",
 986:     "            self.priority_issues = self._identify_priority_issues()\n",
 987:     "            self.comment_sections = self._organize_comments_by_section()\n",
 988:     "            \n",
 989:     "            print(f\"📋 Parsed {len(self.priority_issues)} priority issues\")\n",
 990:     "            print(f\"📝 Organized comments for {len(self.comment_sections)} sections\")\n",
 991:     "            \n",
 992:     "            return True\n",
 993:     "            \n",
 994:     "        except Exception as e:\n",
 995:     "            print(f\"❌ Error loading referee report: {e}\")\n",
 996:     "            return False\n",
 997:     "    \n",
 998:     "    def _parse_text_comments(self, text):\n",
 999:     "        \"\"\"Parse text-based referee comments into structured format\"\"\"\n",
1000:     "        comments = {\n",
1001:     "            'major_issues': [],\n",
1002:     "            'minor_issues': [],\n",
1003:     "            'suggestions': [],\n",
1004:     "            'overall_recommendation': 'Unknown'\n",
1005:     "        }\n",
1006:     "        \n",
1007:     "        # Extract overall recommendation\n",
1008:     "        rec_pattern = r'(?:recommendation|decision)[:\\s]*(accept|reject|major revision|minor revision|revise and resubmit)'\n",
1009:     "        rec_match = re.search(rec_pattern, text, re.IGNORECASE)\n",
1010:     "        if rec_match:\n",
1011:     "            comments['overall_recommendation'] = rec_match.group(1).title()\n",
1012:     "        \n",
1013:     "        # Parse major issues\n",
1014:     "        major_pattern = r'major issues?[:\\s]*(.*?)(?=minor|suggestions|$|recommendation)'\n",
1015:     "        major_match = re.search(major_pattern, text, re.IGNORECASE | re.DOTALL)\n",
1016:     "        if major_match:\n",
1017:     "            major_text = major_match.group(1).strip()\n",
1018:     "            major_issues = self._extract_individual_comments(major_text)\n",
1019:     "            comments['major_issues'] = major_issues\n",
1020:     "        \n",
1021:     "        # Parse minor issues\n",
1022:     "        minor_pattern = r'minor issues?[:\\s]*(.*?)(?=major|suggestions|$|recommendation)'\n",
1023:     "        minor_match = re.search(minor_pattern, text, re.IGNORECASE | re.DOTALL)\n",
1024:     "        if minor_match:\n",
1025:     "            minor_text = minor_match.group(1).strip()\n",
1026:     "            minor_issues = self._extract_individual_comments(minor_text)\n",
1027:     "            comments['minor_issues'] = minor_issues\n",
1028:     "        \n",
1029:     "        # Parse suggestions\n",
1030:     "        suggestions_pattern = r'suggestions?[:\\s]*(.*?)(?=major|minor|$|recommendation)'\n",
1031:     "        suggestions_match = re.search(suggestions_pattern, text, re.IGNORECASE | re.DOTALL)\n",
1032:     "        if suggestions_match:\n",
1033:     "            suggestions_text = suggestions_match.group(1).strip()\n",
1034:     "            suggestions = self._extract_individual_comments(suggestions_text)\n",
1035:     "            comments['suggestions'] = suggestions\n",
1036:     "        \n",
1037:     "        return comments\n",
1038:     "    \n",
1039:     "    def _extract_individual_comments(self, text):\n",
1040:     "        \"\"\"Extract individual comments from a section\"\"\"\n",
1041:     "        comments = []\n",
1042:     "        \n",
1043:     "        # Split by numbered items or bullet points\n",
1044:     "        items = re.split(r'\\n\\s*(?:\\d+\\.|\\*|\\-)\\s*', text)\n",
1045:     "        \n",
1046:     "        for item in items:\n",
1047:     "            item = item.strip()\n",
1048:     "            if len(item) > 10:  # Filter out very short items\n",
1049:     "                # Try to extract section and line references\n",
1050:     "                section_match = re.search(r'(?:section|chapter)\\s*([a-zA-Z0-9\\s]+)', item, re.IGNORECASE)\n",
1051:     "                line_match = re.search(r'line\\s*(\\d+)', item, re.IGNORECASE)\n",
1052:     "                \n",
1053:     "                comment = {\n",
1054:     "                    'text': item,\n",
1055:     "                    'section': section_match.group(1).strip() if section_match else 'General',\n",
1056:     "                    'line': int(line_match.group(1)) if line_match else None\n",
1057:     "                }\n",
1058:     "                comments.append(comment)\n",
1059:     "        \n",
1060:     "        return comments\n",
1061:     "    \n",
1062:     "    def _identify_priority_issues(self):\n",
1063:     "        \"\"\"Identify and prioritize issues from referee comments\"\"\"\n",
1064:     "        priority_issues = []\n",
1065:     "        \n",
1066:     "        # Major issues are highest priority\n",
1067:     "        for issue in self.referee_comments.get('major_issues', []):\n",
1068:     "            priority_issues.append({\n",
1069:     "                'priority': 'HIGH',\n",
1070:     "                'type': 'Major Issue',\n",
1071:     "                'section': issue.get('section', 'General'),\n",
1072:     "                'text': issue.get('text', ''),\n",
1073:     "                'line': issue.get('line')\n",
1074:     "            })\n",
1075:     "        \n",
1076:     "        # Minor issues are medium priority\n",
1077:     "        for issue in self.referee_comments.get('minor_issues', []):\n",
1078:     "            priority_issues.append({\n",
1079:     "                'priority': 'MEDIUM',\n",
1080:     "                'type': 'Minor Issue',\n",
1081:     "                'section': issue.get('section', 'General'),\n",
1082:     "                'text': issue.get('text', ''),\n",
1083:     "                'line': issue.get('line')\n",
1084:     "            })\n",
1085:     "        \n",
1086:     "        # Suggestions are lower priority\n",
1087:     "        for suggestion in self.referee_comments.get('suggestions', []):\n",
1088:     "            priority_issues.append({\n",
1089:     "                'priority': 'LOW',\n",
1090:     "                'type': 'Suggestion',\n",
1091:     "                'section': suggestion.get('section', 'General'),\n",
1092:     "                'text': suggestion.get('text', ''),\n",
1093:     "                'line': suggestion.get('line')\n",
1094:     "            })\n",
1095:     "        \n",
1096:     "        return priority_issues\n",
1097:     "    \n",
1098:     "    def _organize_comments_by_section(self):\n",
1099:     "        \"\"\"Organize comments by manuscript section\"\"\"\n",
1100:     "        section_comments = {}\n",
1101:     "        \n",
1102:     "        for issue in self.priority_issues:\n",
1103:     "            section = issue['section']\n",
1104:     "            if section not in section_comments:\n",
1105:     "                section_comments[section] = []\n",
1106:     "            section_comments[section].append(issue)\n",
1107:     "        \n",
1108:     "        return section_comments\n",
1109:     "    \n",
1110:     "    def generate_referee_response(self, section_name):\n",
1111:     "        \"\"\"Generate content that addresses referee comments for a specific section\"\"\"\n",
1112:     "        relevant_comments = self.comment_sections.get(section_name, [])\n",
1113:     "        \n",
1114:     "        if not relevant_comments:\n",
1115:     "            print(f\"ℹ️  No referee comments found for {section_name}\")\n",
1116:     "            return None\n",
1117:     "        \n",
1118:     "        # Create context from referee comments\n",
1119:     "        comment_context = f\"Address these referee comments for {section_name}:\\n\"\n",
1120:     "        for i, comment in enumerate(relevant_comments, 1):\n",
1121:     "            comment_context += f\"{i}. [{comment['priority']}] {comment['text']}\\n\"\n",
1122:     "        \n",
1123:     "        print(f\"🔄 Generating response for {section_name} addressing {len(relevant_comments)} comments...\")\n",
1124:     "        \n",
1125:     "        # Generate content using Denario\n",
1126:     "        response_content = self.generate_missing_content(section_name, comment_context)\n",
1127:     "        \n",
1128:     "        if response_content:\n",
1129:     "            # Add specific responses to each comment\n",
1130:     "            detailed_response = self._generate_detailed_responses(response_content, relevant_comments)\n",
1131:     "            return detailed_response\n",
1132:     "        \n",
1133:     "        return None\n",
1134:     "    \n",
1135:     "    def _generate_detailed_responses(self, content, comments):\n",
1136:     "        \"\"\"Generate detailed responses to specific referee comments\"\"\"\n",
1137:     "        detailed_responses = {\n",
1138:     "            'generated_content': content,\n",
1139:     "            'comment_responses': []\n",
1140:     "        }\n",
1141:     "        \n",
1142:     "        for comment in comments:\n",
1143:     "            response = {\n",
1144:     "                'comment': comment['text'],\n",
1145:     "                'priority': comment['priority'],\n",
1146:     "                'response': f\"Addressed in generated content: {comment['text'][:100]}...\"\n",
1147:     "            }\n",
1148:     "            detailed_responses['comment_responses'].append(response)\n",
1149:     "        \n",
1150:     "        return detailed_responses\n",
1151:     "    \n",
1152:     "    def generate_comprehensive_response(self):\n",
1153:     "        \"\"\"Generate comprehensive response addressing all referee comments\"\"\"\n",
1154:     "        comprehensive_response = {}\n",
1155:     "        \n",
1156:     "        # Get all sections with comments\n",
1157:     "        sections_with_comments = list(self.comment_sections.keys())\n",
1158:     "        \n",
1159:     "        print(f\"📝 Generating comprehensive response for {len(sections_with_comments)} sections...\")\n",
1160:     "        \n",
1161:     "        for section in sections_with_comments:\n",
1162:     "            print(f\"  🔄 Processing {section}...\")\n",
1163:     "            response = self.generate_referee_response(section)\n",
1164:     "            if response:\n",
1165:     "                comprehensive_response[section] = response\n",
1166:     "        \n",
1167:     "        return comprehensive_response\n",
1168:     "    \n",
1169:     "    def display_referee_summary(self):\n",
1170:     "        \"\"\"Display summary of referee comments and responses\"\"\"\n",
1171:     "        print(\"📋 REFEREE REPORT SUMMARY\")\n",
1172:     "        print(\"=\" * 50)\n",
1173:     "        \n",
1174:     "        # Overall recommendation\n",
1175:     "        recommendation = self.referee_comments.get('overall_recommendation', 'Unknown')\n",
1176:     "        print(f\"📊 Overall Recommendation: {recommendation}\")\n",
1177:     "        \n",
1178:     "        # Priority breakdown\n",
1179:     "        high_priority = [i for i in self.priority_issues if i['priority'] == 'HIGH']\n",
1180:     "        medium_priority = [i for i in self.priority_issues if i['priority'] == 'MEDIUM']\n",
1181:     "        low_priority = [i for i in self.priority_issues if i['priority'] == 'LOW']\n",
1182:     "        \n",
1183:     "        print(f\"\\n⚠️  Priority Issues:\")\n",
1184:     "        print(f\"  🔴 High Priority: {len(high_priority)}\")\n",
1185:     "        print(f\"  🟡 Medium Priority: {len(medium_priority)}\")\n",
1186:     "        print(f\"  🟢 Low Priority: {len(low_priority)}\")\n",
1187:     "        \n",
1188:     "        # Section breakdown\n",
1189:     "        print(f\"\\n📝 Comments by Section:\")\n",
1190:     "        for section, comments in self.comment_sections.items():\n",
1191:     "            print(f\"  • {section}: {len(comments)} comments\")\n",
1192:     "        \n",
1193:     "        # Show high priority issues\n",
1194:     "        if high_priority:\n",
1195:     "            print(f\"\\n🔴 HIGH PRIORITY ISSUES:\")\n",
1196:     "            for i, issue in enumerate(high_priority[:3], 1):\n",
1197:     "                print(f\"  {i}. [{issue['section']}] {issue['text'][:100]}...\")\n",
1198:     "\n",
1199:     "# Initialize enhanced reviewer\n",
1200:     "enhanced_reviewer = EnhancedManuscriptReviewer(den)\n",
1201:     "\n",
1202:     "# Initialize referee-aware reviewer\n",
1203:     "referee_reviewer = RefereeAwareManuscriptReviewer(den)\n",
1204:     "\n",
1205:     "print(\"🚀 Enhanced Manuscript Reviewer with content generation capabilities initialized!\")\n",
1206:     "print(\"📋 Referee-Aware Manuscript Reviewer with comment parsing initialized!\")\n"
1207:    ]
1208:   },
1209:   {
1210:    "cell_type": "markdown",
1211:    "metadata": {},
1212:    "source": [
1213:     "## 4. Referee Report Upload and Analysis Interface\n"
1214:    ]
1215:   },
1216:   {
1217:    "cell_type": "code",
1218:    "execution_count": null,
1219:    "metadata": {},
1220:    "outputs": [],
1221:    "source": [
1222:     "# Referee report upload and analysis interface\n",
1223:     "def create_referee_report_interface():\n",
1224:     "    \"\"\"Create interactive interface for referee report upload and analysis\"\"\"\n",
1225:     "    \n",
1226:     "    # Referee report upload widget\n",
1227:     "    referee_upload = widgets.FileUpload(\n",
1228:     "        accept='.txt,.md,.json',\n",
1229:     "        multiple=False,\n",
1230:     "        description='Upload Referee Report',\n",
1231:     "        style={'description_width': 'initial'}\n",
1232:     "    )\n",
1233:     "    \n",
1234:     "    # Text input for pasting referee comments\n",
1235:     "    referee_text_input = widgets.Textarea(\n",
1236:     "        value='',\n",
1237:     "        placeholder='Or paste referee comments directly here...',\n",
1238:     "        description='Referee Comments:',\n",
1239:     "        style={'description_width': 'initial'},\n",
1240:     "        layout=widgets.Layout(width='100%', height='200px')\n",
1241:     "    )\n",
1242:     "    \n",
1243:     "    # Load referee report button\n",
1244:     "    load_referee_button = widgets.Button(\n",
1245:     "        description='Load Referee Report',\n",
1246:     "        button_style='info',\n",
1247:     "        icon='upload'\n",
1248:     "    )\n",
1249:     "    \n",
1250:     "    # Display referee summary button\n",
1251:     "    summary_button = widgets.Button(\n",
1252:     "        description='Show Referee Summary',\n",
1253:     "        button_style='warning',\n",
1254:     "        icon='list'\n",
1255:     "    )\n",
1256:     "    \n",
1257:     "    # Generate responses button\n",
1258:     "    generate_responses_button = widgets.Button(\n",
1259:     "        description='Generate Responses',\n",
1260:     "        button_style='success',\n",
1261:     "        icon='reply'\n",
1262:     "    )\n",
1263:     "    \n",
1264:     "    # Output area\n",
1265:     "    referee_output = widgets.Output()\n",
1266:     "    \n",
1267:     "    def on_load_referee_clicked(b):\n",
1268:     "        with referee_output:\n",
1269:     "            referee_output.clear_output()\n",
1270:     "            \n",
1271:     "            # Check if file was uploaded\n",
1272:     "            if referee_upload.value:\n",
1273:     "                uploaded_file = list(referee_upload.value.values())[0]\n",
1274:     "                report_text = uploaded_file['content'].decode('utf-8')\n",
1275:     "                print(f\"📄 Loaded referee report from file: {uploaded_file['name']}\")\n",
1276:     "            elif referee_text_input.value.strip():\n",
1277:     "                report_text = referee_text_input.value\n",
1278:     "                print(\"📄 Loaded referee report from text input\")\n",
1279:     "            else:\n",
1280:     "                print(\"❌ Please upload a file or paste referee comments\")\n",
1281:     "                return\n",
1282:     "            \n",
1283:     "            # Load the referee report\n",
1284:     "            if referee_reviewer.load_referee_report(report_text):\n",
1285:     "                print(\"✅ Referee report loaded successfully!\")\n",
1286:     "                print(\"📋 Use 'Show Referee Summary' to see parsed comments\")\n",
1287:     "                print(\"🔄 Use 'Generate Responses' to create responses to comments\")\n",
1288:     "            else:\n",
1289:     "                print(\"❌ Failed to load referee report\")\n",
1290:     "    \n",
1291:     "    def on_show_summary_clicked(b):\n",
1292:     "        with referee_output:\n",
1293:     "            referee_output.clear_output()\n",
1294:     "            \n",
1295:     "            if not referee_reviewer.priority_issues:\n",
1296:     "                print(\"❌ No referee report loaded. Please load a report first.\")\n",
1297:     "                return\n",
1298:     "            \n",
1299:     "            referee_reviewer.display_referee_summary()\n",
1300:     "    \n",
1301:     "    def on_generate_responses_clicked(b):\n",
1302:     "        with referee_output:\n",
1303:     "            referee_output.clear_output()\n",
1304:     "            \n",
1305:     "            if not referee_reviewer.priority_issues:\n",
1306:     "                print(\"❌ No referee report loaded. Please load a report first.\")\n",
1307:     "                return\n",
1308:     "            \n",
1309:     "            print(\"🚀 Generating comprehensive responses to referee comments...\")\n",
1310:     "            print(\"=\" * 60)\n",
1311:     "            \n",
1312:     "            # Generate comprehensive response\n",
1313:     "            comprehensive_response = referee_reviewer.generate_comprehensive_response()\n",
1314:     "            \n",
1315:     "            if comprehensive_response:\n",
1316:     "                print(\"✅ Generated responses for all sections with comments!\")\n",
1317:     "                print(\"\\n📝 RESPONSE SUMMARY:\")\n",
1318:     "                print(\"=\" * 30)\n",
1319:     "                \n",
1320:     "                for section, response in comprehensive_response.items():\n",
1321:     "                    print(f\"\\n🔹 {section.upper()}:\")\n",
1322:     "                    print(f\"  Generated content: {len(response['generated_content'].get('idea', ''))} characters\")\n",
1323:     "                    print(f\"  Comments addressed: {len(response['comment_responses'])}\")\n",
1324:     "                    \n",
1325:     "                    # Show first few comment responses\n",
1326:     "                    for i, comment_resp in enumerate(response['comment_responses'][:2], 1):\n",
1327:     "                        print(f\"    {i}. [{comment_resp['priority']}] {comment_resp['comment'][:80]}...\")\n",
1328:     "                \n",
1329:     "                print(f\"\\n💾 Responses generated for {len(comprehensive_response)} sections\")\n",
1330:     "                print(\"📄 Use the content generation interface to refine individual sections\")\n",
1331:     "            else:\n",
1332:     "                print(\"❌ Failed to generate responses\")\n",
1333:     "    \n",
1334:     "    # Connect button events\n",
1335:     "    load_referee_button.on_click(on_load_referee_clicked)\n",
1336:     "    summary_button.on_click(on_show_summary_clicked)\n",
1337:     "    generate_responses_button.on_click(on_generate_responses_clicked)\n",
1338:     "    \n",
1339:     "    # Layout\n",
1340:     "    interface = widgets.VBox([\n",
1341:     "        widgets.HTML(\"<h3>📋 Referee Report Analysis</h3>\"),\n",
1342:     "        widgets.HTML(\"<p>Upload a referee report file or paste comments directly:</p>\"),\n",
1343:     "        widgets.HBox([referee_upload, load_referee_button]),\n",
1344:     "        referee_text_input,\n",
1345:     "        widgets.HBox([summary_button, generate_responses_button]),\n",
1346:     "        referee_output\n",
1347:     "    ])\n",
1348:     "    \n",
1349:     "    return interface\n",
1350:     "\n",
1351:     "# Create and display referee report interface\n",
1352:     "referee_interface = create_referee_report_interface()\n",
1353:     "display(referee_interface)\n"
1354:    ]
1355:   },
1356:   {
1357:    "cell_type": "code",
1358:    "execution_count": null,
1359:    "metadata": {},
1360:    "outputs": [],
1361:    "source": [
1362:     "## 5. Interactive Content Generation Interface\n",
1363:     "\n",
1364:     "# Interactive widgets for content generation\n",
1365:     "def create_content_generation_interface():\n",
1366:     "    \"\"\"Create interactive interface for content generation\"\"\"\n",
1367:     "    \n",
1368:     "    # Section selection\n",
1369:     "    section_dropdown = widgets.Dropdown(\n",
1370:     "        options=['Abstract', 'Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion'],\n",
1371:     "        value='Introduction',\n",
1372:     "        description='Section:',\n",
1373:     "        style={'description_width': 'initial'}\n",
1374:     "    )\n",
1375:     "    \n",
1376:     "    # Context input\n",
1377:     "    context_text = widgets.Textarea(\n",
1378:     "        value='',\n",
1379:     "        placeholder='Enter context or topic for this section...',\n",
1380:     "        description='Context:',\n",
1381:     "        style={'description_width': 'initial'},\n",
1382:     "        layout=widgets.Layout(width='100%', height='100px')\n",
1383:     "    )\n",
1384:     "    \n",
1385:     "    # Generate button\n",
1386:     "    generate_button = widgets.Button(\n",
1387:     "        description='Generate Content',\n",
1388:     "        button_style='success',\n",
1389:     "        icon='plus'\n",
1390:     "    )\n",
1391:     "    \n",
1392:     "    # Output area\n",
1393:     "    output_area = widgets.Output()\n",
1394:     "    \n",
1395:     "    def on_generate_clicked(b):\n",
1396:     "        with output_area:\n",
1397:     "            output_area.clear_output()\n",
1398:     "            section = section_dropdown.value\n",
1399:     "            context = context_text.value\n",
1400:     "            \n",
1401:     "            print(f\"🔄 Generating content for {section}...\")\n",
1402:     "            print(f\"Context: {context}\")\n",
1403:     "            print(\"-\" * 50)\n",
1404:     "            \n",
1405:     "            # Generate content\n",
1406:     "            content = enhanced_reviewer.generate_missing_content(section, context)\n",
1407:     "            \n",
1408:     "            if content:\n",
1409:     "                print(f\"✅ Generated {section} content:\")\n",
1410:     "                print(\"=\" * 30)\n",
1411:     "                \n",
1412:     "                for key, value in content.items():\n",
1413:     "                    print(f\"\\n{key.upper()}:\")\n",
1414:     "                    print(value)\n",
1415:     "                    print(\"-\" * 20)\n",
1416:     "                \n",
1417:     "                # Add citations\n",
1418:     "                print(\"\\n📚 Adding citations...\")\n",
1419:     "                cited_content = enhanced_reviewer.add_citations_to_content(\n",
1420:     "                    content.get('idea', ''), \n",
1421:     "                    section\n",
1422:     "                )\n",
1423:     "                print(\"Cited content:\")\n",
1424:     "                print(cited_content)\n",
1425:     "            else:\n",
1426:     "                print(\"❌ Failed to generate content\")\n",
1427:     "    \n",
1428:     "    generate_button.on_click(on_generate_clicked)\n",
1429:     "    \n",
1430:     "    # Layout\n",
1431:     "    interface = widgets.VBox([\n",
1432:     "        widgets.HTML(\"<h3>📝 Content Generation Interface</h3>\"),\n",
1433:     "        widgets.HBox([section_dropdown, generate_button]),\n",
1434:     "        context_text,\n",
1435:     "        output_area\n",
1436:     "    ])\n",
1437:     "    \n",
1438:     "    return interface\n",
1439:     "\n",
1440:     "# Create and display interface\n",
1441:     "content_interface = create_content_generation_interface()\n",
1442:     "display(content_interface)\n"
1443:    ]
1444:   },
1445:   {
1446:    "cell_type": "code",
1447:    "execution_count": null,
1448:    "metadata": {},
1449:    "outputs": [],
1450:    "source": [
1451:     "# Auto-analysis function for ragbook converted files\n",
1452:     "def auto_analyze_converted_jsonl():\n",
1453:     "    \"\"\"Automatically analyze the most recently converted JSONL file\"\"\"\n",
1454:     "    global current_jsonl_path\n",
1455:     "    \n",
1456:     "    if 'current_jsonl_path' in globals() and current_jsonl_path and os.path.exists(current_jsonl_path):\n",
1457:     "        print(f\"🔄 Auto-analyzing converted JSONL: {current_jsonl_path}\")\n",
1458:     "        print(\"=\" * 60)\n",
1459:     "        \n",
1460:     "        # Load and analyze the JSONL file\n",
1461:     "        jsonl_parser = JSONLManuscriptParser()\n",
1462:     "        if jsonl_parser.load_jsonl(current_jsonl_path):\n",
1463:     "            # Generate comprehensive analysis report\n",
1464:     "            report = generate_jsonl_analysis_report(jsonl_parser)\n",
1465:     "            display_jsonl_analysis_results(report)\n",
1466:     "            \n",
1467:     "            print(\"\\n🎯 RICH STRUCTURED ANALYSIS COMPLETE!\")\n",
1468:     "            print(\"📊 This analysis includes:\")\n",
1469:     "            print(\"  • Semantic prose chunks with context\")\n",
1470:     "            print(\"  • Normalized mathematical equations\")\n",
1471:     "            print(\"  • Figure metadata and captions\")\n",
1472:     "            print(\"  • Table data exported to CSV\")\n",
1473:     "            print(\"  • Cross-references and citations\")\n",
1474:     "            \n",
1475:     "            return True\n",
1476:     "        else:\n",
1477:     "            print(\"❌ Failed to load converted JSONL file\")\n",
1478:     "            return False\n",
1479:     "    else:\n",
1480:     "        print(\"ℹ️  No converted JSONL file found. Please convert a LaTeX file first.\")\n",
1481:     "        return False\n",
1482:     "\n",
1483:     "# Create a button to trigger auto-analysis\n",
1484:     "auto_analyze_button = widgets.Button(\n",
1485:     "    description='Analyze Converted JSONL',\n",
1486:     "    button_style='info',\n",
1487:     "    icon='search'\n",
1488:     ")\n",
1489:     "\n",
1490:     "def on_auto_analyze_clicked(b):\n",
1491:     "    auto_analyze_converted_jsonl()\n",
1492:     "\n",
1493:     "auto_analyze_button.on_click(on_auto_analyze_clicked)\n",
1494:     "\n",
1495:     "print(\"🔄 Auto-analysis function for ragbook conversions loaded!\")\n",
1496:     "print(\"💡 Use the 'Analyze Converted JSONL' button below after converting a LaTeX file\")\n"
1497:    ]
1498:   },
1499:   {
1500:    "cell_type": "code",
1501:    "execution_count": null,
1502:    "metadata": {},
1503:    "outputs": [],
1504:    "source": [
1505:     "# Display the auto-analyze button\n",
1506:     "display(auto_analyze_button)\n"
1507:    ]
1508:   },
1509:   {
1510:    "cell_type": "code",
1511:    "execution_count": null,
1512:    "metadata": {},
1513:    "outputs": [],
1514:    "source": [
1515:     "# Enhanced analysis function with JSONL support\n",
1516:     "def analyze_manuscript_uploaded_enhanced(change):\n",
1517:     "    \"\"\"Analyze uploaded manuscript with JSONL support\"\"\"\n",
1518:     "    if change['new']:\n",
1519:     "        # Get the uploaded file\n",
1520:     "        uploaded_file = list(change['owner'].value.values())[0]\n",
1521:     "        file_name = uploaded_file['name']\n",
1522:     "        \n",
1523:     "        # Save to temporary file\n",
1524:     "        temp_path = f\"/tmp/manuscript_{file_name}\"\n",
1525:     "        with open(temp_path, 'wb') as f:\n",
1526:     "            f.write(uploaded_file['content'])\n",
1527:     "        \n",
1528:     "        # Check file type and use appropriate parser\n",
1529:     "        if file_name.endswith('.jsonl'):\n",
1530:     "            print(f\"📄 Processing JSONL file: {file_name}\")\n",
1531:     "            print(\"🔍 Using ragbook JSONL parser for structured analysis...\")\n",
1532:     "            jsonl_parser = JSONLManuscriptParser()\n",
1533:     "            if jsonl_parser.load_jsonl(temp_path):\n",
1534:     "                # Generate analysis report for JSONL\n",
1535:     "                report = generate_jsonl_analysis_report(jsonl_parser)\n",
1536:     "                display_jsonl_analysis_results(report)\n",
1537:     "                print(\"\\n✅ JSONL analysis complete! Rich structured data detected.\")\n",
1538:     "            else:\n",
1539:     "                print(\"❌ Failed to load JSONL file\")\n",
1540:     "        else:\n",
1541:     "            print(f\"📄 Processing {file_name} with standard parser...\")\n",
1542:     "            # Use regular manuscript reviewer for other formats\n",
1543:     "            if reviewer.load_manuscript(temp_path):\n",
1544:     "                report = reviewer.generate_report()\n",
1545:     "                display_analysis_results(report)\n",
1546:     "            else:\n",
1547:     "                print(\"❌ Failed to load manuscript\")\n",
1548:     "\n",
1549:     "print(\"🚀 Enhanced analysis function with JSONL support loaded!\")\n"
1550:    ]
1551:   },
1552:   {
1553:    "cell_type": "markdown",
1554:    "metadata": {},
1555:    "source": [
1556:     "## 6. Mathematical Verification Interface\n"
1557:    ]
1558:   },
1559:   {
1560:    "cell_type": "code",
1561:    "execution_count": null,
1562:    "metadata": {},
1563:    "outputs": [],
1564:    "source": [
1565:     "# Mathematical verification interface\n",
1566:     "def create_math_verification_interface():\n",
1567:     "    \"\"\"Create interface for mathematical verification\"\"\"\n",
1568:     "    \n",
1569:     "    # Equation input\n",
1570:     "    equation_input = widgets.Textarea(\n",
1571:     "        value='',\n",
1572:     "        placeholder='Enter LaTeX equation or mathematical expression to verify...',\n",
1573:     "        description='Equation:',\n",
1574:     "        style={'description_width': 'initial'},\n",
1575:     "        layout=widgets.Layout(width='100%', height='120px')\n",
1576:     "    )\n",
1577:     "    \n",
1578:     "    # Verify button\n",
1579:     "    verify_button = widgets.Button(\n",
1580:     "        description='Verify Mathematics',\n",
1581:     "        button_style='info',\n",
1582:     "        icon='check'\n",
1583:     "    )\n",
1584:     "    \n",
1585:     "    # Output area\n",
1586:     "    math_output = widgets.Output()\n",
1587:     "    \n",
1588:     "    def on_verify_clicked(b):\n",
1589:     "        with math_output:\n",
1590:     "            math_output.clear_output()\n",
1591:     "            equation = equation_input.value.strip()\n",
1592:     "            \n",
1593:     "            if not equation:\n",
1594:     "                print(\"❌ Please enter an equation to verify\")\n",
1595:     "                return\n",
1596:     "            \n",
1597:     "            print(f\"🧮 Verifying equation: {equation}\")\n",
1598:     "            print(\"-\" * 50)\n",
1599:     "            \n",
1600:     "            # Verify the mathematics\n",
1601:     "            result = enhanced_reviewer.verify_mathematics(equation)\n",
1602:     "            \n",
1603:     "            if result['status'] == 'verified':\n",
1604:     "                print(\"✅ Mathematics verification passed!\")\n",
1605:     "                print(f\"Analysis: {result['analysis']}\")\n",
1606:     "            elif result['status'] == 'errors_found':\n",
1607:     "                print(\"⚠️  Mathematical errors detected:\")\n",
1608:     "                for error in result['errors']:\n",
1609:     "                    print(f\"  • {error}\")\n",
1610:     "                print(f\"Analysis: {result['analysis']}\")\n",
1611:     "            else:\n",
1612:     "                print(f\"❌ Verification failed: {result['message']}\")\n",
1613:     "    \n",
1614:     "    verify_button.on_click(on_verify_clicked)\n",
1615:     "    \n",
1616:     "    # Layout\n",
1617:     "    interface = widgets.VBox([\n",
1618:     "        widgets.HTML(\"<h3>🧮 Mathematical Verification</h3>\"),\n",
1619:     "        equation_input,\n",
1620:     "        verify_button,\n",
1621:     "        math_output\n",
1622:     "    ])\n",
1623:     "    \n",
1624:     "    return interface\n",
1625:     "\n",
1626:     "# Create and display interface\n",
1627:     "math_interface = create_math_verification_interface()\n",
1628:     "display(math_interface)\n"
1629:    ]
1630:   },
1631:   {
1632:    "cell_type": "markdown",
1633:    "metadata": {},
1634:    "source": [
1635:     "## 7. Complete Manuscript Generation\n"
1636:    ]
1637:   },
1638:   {
1639:    "cell_type": "code",
1640:    "execution_count": null,
1641:    "metadata": {},
1642:    "outputs": [],
1643:    "source": [
1644:     "# Complete manuscript generation interface\n",
1645:     "def create_complete_manuscript_interface():\n",
1646:     "    \"\"\"Create interface for generating complete manuscripts\"\"\"\n",
1647:     "    \n",
1648:     "    # Generate complete manuscript button\n",
1649:     "    generate_complete_button = widgets.Button(\n",
1650:     "        description='Generate Complete Manuscript',\n",
1651:     "        button_style='warning',\n",
1652:     "        icon='file-text',\n",
1653:     "        layout=widgets.Layout(width='300px', height='50px')\n",
1654:     "    )\n",
1655:     "    \n",
1656:     "    # Export options\n",
1657:     "    export_format = widgets.Dropdown(\n",
1658:     "        options=['LaTeX', 'Markdown', 'Plain Text'],\n",
1659:     "        value='LaTeX',\n",
1660:     "        description='Export Format:',\n",
1661:     "        style={'description_width': 'initial'}\n",
1662:     "    )\n",
1663:     "    \n",
1664:     "    # Output area\n",
1665:     "    complete_output = widgets.Output()\n",
1666:     "    \n",
1667:     "    def on_generate_complete_clicked(b):\n",
1668:     "        with complete_output:\n",
1669:     "            complete_output.clear_output()\n",
1670:     "            \n",
1671:     "            print(\"🚀 Generating complete manuscript...\")\n",
1672:     "            print(\"=\" * 50)\n",
1673:     "            \n",
1674:     "            # Generate complete manuscript\n",
1675:     "            complete_manuscript = enhanced_reviewer.generate_complete_manuscript()\n",
1676:     "            \n",
1677:     "            if complete_manuscript:\n",
1678:     "                print(\"✅ Complete manuscript generated!\")\n",
1679:     "                print(\"\\n📄 MANUSCRIPT SECTIONS:\")\n",
1680:     "                print(\"=\" * 30)\n",
1681:     "                \n",
1682:     "                for section, content in complete_manuscript.items():\n",
1683:     "                    print(f\"\\n{section.upper()}:\")\n",
1684:     "                    print(\"-\" * 20)\n",
1685:     "                    print(content[:500] + \"...\" if len(content) > 500 else content)\n",
1686:     "                    print(f\"[{len(content)} characters]\")\n",
1687:     "                \n",
1688:     "                # Export functionality\n",
1689:     "                export_format_val = export_format.value\n",
1690:     "                print(f\"\\n💾 Exporting as {export_format_val}...\")\n",
1691:     "                \n",
1692:     "                if export_format_val == 'LaTeX':\n",
1693:     "                    export_latex(complete_manuscript)\n",
1694:     "                elif export_format_val == 'Markdown':\n",
1695:     "                    export_markdown(complete_manuscript)\n",
1696:     "                else:\n",
1697:     "                    export_text(complete_manuscript)\n",
1698:     "                \n",
1699:     "            else:\n",
1700:     "                print(\"❌ Failed to generate complete manuscript\")\n",
1701:     "    \n",
1702:     "    def export_latex(manuscript):\n",
1703:     "        \"\"\"Export manuscript as LaTeX\"\"\"\n",
1704:     "        latex_content = \"\\\\documentclass{article}\\n\\\\begin{document}\\n\\n\"\n",
1705:     "        \n",
1706:     "        for section, content in manuscript.items():\n",
1707:     "            if section == 'Abstract':\n",
1708:     "                latex_content += f\"\\\\abstract{{{content}}}\\n\\n\"\n",
1709:     "            else:\n",
1710:     "                latex_content += f\"\\\\section{{{section}}}\\n{content}\\n\\n\"\n",
1711:     "        \n",
1712:     "        latex_content += \"\\\\end{document}\"\n",
1713:     "        \n",
1714:     "        # Save to file\n",
1715:     "        with open('/tmp/complete_manuscript.tex', 'w') as f:\n",
1716:     "            f.write(latex_content)\n",
1717:     "        \n",
1718:     "        print(\"✅ LaTeX manuscript saved to /tmp/complete_manuscript.tex\")\n",
1719:     "    \n",
1720:     "    def export_markdown(manuscript):\n",
1721:     "        \"\"\"Export manuscript as Markdown\"\"\"\n",
1722:     "        markdown_content = \"# Complete Manuscript\\n\\n\"\n",
1723:     "        \n",
1724:     "        for section, content in manuscript.items():\n",
1725:     "            markdown_content += f\"## {section}\\n\\n{content}\\n\\n\"\n",
1726:     "        \n",
1727:     "        # Save to file\n",
1728:     "        with open('/tmp/complete_manuscript.md', 'w') as f:\n",
1729:     "            f.write(markdown_content)\n",
1730:     "        \n",
1731:     "        print(\"✅ Markdown manuscript saved to /tmp/complete_manuscript.md\")\n",
1732:     "    \n",
1733:     "    def export_text(manuscript):\n",
1734:     "        \"\"\"Export manuscript as plain text\"\"\"\n",
1735:     "        text_content = \"COMPLETE MANUSCRIPT\\n\" + \"=\" * 50 + \"\\n\\n\"\n",
1736:     "        \n",
1737:     "        for section, content in manuscript.items():\n",
1738:     "            text_content += f\"{section.upper()}\\n\" + \"-\" * 20 + \"\\n{content}\\n\\n\"\n",
1739:     "        \n",
1740:     "        # Save to file\n",
1741:     "        with open('/tmp/complete_manuscript.txt', 'w') as f:\n",
1742:     "            f.write(text_content)\n",
1743:     "        \n",
1744:     "        print(\"✅ Text manuscript saved to /tmp/complete_manuscript.txt\")\n",
1745:     "    \n",
1746:     "    generate_complete_button.on_click(on_generate_complete_clicked)\n",
1747:     "    \n",
1748:     "    # Layout\n",
1749:     "    interface = widgets.VBox([\n",
1750:     "        widgets.HTML(\"<h3>📄 Complete Manuscript Generation</h3>\"),\n",
1751:     "        widgets.HBox([generate_complete_button, export_format]),\n",
1752:     "        complete_output\n",
1753:     "    ])\n",
1754:     "    \n",
1755:     "    return interface\n",
1756:     "\n",
1757:     "# Create and display interface\n",
1758:     "complete_interface = create_complete_manuscript_interface()\n",
1759:     "display(complete_interface)\n"
1760:    ]
1761:   },
1762:   {
1763:    "cell_type": "markdown",
1764:    "metadata": {},
1765:    "source": [
1766:     "## 8. Example Usage and Workflow\n"
1767:    ]
1768:   },
1769:   {
1770:    "cell_type": "code",
1771:    "execution_count": null,
1772:    "metadata": {},
1773:    "outputs": [],
1774:    "source": [
1775:     "# Example workflow demonstration with referee reports\n",
1776:     "def demonstrate_workflow():\n",
1777:     "    \"\"\"Demonstrate the complete manuscript review workflow including referee reports\"\"\"\n",
1778:     "    \n",
1779:     "    print(\"🎯 DENARIO MANUSCRIPT REVIEW WORKFLOW DEMONSTRATION\")\n",
1780:     "    print(\"=\" * 60)\n",
1781:     "    \n",
1782:     "    # Step 1: Create a sample incomplete manuscript\n",
1783:     "    sample_manuscript = \"\"\"\n",
1784:     "    \\\\documentclass{article}\n",
1785:     "    \\\\begin{document}\n",
1786:     "    \n",
1787:     "    \\\\title{Sample Research Paper}\n",
1788:     "    \\\\author{Researcher}\n",
1789:     "    \\\\maketitle\n",
1790:     "    \n",
1791:     "    \\\\abstract{This paper presents a novel approach to machine learning.}\n",
1792:     "    \n",
1793:     "    \\\\section{Introduction}\n",
1794:     "    Machine learning has become increasingly important in recent years.\n",
1795:     "    \n",
1796:     "    \\\\section{Methods}\n",
1797:     "    We used a neural network approach. The equation is: $E = mc^2$\n",
1798:     "    \n",
1799:     "    \\\\section{Results}\n",
1800:     "    [Results section is incomplete]\n",
1801:     "    \n",
1802:     "    \\\\section{Discussion}\n",
1803:     "    [Discussion section is missing]\n",
1804:     "    \n",
1805:     "    \\\\section{Conclusion}\n",
1806:     "    [Conclusion section is missing]\n",
1807:     "    \n",
1808:     "    \\\\end{document}\n",
1809:     "    \"\"\"\n",
1810:     "    \n",
1811:     "    # Save sample manuscript\n",
1812:     "    with open('/tmp/sample_manuscript.tex', 'w') as f:\n",
1813:     "        f.write(sample_manuscript)\n",
1814:     "    \n",
1815:     "    print(\"📝 Step 1: Sample manuscript created\")\n",
1816:     "    print(\"   - Contains incomplete Results section\")\n",
1817:     "    print(\"   - Missing Discussion and Conclusion sections\")\n",
1818:     "    print(\"   - Has some mathematical content to verify\")\n",
1819:     "    \n",
1820:     "    # Step 2: Load and analyze\n",
1821:     "    print(\"\\n🔍 Step 2: Analyzing manuscript...\")\n",
1822:     "    if enhanced_reviewer.load_manuscript('/tmp/sample_manuscript.tex'):\n",
1823:     "        report = enhanced_reviewer.generate_report()\n",
1824:     "        \n",
1825:     "        print(f\"   - Found {len(report['sections'])} sections\")\n",
1826:     "        print(f\"   - Identified {report['total_issues']} issues\")\n",
1827:     "        print(f\"   - Found {report['citations']['total_citations']} citations\")\n",
1828:     "        print(f\"   - Detected {report['mathematics']['equations']} equations\")\n",
1829:     "    \n",
1830:     "    # Step 3: Load referee report\n",
1831:     "    print(\"\\n📋 Step 3: Loading referee report...\")\n",
1832:     "    sample_referee_report = \"\"\"\n",
1833:     "    RECOMMENDATION: Major Revision\n",
1834:     "    \n",
1835:     "    Major Issues:\n",
1836:     "    1. The Methods section lacks sufficient detail about the experimental setup and data preprocessing steps.\n",
1837:     "    2. The Results section is incomplete and needs statistical analysis and proper visualization.\n",
1838:     "    3. Missing discussion of limitations and potential biases in the methodology.\n",
1839:     "    \n",
1840:     "    Minor Issues:\n",
1841:     "    1. Fix typo in line 12: \"authro\" should be \"author\"\n",
1842:     "    2. Add more recent references to the Introduction section.\n",
1843:     "    3. Improve figure captions for better clarity.\n",
1844:     "    \n",
1845:     "    Suggestions:\n",
1846:     "    1. Consider adding a comparison with existing methods in the Discussion section.\n",
1847:     "    2. The conclusion could be more comprehensive and include future work directions.\n",
1848:     "    \"\"\"\n",
1849:     "    \n",
1850:     "    if referee_reviewer.load_referee_report(sample_referee_report):\n",
1851:     "        print(\"   ✅ Referee report loaded successfully\")\n",
1852:     "        print(\"   📊 Parsed comments and identified priority issues\")\n",
1853:     "    else:\n",
1854:     "        print(\"   ❌ Failed to load referee report\")\n",
1855:     "    \n",
1856:     "    # Step 4: Generate responses to referee comments\n",
1857:     "    print(\"\\n🔄 Step 4: Generating responses to referee comments...\")\n",
1858:     "    \n",
1859:     "    # Generate responses for sections with comments\n",
1860:     "    methods_response = referee_reviewer.generate_referee_response('Methods')\n",
1861:     "    results_response = referee_reviewer.generate_referee_response('Results')\n",
1862:     "    discussion_response = referee_reviewer.generate_referee_response('Discussion')\n",
1863:     "    \n",
1864:     "    print(\"   ✅ Generated responses for Methods section\")\n",
1865:     "    print(\"   ✅ Generated responses for Results section\")\n",
1866:     "    print(\"   ✅ Generated responses for Discussion section\")\n",
1867:     "    \n",
1868:     "    # Step 5: Generate missing content\n",
1869:     "    print(\"\\n🔄 Step 5: Generating missing content...\")\n",
1870:     "    \n",
1871:     "    # Generate Results section\n",
1872:     "    results_content = enhanced_reviewer.generate_missing_content(\n",
1873:     "        'Results', \n",
1874:     "        'Machine learning neural network performance metrics'\n",
1875:     "    )\n",
1876:     "    \n",
1877:     "    # Generate Discussion section\n",
1878:     "    discussion_content = enhanced_reviewer.generate_missing_content(\n",
1879:     "        'Discussion', \n",
1880:     "        'Implications of neural network results for machine learning'\n",
1881:     "    )\n",
1882:     "    \n",
1883:     "    # Generate Conclusion section\n",
1884:     "    conclusion_content = enhanced_reviewer.generate_missing_content(\n",
1885:     "        'Conclusion', \n",
1886:     "        'Summary of findings and future work'\n",
1887:     "    )\n",
1888:     "    \n",
1889:     "    print(\"   ✅ Generated Results section\")\n",
1890:     "    print(\"   ✅ Generated Discussion section\") \n",
1891:     "    print(\"   ✅ Generated Conclusion section\")\n",
1892:     "    \n",
1893:     "    # Step 6: Verify mathematics\n",
1894:     "    print(\"\\n🧮 Step 6: Verifying mathematics...\")\n",
1895:     "    math_result = enhanced_reviewer.verify_mathematics(\"$E = mc^2$\")\n",
1896:     "    print(f\"   - Mathematics verification: {math_result['status']}\")\n",
1897:     "    \n",
1898:     "    # Step 7: Generate complete manuscript\n",
1899:     "    print(\"\\n📄 Step 7: Generating complete manuscript...\")\n",
1900:     "    complete_manuscript = enhanced_reviewer.generate_complete_manuscript()\n",
1901:     "    \n",
1902:     "    if complete_manuscript:\n",
1903:     "        print(\"   ✅ Complete manuscript generated with all sections\")\n",
1904:     "        print(f\"   - Total sections: {len(complete_manuscript)}\")\n",
1905:     "        \n",
1906:     "        # Show summary\n",
1907:     "        print(\"\\n📊 MANUSCRIPT SUMMARY:\")\n",
1908:     "        for section, content in complete_manuscript.items():\n",
1909:     "            word_count = len(content.split()) if content else 0\n",
1910:     "            print(f\"   - {section}: {word_count} words\")\n",
1911:     "    \n",
1912:     "    print(\"\\n🎉 Workflow demonstration completed!\")\n",
1913:     "    print(\"   The manuscript has been analyzed, enhanced, and completed\")\n",
1914:     "    print(\"   with proper citations, verified mathematics, and referee responses.\")\n",
1915:     "\n",
1916:     "# Run demonstration\n",
1917:     "demonstrate_workflow()\n"
1918:    ]
1919:   },
1920:   {
1921:    "cell_type": "markdown",
1922:    "metadata": {},
1923:    "source": [
1924:     "## 9. Summary and Next Steps\n",
1925:     "\n",
1926:     "This notebook demonstrates how Denario can be used for comprehensive manuscript review and completion. The system provides:\n",
1927:     "\n",
1928:     "### ✅ **Key Capabilities Delivered:**\n",
1929:     "\n",
1930:     "1. **Section Completeness Analysis** - Identifies missing or incomplete sections\n",
1931:     "2. **Referee Report Parsing** - Automatically parses and prioritizes reviewer comments\n",
1932:     "3. **Referee Response Generation** - Generates content that addresses specific reviewer comments\n",
1933:     "4. **Content Generation** - Uses Denario's AI agents to generate missing content\n",
1934:     "5. **Citation Integration** - Automatically adds relevant in-text citations\n",
1935:     "6. **Mathematical Verification** - Checks and verifies mathematical derivations\n",
1936:     "7. **Interactive Interface** - User-friendly widgets for all operations\n",
1937:     "8. **Export Functionality** - Generate complete manuscripts in multiple formats\n",
1938:     "\n",
1939:     "### 🎯 **Addresses Your Original Request:**\n",
1940:     "\n",
1941:     "- ✅ **Identify incomplete sections** - Automated analysis detects missing content\n",
1942:     "- ✅ **Construct text with in-text citations** - AI-generated content with proper citations\n",
1943:     "- ✅ **Verify mathematics/calculations** - Mathematical verification system\n",
1944:     "- ✅ **Natural flow within manuscript** - Context-aware content generation\n",
1945:     "- ✅ **Address referee comments** - Systematic response to reviewer feedback\n",
1946:     "- ✅ **Priority-based responses** - High/Medium/Low priority comment handling\n",
1947:     "\n",
1948:     "### 🚀 **Next Steps:**\n",
1949:     "\n",
1950:     "1. **Upload your actual manuscript** using the file upload widget\n",
1951:     "2. **Upload referee report** (if available) using the referee report interface\n",
1952:     "3. **Run the analysis** to identify specific issues and parse referee comments\n",
1953:     "4. **Generate responses to referee comments** using the automated response system\n",
1954:     "5. **Generate missing content** section by section\n",
1955:     "6. **Verify all mathematics** using the verification interface\n",
1956:     "7. **Export the complete manuscript** in your preferred format\n",
1957:     "\n",
1958:     "### 💡 **Tips for Best Results:**\n",
1959:     "\n",
1960:     "- **Referee Reports**: Use clear section references (e.g., \"Methods section, lines 45-67\")\n",
1961:     "- **Priority Issues**: Focus on HIGH priority comments first, then MEDIUM, then LOW\n",
1962:     "- **Content Generation**: Provide clear context when generating content\n",
1963:     "- **Review Process**: Review generated content before finalizing\n",
1964:     "- **Mathematics**: Use the mathematical verification for all equations\n",
1965:     "- **Export Format**: Export in LaTeX format for academic papers\n",
1966:     "- **Save Work**: Save your work frequently\n",
1967:     "\n",
1968:     "**Ready to review your manuscript? Start by uploading your file above!** 📚\n"
1969:    ]
1970:   },
1971:   {
1972:    "cell_type": "markdown",
1973:    "metadata": {},
1974:    "source": []
1975:   }
1976:  ],
1977:  "metadata": {
1978:   "kernelspec": {
1979:    "display_name": "Python 3 (ipykernel)",
1980:    "language": "python",
1981:    "name": "python3"
1982:   },
1983:   "language_info": {
1984:    "codemirror_mode": {
1985:     "name": "ipython",
1986:     "version": 3
1987:    },
1988:    "file_extension": ".py",
1989:    "mimetype": "text/x-python",
1990:    "name": "python",
1991:    "nbconvert_exporter": "python",
1992:    "pygments_lexer": "ipython3",
1993:    "version": "3.13.7"
1994:   }
1995:  },
1996:  "nbformat": 4,
1997:  "nbformat_minor": 4
1998: }
</file>

</files>
